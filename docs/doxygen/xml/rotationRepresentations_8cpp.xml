<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="rotationRepresentations_8cpp" kind="file" language="C++">
    <compoundname>rotationRepresentations.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="rotationRepresentations_8h" local="yes">tudat/math/basic/rotationRepresentations.h</includes>
    <incdepgraph>
      <node id="4">
        <label>Eigen/Core</label>
      </node>
      <node id="3">
        <label>tudat/math/basic/rotationRepresentations.h</label>
        <link refid="rotationRepresentations_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Eigen/Dense</label>
      </node>
      <node id="1">
        <label>/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/math/basic/rotationRepresentations.cpp</label>
        <link refid="rotationRepresentations_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetudat">tudat</innernamespace>
    <innernamespace refid="namespacetudat_1_1basic__mathematics">tudat::basic_mathematics</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/math/basic/rotationRepresentations.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetudat" kindref="compound">tudat</ref></highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">basic_mathematics</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>4<sp/>&gt;<sp/>calculateEulerAngle313WrtQuaternionPartial(</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>quaternion<sp/>)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>termsSquared1<sp/>=<sp/>(<sp/>quaternion.z(<sp/>)<sp/>*<sp/>quaternion.z(<sp/>)<sp/>+<sp/>quaternion.w(<sp/>)<sp/>*<sp/>quaternion.w(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>termsSquared2<sp/>=<sp/>(<sp/>quaternion.x(<sp/>)<sp/>*<sp/>quaternion.x(<sp/>)<sp/>+<sp/>quaternion.y(<sp/>)<sp/>*<sp/>quaternion.y(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>recurrentTerm<sp/>=<sp/>std::sqrt(<sp/>termsSquared2<sp/>/<sp/>termsSquared1<sp/>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>4<sp/>&gt;<sp/>partialMatrix;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>0,<sp/>0<sp/>)<sp/>=<sp/>quaternion.z(<sp/>)<sp/>/<sp/>termsSquared1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>0,<sp/>1<sp/>)<sp/>=<sp/>quaternion.y(<sp/>)<sp/>/<sp/>termsSquared2;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>0,<sp/>2<sp/>)<sp/>=<sp/>-quaternion.x(<sp/>)<sp/>/<sp/>termsSquared2;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>0,<sp/>3<sp/>)<sp/>=<sp/>-quaternion.w(<sp/>)<sp/>/<sp/>termsSquared1;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>1,<sp/>0<sp/>)<sp/>=<sp/>-2.0<sp/>*<sp/>quaternion.w(<sp/>)<sp/>*<sp/>recurrentTerm;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>1,<sp/>1<sp/>)<sp/>=<sp/>2.0<sp/>*<sp/>quaternion.x(<sp/>)<sp/>/<sp/>recurrentTerm;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>1,<sp/>2<sp/>)<sp/>=<sp/>2.0<sp/>*<sp/>quaternion.y(<sp/>)<sp/>/<sp/>recurrentTerm;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>1,<sp/>3<sp/>)<sp/>=<sp/>-2.0<sp/>*<sp/>quaternion.z(<sp/>)<sp/>*<sp/>recurrentTerm;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>2,<sp/>0<sp/>)<sp/>=<sp/>partialMatrix(<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>2,<sp/>1<sp/>)<sp/>=<sp/>-partialMatrix(<sp/>0,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>2,<sp/>2<sp/>)<sp/>=<sp/>-partialMatrix(<sp/>0,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>partialMatrix(<sp/>2,<sp/>3<sp/>)<sp/>=<sp/>partialMatrix(<sp/>0,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partialMatrix;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>4<sp/>&gt;<sp/>calculateEulerAngle313WrtQuaternionPartialFromEulerAngles(</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d&amp;<sp/>eulerAngles<sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calculateEulerAngle313WrtQuaternionPartial(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Quaterniond(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-eulerAngles(<sp/>0<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-eulerAngles(<sp/>1<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-eulerAngles(<sp/>2<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">Eigen::Quaterniond<sp/>getQuaternionFrom313EulerAngles(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d&amp;<sp/>eulerAngles<sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosineHalfTheta<sp/>=<sp/>std::cos(<sp/>eulerAngles(<sp/>1<sp/>)<sp/>/<sp/>2.0<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sineHalfTheta<sp/>=<sp/>std::sin(<sp/>eulerAngles(<sp/>1<sp/>)<sp/>/<sp/>2.0<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::Quaterniond(<sp/>cosineHalfTheta<sp/>*<sp/>std::cos(<sp/>(<sp/>eulerAngles(<sp/>0<sp/>)<sp/>+<sp/>eulerAngles(<sp/>2<sp/>)<sp/>)<sp/>/<sp/>2.0<sp/>),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-sineHalfTheta<sp/>*<sp/>std::cos(<sp/>(<sp/>eulerAngles(<sp/>0<sp/>)<sp/>-<sp/>eulerAngles(<sp/>2<sp/>)<sp/>)<sp/>/<sp/>2.0<sp/>),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sineHalfTheta<sp/>*<sp/>std::sin(<sp/>(<sp/>eulerAngles(<sp/>0<sp/>)<sp/>-<sp/>eulerAngles(<sp/>2<sp/>)<sp/>)<sp/>/<sp/>2.0<sp/>),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-cosineHalfTheta<sp/>*<sp/>std::sin(<sp/>(<sp/>eulerAngles(<sp/>0<sp/>)<sp/>+<sp/>eulerAngles(<sp/>2<sp/>)<sp/>)<sp/>/<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">Eigen::Vector3d<sp/>get132EulerAnglesFromRotationMatrix(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3d&amp;<sp/>rotationMatrix<sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>eulerAngles;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>eulerAngles(<sp/>0<sp/>)<sp/>=<sp/>std::atan2(<sp/>-rotationMatrix(<sp/>2,<sp/>1<sp/>),<sp/>rotationMatrix(<sp/>1,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>eulerAngles(<sp/>1<sp/>)<sp/>=<sp/>std::asin(<sp/>rotationMatrix(<sp/>0,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>eulerAngles(<sp/>2<sp/>)<sp/>=<sp/>std::atan2(<sp/>-rotationMatrix(<sp/>0,<sp/>2<sp/>),<sp/>rotationMatrix(<sp/>0,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eulerAngles;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">Eigen::Vector3d<sp/>get313EulerAnglesFromQuaternion(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>quaternion<sp/>)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phiPlus<sp/>=<sp/>-std::atan2(<sp/>quaternion.z(<sp/>),<sp/>quaternion.w(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phiMinus<sp/>=<sp/>-std::atan2(<sp/>quaternion.y(<sp/>),<sp/>-quaternion.x(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>psi<sp/>=<sp/>phiPlus<sp/>-<sp/>phiMinus;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosineTheta<sp/>=<sp/>-quaternion.x(<sp/>)<sp/>*<sp/>quaternion.x(<sp/>)<sp/>-<sp/>quaternion.y(<sp/>)<sp/>*<sp/>quaternion.y(<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quaternion.z(<sp/>)<sp/>*<sp/>quaternion.z(<sp/>)<sp/>+<sp/>quaternion.w(<sp/>)<sp/>*<sp/>quaternion.w(<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cosineTheta<sp/>&gt;<sp/>1.0<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cosineTheta<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cosineTheta<sp/>&lt;<sp/>-1.0<sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cosineTheta<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>std::acos(<sp/>cosineTheta<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/>=<sp/>phiPlus<sp/>+<sp/>phiMinus;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>Eigen::Vector3d(<sp/>)&lt;&lt;<sp/>psi,<sp/>theta,<sp/>phi<sp/>).finished(<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">Eigen::Vector3d<sp/>get313EulerAnglesFromRotationMatrix(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3d&amp;<sp/>rotationMatrix<sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>std::acos(<sp/>rotationMatrix(<sp/>2,<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>psi<sp/>=<sp/>std::atan2(<sp/>rotationMatrix(<sp/>0,<sp/>2<sp/>),<sp/>rotationMatrix(<sp/>1,<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/>=<sp/>std::atan2(<sp/>rotationMatrix(<sp/>2,<sp/>0<sp/>),<sp/>-rotationMatrix(<sp/>2,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>Eigen::Vector3d(<sp/>)&lt;&lt;<sp/>psi,<sp/>theta,<sp/>phi<sp/>).finished(<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/math/basic/rotationRepresentations.cpp"/>
  </compounddef>
</doxygen>
