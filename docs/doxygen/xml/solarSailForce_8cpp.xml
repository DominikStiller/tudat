<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="solarSailForce_8cpp" kind="file" language="C++">
    <compoundname>solarSailForce.cpp</compoundname>
    <includes refid="linearAlgebra_8h" local="yes">tudat/math/basic/linearAlgebra.h</includes>
    <includes refid="solarSailForce_8h" local="yes">tudat/astro/electromagnetism/solarSailForce.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cmath</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="8">
        <label>Eigen/Geometry</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="6">
        <label>Eigen/Core</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="1">
        <label>/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/electromagnetism/solarSailForce.cpp</label>
        <link refid="solarSailForce_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>tudat/astro/electromagnetism/solarSailForce.h</label>
        <link refid="solarSailForce_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tudat/math/basic/linearAlgebra.h</label>
        <link refid="linearAlgebra_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="9">
        <label>tudat/basics/basicTypedefs.h</label>
        <link refid="basicTypedefs_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>Eigen/SVD</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetudat">tudat</innernamespace>
    <innernamespace refid="namespacetudat_1_1electromagnetism">tudat::electromagnetism</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2010-2019,<sp/>Delft<sp/>University<sp/>of<sp/>Technology</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>All<sp/>rigths<sp/>reserved</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Tudat.<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>exclusively</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Modified<sp/>BSD<sp/>license.<sp/>You<sp/>should<sp/>have<sp/>received</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a<sp/>copy<sp/>of<sp/>the<sp/>license<sp/>with<sp/>this<sp/>file.<sp/>If<sp/>not,<sp/>please<sp/>or<sp/>visit:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>http://tudat.tudelft.nl/LICENSE.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/math/basic/linearAlgebra.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/astro/electromagnetism/solarSailForce.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetudat" kindref="compound">tudat</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">electromagnetism</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">Eigen::Vector3d<sp/>computeSolarSailForce(</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frontEmissivityCoefficient,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>backEmissivityCoefficient,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frontLambertianCoefficient,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>backLambertianCoefficient,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>reflectivityCoefficient,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>specularReflectionCoefficient,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d&amp;<sp/>normalisedVectorToSource,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d&amp;<sp/>normalisedVelocityVector,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radiationPressure,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>area,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coneAngle,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clockAngle)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>constant<sp/>A<sp/>to<sp/>simplify<sp/>the<sp/>formulae<sp/>of<sp/>the<sp/>solar<sp/>sail<sp/>model.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>frontLambertianCoefficient<sp/>*<sp/>reflectivityCoefficient<sp/>*<sp/>(<sp/>1.0<sp/>-<sp/>specularReflectionCoefficient<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(<sp/>1.0<sp/>-<sp/>reflectivityCoefficient<sp/>)<sp/>*<sp/>(<sp/>frontEmissivityCoefficient<sp/>*<sp/>frontLambertianCoefficient<sp/>-<sp/>backEmissivityCoefficient<sp/>*<sp/>backLambertianCoefficient)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>frontEmissivityCoefficient<sp/>+<sp/>backEmissivityCoefficient<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>cosinus<sp/>and<sp/>sinus<sp/>of<sp/>the<sp/>sail<sp/>cone<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosinusConeAngle<sp/>=<sp/>cos(<sp/>coneAngle<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sinusConeAngle<sp/>=<sp/>sin(<sp/>coneAngle<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>force<sp/>magnitude.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>forceMagnitude<sp/>=<sp/>radiationPressure<sp/>*<sp/>area<sp/>*<sp/>cosinusConeAngle</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>std::sqrt(<sp/>std::pow(<sp/>cosinusConeAngle<sp/>*<sp/>(<sp/>1.0<sp/>+<sp/>reflectivityCoefficient<sp/>*<sp/>specularReflectionCoefficient<sp/>)<sp/>+<sp/>A,<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::pow(<sp/>(<sp/>1.0<sp/>-<sp/>specularReflectionCoefficient<sp/>*<sp/>reflectivityCoefficient<sp/>)<sp/>*<sp/>sinusConeAngle<sp/>,<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>phi<sp/>and<sp/>theta<sp/>angles,<sp/>to<sp/>later<sp/>define<sp/>the<sp/>force<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/>=<sp/>atan2(<sp/>(<sp/>(<sp/>1.0<sp/>-<sp/>specularReflectionCoefficient<sp/>*<sp/>reflectivityCoefficient<sp/>)<sp/>*<sp/>cosinusConeAngle<sp/>*<sp/>sinusConeAngle<sp/>),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>1.0<sp/>+<sp/>reflectivityCoefficient<sp/>*<sp/>specularReflectionCoefficient<sp/>)<sp/>*<sp/>std::pow(<sp/>cosinusConeAngle,<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>A<sp/>*<sp/>cosinusConeAngle<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>coneAngle<sp/>-<sp/>phi;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>normalised<sp/>direction<sp/>vector<sp/>of<sp/>the<sp/>force<sp/>defined<sp/>in<sp/>the<sp/>(r,<sp/>theta,<sp/>k)<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>forceDirectionLocalFrame<sp/>=<sp/>(<sp/>Eigen::Vector3d()<sp/>&lt;&lt;<sp/>cos(<sp/>theta<sp/>),<sp/>sin(<sp/>theta<sp/>)<sp/>*<sp/>sin(<sp/>clockAngle<sp/>),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sin(<sp/>theta<sp/>)<sp/>*<sp/>cos(<sp/>clockAngle<sp/>)<sp/>).finished();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>normalised<sp/>vector<sp/>from<sp/>source<sp/>to<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>normalisedVectorFromSource<sp/>=<sp/>-<sp/>normalisedVectorToSource;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>rotation<sp/>matrix<sp/>from<sp/>local<sp/>to<sp/>inertial<sp/>reference<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>rotationMatrixFromLocalToInertial;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(0,0)<sp/>=<sp/>normalisedVectorFromSource[0];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(0,1)<sp/>=</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalisedVelocityVector[0]<sp/>*<sp/>(<sp/>std::pow(<sp/>normalisedVectorFromSource[2],<sp/>2<sp/>)<sp/>+<sp/>std::pow(<sp/>normalisedVectorFromSource[1],<sp/>2<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>normalisedVectorFromSource[0]<sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>normalisedVectorFromSource[1]<sp/>*<sp/>normalisedVelocityVector[1]<sp/>+<sp/>normalisedVectorFromSource[2]<sp/>*<sp/>normalisedVelocityVector[2]<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(0,2)<sp/>=<sp/>normalisedVectorFromSource.cross(<sp/>normalisedVelocityVector<sp/>)[0];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(1,0)<sp/>=<sp/>normalisedVectorFromSource[1];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(1,1)<sp/>=</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalisedVelocityVector[1]<sp/>*<sp/><sp/>(<sp/>std::pow(<sp/>normalisedVectorFromSource[2],<sp/>2<sp/>)<sp/>+<sp/>std::pow(<sp/>normalisedVectorFromSource[0],<sp/>2<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>normalisedVectorFromSource[1]<sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>normalisedVectorFromSource[0]<sp/>*<sp/>normalisedVelocityVector[0]<sp/>+<sp/>normalisedVectorFromSource[2]<sp/>*<sp/>normalisedVelocityVector[2]<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(1,2)<sp/>=<sp/>normalisedVectorFromSource.cross(<sp/>normalisedVelocityVector<sp/>)[1];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(2,0)<sp/>=<sp/>normalisedVectorFromSource[2];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(2,1)<sp/>=</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalisedVelocityVector[2]<sp/>*<sp/>(<sp/>std::pow(<sp/>normalisedVectorFromSource[1],<sp/>2<sp/>)<sp/>+<sp/>std::pow(<sp/>normalisedVectorFromSource[0],<sp/>2<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>normalisedVectorFromSource[2]<sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>normalisedVectorFromSource[1]<sp/>*<sp/>normalisedVelocityVector[1]<sp/>+<sp/>normalisedVectorFromSource[0]<sp/>*<sp/>normalisedVelocityVector[0]<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixFromLocalToInertial(2,2)<sp/>=<sp/>normalisedVectorFromSource.cross(<sp/>normalisedVelocityVector<sp/>)[2];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>force<sp/>direction<sp/>in<sp/>inertial<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>forceDirection<sp/>=<sp/>rotationMatrixFromLocalToInertial<sp/>*<sp/>forceDirectionLocalFrame;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>solar<sp/>sail<sp/>force<sp/>in<sp/>inertial<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forceMagnitude<sp/>*<sp/>forceDirection;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>electromagnetism</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tudat</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/electromagnetism/solarSailForce.cpp"/>
  </compounddef>
</doxygen>
