<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="rotationMatrixPartial_8cpp" kind="file" language="C++">
    <compoundname>rotationMatrixPartial.cpp</compoundname>
    <includes refid="rotationMatrixPartial_8h" local="yes">tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h</includes>
    <incdepgraph>
      <node id="52">
        <label>tudat/math/interpolators/oneDimensionalInterpolator.h</label>
        <link refid="oneDimensionalInterpolator_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>tudat/config.hpp</label>
      </node>
      <node id="36">
        <label>tudat/io/streamFilters.h</label>
        <link refid="streamFilters_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>system_error</label>
      </node>
      <node id="33">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="66">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="17">
        <label>limits</label>
      </node>
      <node id="61">
        <label>tudat/math/interpolators/linearInterpolator.h</label>
        <link refid="linearInterpolator_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>tudat/astro/propagators/singleStateTypeDerivative.h</label>
        <link refid="singleStateTypeDerivative_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>tudat/interface/spice/spiceInterface.h</label>
        <link refid="spiceInterface_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>boost/iostreams/device/back_inserter.hpp</label>
      </node>
      <node id="53">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="42">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>boost/date_time/gregorian/gregorian.hpp</label>
      </node>
      <node id="10">
        <label>Eigen/Geometry</label>
      </node>
      <node id="60">
        <label>tudat/basics/tudatTypeTraits.h</label>
        <link refid="tudatTypeTraits_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>tudat/astro/ephemerides/tleEphemeris.h</label>
        <link refid="tleEphemeris_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cmath</label>
      </node>
      <node id="56">
        <label>stdexcept</label>
      </node>
      <node id="6">
        <label>Eigen/Core</label>
      </node>
      <node id="8">
        <label>tudat/astro/ephemerides/rotationalEphemeris.h</label>
        <link refid="rotationalEphemeris_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="31">
        <label>tudat/io/basicInputOutput.h</label>
        <link refid="basicInputOutput_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>map</label>
      </node>
      <node id="39">
        <label>boost/iostreams/stream_buffer.hpp</label>
      </node>
      <node id="26">
        <label>tudat/astro/reference_frames/referenceFrameTransformations.h</label>
        <link refid="referenceFrameTransformations_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>fstream</label>
      </node>
      <node id="24">
        <label>tudat/math/basic/basicMathematicsFunctions.h</label>
        <link refid="basicMathematicsFunctions_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>boost/function.hpp</label>
      </node>
      <node id="25">
        <label>boost/random/mersenne_twister.hpp</label>
      </node>
      <node id="44">
        <label>tudat/resource/resource.h</label>
      </node>
      <node id="18">
        <label>tudat/math/basic/linearAlgebra.h</label>
        <link refid="linearAlgebra_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>tudat/basics/identityElements.h</label>
        <link refid="identityElements_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tudat/astro/basic_astro/physicalConstants.h</label>
        <link refid="physicalConstants_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>tudat/astro/ephemerides/ephemeris.h</label>
        <link refid="astro_2ephemerides_2ephemeris_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>tudat/math/interpolators/interpolator.h</label>
        <link refid="interpolator_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h</label>
        <link refid="rotationMatrixPartial_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>tudat/astro/basic_astro/timeConversions.h</label>
        <link refid="timeConversions_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>tudat/math/basic/nearestNeighbourSearch.h</label>
        <link refid="nearestNeighbourSearch_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="37">
        <label>boost/iostreams/filter/line.hpp</label>
      </node>
      <node id="46">
        <label>cspice/SpiceUsr.h</label>
      </node>
      <node id="65">
        <label>tudat/astro/orbit_determination/estimatable_parameters/estimatableParameter.h</label>
        <link refid="estimatableParameter_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>tudat/paths.hpp</label>
        <link refid="paths_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="68">
        <label>tudat/basics/utilityMacros.h</label>
        <link refid="utilityMacros_8h_source"/>
      </node>
      <node id="47">
        <label>cspice/SpiceZfc.h</label>
      </node>
      <node id="22">
        <label>tudat/basics/timeType.h</label>
        <link refid="timeType_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>tudat/basics/basicTypedefs.h</label>
        <link refid="basicTypedefs_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>tudat/astro/ephemerides/simpleRotationalEphemeris.h</label>
        <link refid="simpleRotationalEphemeris_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>tudat/math/basic/mathematicalConstants.h</label>
        <link refid="mathematicalConstants_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>tudat/astro/ephemerides/fullPlanetaryRotationModel.h</label>
        <link refid="fullPlanetaryRotationModel_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>tudat/astro/ephemerides/synchronousRotationalEphemeris.h</label>
        <link refid="synchronousRotationalEphemeris_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>boost/regex.hpp</label>
      </node>
      <node id="20">
        <label>Eigen/SVD</label>
      </node>
      <node id="63">
        <label>boost/array.hpp</label>
      </node>
      <node id="64">
        <label>tudat/math/interpolators/cubicSplineInterpolator.h</label>
        <link refid="cubicSplineInterpolator_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>type_traits</label>
      </node>
      <node id="51">
        <label>boost/make_shared.hpp</label>
      </node>
      <node id="62">
        <label>boost/multi_array.hpp</label>
      </node>
      <node id="16">
        <label>complex</label>
      </node>
      <node id="23">
        <label>algorithm</label>
      </node>
      <node id="50">
        <label>tudat/math/interpolators/lagrangeInterpolator.h</label>
        <link refid="lagrangeInterpolator_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="1">
        <label>/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp</label>
        <link refid="rotationMatrixPartial_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>tudat/math/interpolators/lookupScheme.h</label>
        <link refid="lookupScheme_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetudat">tudat</innernamespace>
    <innernamespace refid="namespacetudat_1_1observation__partials">tudat::observation_partials</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2010-2019,<sp/>Delft<sp/>University<sp/>of<sp/>Technology</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>All<sp/>rigths<sp/>reserved</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Tudat.<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>exclusively</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Modified<sp/>BSD<sp/>license.<sp/>You<sp/>should<sp/>have<sp/>received</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a<sp/>copy<sp/>of<sp/>the<sp/>license<sp/>with<sp/>this<sp/>file.<sp/>If<sp/>not,<sp/>please<sp/>or<sp/>visit:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>http://tudat.tudelft.nl/LICENSE.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/astro/orbit_determination/observation_partials/rotationMatrixPartial.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetudat" kindref="compound">tudat</ref></highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">observation_partials</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">Eigen::Matrix3d<sp/>calculatePartialOfRotationMatrixFromLocalFrameWrtConstantRotationRate(</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>initialBodyFixedToIntegrationFrame,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rotationRate,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceEpoch<sp/>)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentRotationAngle<sp/>=<sp/>rotationRate<sp/>*<sp/>timeSinceEpoch;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>partial<sp/>of<sp/>rotation<sp/>term<sp/>containing<sp/>rotation<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>rotationMatrixDerivative;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sineOfAngle<sp/>=<sp/>sin(<sp/>currentRotationAngle<sp/>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosineOfAngle<sp/>=<sp/>cos(<sp/>currentRotationAngle<sp/>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixDerivative<sp/>&lt;&lt;<sp/>-sineOfAngle,<sp/>-cosineOfAngle,<sp/>0.0,<sp/>cosineOfAngle,<sp/>-<sp/>sineOfAngle,<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>0.0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timeSinceEpoch<sp/>*<sp/>(<sp/>initialBodyFixedToIntegrationFrame.toRotationMatrix(<sp/>)<sp/>)<sp/>*<sp/>rotationMatrixDerivative;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">Eigen::Matrix3d<sp/>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtConstantRotationRate(</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3d<sp/>currentRotationFromLocalToGlobalFrame,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rotationRate,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceEpoch<sp/>)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentRotationFromLocalToGlobalFrame<sp/>*<sp/>reference_frames::Z_AXIS_ROTATION_MATRIX_DERIVATIVE_PREMULTIPLIER<sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>rotationRate<sp/>*<sp/>timeSinceEpoch<sp/>*<sp/>reference_frames::Z_AXIS_ROTATION_MATRIX_DERIVATIVE_PREMULTIPLIER<sp/>-</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d::Identity(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>calculatePartialOfRotationMatrixFromLocalFrameWrtPoleOrientation(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>initialOrientationAngles,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rotationRate,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceEpoch<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>commonTerm<sp/>=<sp/>Eigen::AngleAxisd(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.0<sp/>*<sp/>(<sp/>-initialOrientationAngles.z(<sp/>)<sp/>-<sp/>rotationRate<sp/>*<sp/>timeSinceEpoch<sp/>),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>).toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rightAscension<sp/>=<sp/>initialOrientationAngles.x(<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>declination<sp/>=<sp/>initialOrientationAngles.y(<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>partial<sp/>of<sp/>rotation<sp/>term<sp/>containing<sp/>right<sp/>ascension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>rightAscensionPartial<sp/>=<sp/>-reference_frames::getDerivativeOfZAxisRotationWrtAngle(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-(<sp/>rightAscension<sp/>+<sp/>mathematical_constants::PI<sp/>/<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>partial<sp/>of<sp/>rotation<sp/>term<sp/>containing<sp/>declination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>declinationPartial<sp/>=<sp/>reference_frames::getDerivativeOfXAxisRotationWrtAngle(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>mathematical_constants::PI<sp/>/<sp/>2.0<sp/>-<sp/>declination<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>partials.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>rotationMatrixPartials;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixPartials.push_back(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightAscensionPartial<sp/>*<sp/>Eigen::Matrix3d(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-(<sp/>declination<sp/>-<sp/>mathematical_constants::PI<sp/>/<sp/>2.0<sp/>),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>)<sp/>*<sp/>commonTerm<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixPartials.push_back(</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>(<sp/>rightAscension<sp/>+<sp/>mathematical_constants::PI<sp/>/<sp/>2.0<sp/>),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declinationPartial<sp/>*<sp/>commonTerm<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotationMatrixPartials;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPoleOrientation(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>initialOrientationAngles,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rotationRate,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceEpoch<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>partialsOfRotationMatrix<sp/>=</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculatePartialOfRotationMatrixFromLocalFrameWrtPoleOrientation(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialOrientationAngles,<sp/>rotationRate,<sp/>timeSinceEpoch<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>partialsOfRotationMatrix[<sp/>0<sp/>]<sp/>=<sp/>-rotationRate<sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix.at(<sp/>0<sp/>)<sp/>*<sp/>reference_frames::Z_AXIS_ROTATION_MATRIX_DERIVATIVE_PREMULTIPLIER<sp/>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>partialsOfRotationMatrix[<sp/>1<sp/>]<sp/>=<sp/>-rotationRate<sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix.at(<sp/>1<sp/>)*<sp/>reference_frames::Z_AXIS_ROTATION_MATRIX_DERIVATIVE_PREMULTIPLIER<sp/>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>calculatePartialOfRotationMatrixFromLocalFrameWrtPeriodicSpinVariations(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>ephemerides::PlanetaryOrientationAngleCalculator<sp/>&gt;<sp/>planetaryOrientationCalculator,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;rotationFromMeanOrbitToIcrf,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>polarMotionRotation,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ephemerisTime<sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentMeanAnomaly<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanAnomalyAtEpoch(<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getBodyMeanMotion(<sp/>)<sp/>*<sp/>ephemerisTime;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>currentAngleCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;updateAndGetRotationAngles(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentPhiAngle<sp/>=<sp/>currentAngleCorrections.z(<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>rotationMatrixPartials;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>rotationrateCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;getRotationRateCorrections();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=<sp/>rotationrateCorrections.begin(<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>rotationrateCorrections.end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials.push_back(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>-std::cos(<sp/>currentPhiAngle<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>),<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix()<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials.push_back(</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>-std::cos(<sp/>currentPhiAngle<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>),<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix()<sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotationMatrixPartials;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPeriodicSpinVariations(</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>ephemerides::PlanetaryOrientationAngleCalculator<sp/>&gt;<sp/>planetaryOrientationCalculator,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;rotationFromMeanOrbitToIcrf,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>polarMotionRotation,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ephemerisTime<sp/>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanMotion<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanMotion(<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentMeanAnomaly<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanAnomalyAtEpoch(<sp/>)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>meanMotion<sp/>*<sp/>ephemerisTime;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>currentAngleCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;updateAndGetRotationAngles(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentPhiAngle<sp/>=<sp/>currentAngleCorrections.z(<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanPhiAngleDerivative<sp/>=<sp/>planetaryOrientationCalculator-&gt;getcurrentMeanPhiAngleDerivative(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>rotationrateCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;getRotationRateCorrections();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=<sp/>rotationrateCorrections.begin(<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>rotationrateCorrections.end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix.push_back(</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentPhiAngle<sp/>)<sp/>-<sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>)<sp/>*<sp/>meanPhiAngleDerivative,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>)<sp/>+<sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentPhiAngle<sp/>)<sp/>*<sp/>meanPhiAngleDerivative,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-correctionIterator-&gt;first<sp/>*<sp/>meanMotion<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>)<sp/>-<sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentPhiAngle<sp/>)<sp/>*<sp/>meanPhiAngleDerivative,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentPhiAngle<sp/>)<sp/>-<sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>)<sp/>*<sp/>meanPhiAngleDerivative,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix()<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix.push_back(</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf<sp/>.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-correctionIterator-&gt;first<sp/>*<sp/>meanMotion<sp/>*<sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentPhiAngle<sp/>)<sp/>-<sp/>std::cos(<sp/>currentPhiAngle<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*<sp/>meanPhiAngleDerivative,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-correctionIterator-&gt;first<sp/>*<sp/>meanMotion<sp/>*<sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>)<sp/>+<sp/>std::sin(<sp/>currentPhiAngle<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*<sp/>meanPhiAngleDerivative,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion<sp/>*<sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>)<sp/>-<sp/>std::sin(<sp/>currentPhiAngle<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*<sp/>meanPhiAngleDerivative,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-correctionIterator-&gt;first<sp/>*<sp/>meanMotion<sp/>*<sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentPhiAngle<sp/>)<sp/>-<sp/>std::cos(<sp/>currentPhiAngle<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly<sp/>)<sp/>*<sp/>meanPhiAngleDerivative,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix()<sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>calculatePartialOfRotationMatrixFromLocalFrameWrtPolarMotionAmplitude(</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>ephemerides::PlanetaryOrientationAngleCalculator<sp/>&gt;<sp/>planetaryOrientationCalculator,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>rotationFromMeanOrbitToIcrf,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>rotationFromBodyFixedToIntermediateInertialFrame,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ephemerisTime<sp/>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentMeanAnomaly<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanAnomalyAtEpoch(<sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>planetaryOrientationCalculator-&gt;getBodyMeanMotion(<sp/>)<sp/>*<sp/>ephemerisTime;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>PolarMotion<sp/>=<sp/>planetaryOrientationCalculator<sp/>-&gt;getPolarMotion(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>rotationMatrixPartials;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>xPolarMotionCoefficients<sp/>=<sp/>planetaryOrientationCalculator-&gt;getXpolarMotionCoefficients();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>yPolarMotionCoefficients<sp/>=<sp/>planetaryOrientationCalculator-&gt;getYpolarMotionCoefficients();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>rotationrateCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;getRotationRateCorrections();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for(<sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=<sp/>rotationrateCorrections.begin(<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>rotationrateCorrections.end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>xPolarMotionCoefficients.size()<sp/>!=<sp/>yPolarMotionCoefficients.size()<sp/>){</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<sp/></highlight><highlight class="stringliteral">&quot;Error,<sp/>unconsistent<sp/>sizes<sp/>when<sp/>comparing<sp/>x<sp/>and<sp/>y<sp/>polar<sp/>motion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;amplitude<sp/>coefficients.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>xPolarMotionCoefficientIterator<sp/>=<sp/>xPolarMotionCoefficients.begin(<sp/>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xPolarMotionCoefficientIterator<sp/>!=<sp/>xPolarMotionCoefficients.end(<sp/>);<sp/>xPolarMotionCoefficientIterator++<sp/>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials.push_back(</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::cos(<sp/>xPolarMotionCoefficientIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromBodyFixedToIntermediateInertialFrame.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>-PolarMotion.x(<sp/>)<sp/>),<sp/>0.0,<sp/>std::cos(<sp/>-PolarMotion.x(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::cos(<sp/>-PolarMotion.x(<sp/>)<sp/>),<sp/>0.0,<sp/>-std::sin(<sp/>-PolarMotion.x(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-PolarMotion.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials.push_back(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::sin(<sp/>xPolarMotionCoefficientIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromBodyFixedToIntermediateInertialFrame.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>-PolarMotion.x(<sp/>)<sp/>),<sp/>0.0,<sp/>std::cos(<sp/>-PolarMotion.x(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::cos(<sp/>-PolarMotion.x(<sp/>)<sp/>),<sp/>0.0,<sp/>-std::sin(<sp/>-PolarMotion.x(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-PolarMotion.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials.push_back(</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::cos(<sp/>xPolarMotionCoefficientIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromBodyFixedToIntermediateInertialFrame.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-PolarMotion.x(<sp/>),<sp/>Eigen::Vector3d::UnitY(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>-PolarMotion.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>-PolarMotion.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>-PolarMotion.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>-PolarMotion.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials.push_back(</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::sin(<sp/>xPolarMotionCoefficientIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromBodyFixedToIntermediateInertialFrame.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-PolarMotion.x(<sp/>),<sp/>Eigen::Vector3d::UnitY(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>-PolarMotion.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>-PolarMotion.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>-PolarMotion.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>-PolarMotion.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotationMatrixPartials;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtPolarMotionAmplitude(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>ephemerides::PlanetaryOrientationAngleCalculator<sp/>&gt;<sp/>planetaryOrientationCalculator,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;rotationFromMeanOrbitToIcrf,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ephemerisTime<sp/>)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentMeanAnomaly<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanAnomalyAtEpoch(<sp/>)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>planetaryOrientationCalculator-&gt;getBodyMeanMotion(<sp/>)<sp/>*<sp/>ephemerisTime;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>currentAngleCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;updateAndGetRotationAngles(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentPhiAngle<sp/>=<sp/>currentAngleCorrections.z(<sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanPhiAngleDerivative<sp/>=<sp/>planetaryOrientationCalculator-&gt;getcurrentMeanPhiAngleDerivative(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>PolarMotion<sp/>=<sp/>planetaryOrientationCalculator<sp/>-&gt;getPolarMotion(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>rotationrateCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;getRotationRateCorrections();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=<sp/>rotationrateCorrections.begin(<sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>rotationrateCorrections.end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix.push_back(</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-meanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>-std::cos(<sp/>currentPhiAngle<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>),<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>-PolarMotion.x(<sp/>)<sp/>),<sp/>0.0,<sp/>std::cos(<sp/>-PolarMotion.x(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::cos(<sp/>-PolarMotion.x(<sp/>)<sp/>),<sp/>0.0,<sp/>-std::sin(<sp/>-PolarMotion.x(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-PolarMotion.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix.push_back(</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-meanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>-std::cos(<sp/>currentPhiAngle<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>),<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>-PolarMotion.x(<sp/>)<sp/>),<sp/>0.0,<sp/>std::cos(<sp/>-PolarMotion.x(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::cos(<sp/>-PolarMotion.x(<sp/>)<sp/>),<sp/>0.0,<sp/>-std::sin(<sp/>-PolarMotion.x(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-PolarMotion.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix.push_back(</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-meanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>-std::cos(<sp/>currentPhiAngle<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>),<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-PolarMotion.x(<sp/>),<sp/>Eigen::Vector3d::UnitY(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>-PolarMotion.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>-PolarMotion.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>-PolarMotion.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>-PolarMotion.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix.push_back(</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-meanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>currentMeanAnomaly)<sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>-std::cos(<sp/>currentPhiAngle<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentPhiAngle<sp/>),<sp/>-std::sin(<sp/>currentPhiAngle<sp/>),<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>-PolarMotion.x(<sp/>),<sp/>Eigen::Vector3d::UnitY(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>-PolarMotion.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>-PolarMotion.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>-PolarMotion.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>-PolarMotion.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">Eigen::Matrix3d<sp/>calculatePartialOfRotationMatrixFromLocalFrameWrtCoreFactor(</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>ephemerides::PlanetaryOrientationAngleCalculator<sp/>&gt;<sp/>planetaryOrientationCalculator,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;rotationFromMeanOrbitToIcrf,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>polarMotionRotation,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ephemerisTime<sp/>)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanMotion<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanMotion(<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bodyMeanAnomalyAtEpoch<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanAnomalyAtEpoch(<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>meanMotionDirectNutationCorrections<sp/>=</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getMeanMotionDirectNutationCorrections(<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>&gt;<sp/>meanMotionTimeDependentPhaseNutationCorrections<sp/>=</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getMeanMotionTimeDependentPhaseNutationCorrections(<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>&gt;<sp/>phaseAngleCorrectionFunctions<sp/>=</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getphaseAngleCorrectionFunctions(<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coreFactor<sp/>=<sp/>planetaryOrientationCalculator-&gt;getCorefactor(<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freeCoreNutationRate<sp/>=<sp/>planetaryOrientationCalculator-&gt;getFreeCoreNutationRate(<sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angleIAtEpoch<sp/>=<sp/>planetaryOrientationCalculator-&gt;getAngleIAtEpoch(<sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>currentAngleCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;updateAndGetRotationAngles(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>partialsOfRotationMatrix<sp/>=<sp/>Eigen::Matrix3d::Zero(<sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=<sp/>meanMotionDirectNutationCorrections.begin(<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>meanMotionDirectNutationCorrections.end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_m<sp/>=<sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Psi_m<sp/>=<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>coreFactor<sp/>*<sp/>a_m<sp/>/</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.z(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>*<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.z(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Psi_m<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>*<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>-</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)*</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentPhaseAngleCorrection;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>meanMotionTimeDependentPhaseNutationCorrections.size(<sp/>);<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>=<sp/>phaseAngleCorrectionFunctions[<sp/>i<sp/>](<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meanMotionTimeDependentPhaseNutationCorrections[<sp/>i<sp/>].begin(<sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>meanMotionTimeDependentPhaseNutationCorrections[<sp/>i<sp/>].end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_m<sp/>=<sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Psi_m<sp/>=<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>coreFactor<sp/>*<sp/>a_m<sp/>/</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.z(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>*<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.z(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Psi_m<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>*<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>-</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)*</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">Eigen::Matrix3d<sp/>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtCoreFactor(</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>ephemerides::PlanetaryOrientationAngleCalculator<sp/>&gt;<sp/>planetaryOrientationCalculator,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;rotationFromMeanOrbitToIcrf,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>polarMotionRotation,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ephemerisTime<sp/>)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanMotion<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanMotion(<sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bodyMeanAnomalyAtEpoch<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanAnomalyAtEpoch(<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>meanMotionDirectNutationCorrections<sp/>=</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getMeanMotionDirectNutationCorrections(<sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>&gt;<sp/>meanMotionTimeDependentPhaseNutationCorrections<sp/>=</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getMeanMotionTimeDependentPhaseNutationCorrections(<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>&gt;<sp/>phaseAngleCorrectionFunctions<sp/>=</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getphaseAngleCorrectionFunctions(<sp/>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coreFactor<sp/>=<sp/>planetaryOrientationCalculator-&gt;getCorefactor(<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freeCoreNutationRate<sp/>=<sp/>planetaryOrientationCalculator-&gt;getFreeCoreNutationRate(<sp/>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angleIAtEpoch<sp/>=<sp/>planetaryOrientationCalculator-&gt;getAngleIAtEpoch(<sp/>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>currentAngleCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;updateAndGetRotationAngles(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentMeanPhiAngleDerivative<sp/>=<sp/>planetaryOrientationCalculator-&gt;getcurrentMeanPhiAngleDerivative(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>partialsOfRotationMatrix<sp/>=<sp/>Eigen::Matrix3d::Zero(<sp/>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=<sp/>meanMotionDirectNutationCorrections.begin(<sp/>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>meanMotionDirectNutationCorrections.end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_m<sp/>=<sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Psi_m<sp/>=<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>coreFactor<sp/>*<sp/>a_m<sp/>/</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>*<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Psi_m<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>*<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>-</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)*</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentPhaseAngleCorrection;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>meanMotionTimeDependentPhaseNutationCorrections.size(<sp/>);<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>=<sp/>phaseAngleCorrectionFunctions[<sp/>i<sp/>](<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meanMotionTimeDependentPhaseNutationCorrections[<sp/>i<sp/>].begin(<sp/>);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>meanMotionTimeDependentPhaseNutationCorrections[<sp/>i<sp/>].end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_m<sp/>=<sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Psi_m<sp/>=<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>coreFactor<sp/>*<sp/>a_m<sp/>/</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>/</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>*<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Psi_m<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>*<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>-</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)*</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_m<sp/>/<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">Eigen::Matrix3d<sp/>calculatePartialOfRotationMatrixFromLocalFrameWrtFreeCoreNutationRate(</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>ephemerides::PlanetaryOrientationAngleCalculator<sp/>&gt;<sp/>planetaryOrientationCalculator,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;rotationFromMeanOrbitToIcrf,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>polarMotionRotation,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ephemerisTime<sp/>)</highlight></codeline>
<codeline lineno="718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanMotion<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanMotion(<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bodyMeanAnomalyAtEpoch<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanAnomalyAtEpoch(<sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>meanMotionDirectNutationCorrections<sp/>=</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getMeanMotionDirectNutationCorrections(<sp/>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>&gt;<sp/>meanMotionTimeDependentPhaseNutationCorrections<sp/>=</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getMeanMotionTimeDependentPhaseNutationCorrections(<sp/>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>&gt;<sp/>phaseAngleCorrectionFunctions<sp/>=</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getphaseAngleCorrectionFunctions(<sp/>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coreFactor<sp/>=<sp/>planetaryOrientationCalculator-&gt;getCorefactor(<sp/>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freeCoreNutationRate<sp/>=<sp/>planetaryOrientationCalculator-&gt;getFreeCoreNutationRate(<sp/>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angleIAtEpoch<sp/>=<sp/>planetaryOrientationCalculator-&gt;getAngleIAtEpoch(<sp/>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>currentAngleCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;updateAndGetRotationAngles(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>partialsOfRotationMatrix<sp/>=<sp/>Eigen::Matrix3d::Zero(<sp/>);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=<sp/>meanMotionDirectNutationCorrections.begin(<sp/>);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>meanMotionDirectNutationCorrections.end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_m<sp/>=<sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Psi_m<sp/>=<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>coreFactor<sp/>*<sp/>a_m<sp/>/</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>+<sp/>2<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/><sp/>)<sp/>/</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.z(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>2<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>+</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>)<sp/>/<sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.z(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Psi_m<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>2<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>+</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>)<sp/>/<sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>-</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)*</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>+<sp/>2<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/><sp/>)<sp/>/</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentPhaseAngleCorrection;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>meanMotionTimeDependentPhaseNutationCorrections.size(<sp/>);<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>=<sp/>phaseAngleCorrectionFunctions[<sp/>i<sp/>](<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meanMotionTimeDependentPhaseNutationCorrections[<sp/>i<sp/>].begin(<sp/>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>meanMotionTimeDependentPhaseNutationCorrections[<sp/>i<sp/>].end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_m<sp/>=<sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Psi_m<sp/>=<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>coreFactor<sp/>*<sp/>a_m<sp/>/</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>correctionIterator-&gt;second.first<sp/>*</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>+<sp/>2<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/><sp/>)<sp/>/</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.z(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>2<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>+</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>)<sp/>/<sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.z(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Psi_m<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>2<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>+</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>)<sp/>/<sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>-</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>+<sp/>2<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/><sp/>)<sp/>/</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal">Eigen::Matrix3d<sp/>calculatePartialOfRotationMatrixFromLocalFrameDerivativeWrtFreeCoreNutationRate(</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>ephemerides::PlanetaryOrientationAngleCalculator<sp/>&gt;<sp/>planetaryOrientationCalculator,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;rotationFromMeanOrbitToIcrf,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond&amp;<sp/>polarMotionRotation,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ephemerisTime<sp/>)</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanMotion<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanMotion(<sp/>);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bodyMeanAnomalyAtEpoch<sp/>=<sp/>planetaryOrientationCalculator-&gt;getBodyMeanAnomalyAtEpoch(<sp/>);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>meanMotionDirectNutationCorrections<sp/>=</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getMeanMotionDirectNutationCorrections(<sp/>);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::map&lt;<sp/>double,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>&gt;<sp/>meanMotionTimeDependentPhaseNutationCorrections<sp/>=</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getMeanMotionTimeDependentPhaseNutationCorrections(<sp/>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>&gt;<sp/>phaseAngleCorrectionFunctions<sp/>=</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planetaryOrientationCalculator-&gt;getphaseAngleCorrectionFunctions(<sp/>);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coreFactor<sp/>=<sp/>planetaryOrientationCalculator-&gt;getCorefactor(<sp/>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freeCoreNutationRate<sp/>=<sp/>planetaryOrientationCalculator-&gt;getFreeCoreNutationRate(<sp/>);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angleIAtEpoch<sp/>=<sp/>planetaryOrientationCalculator-&gt;getAngleIAtEpoch(<sp/>);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>currentAngleCorrections<sp/>=<sp/>planetaryOrientationCalculator-&gt;updateAndGetRotationAngles(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentMeanPhiAngleDerivative<sp/>=<sp/>planetaryOrientationCalculator-&gt;getcurrentMeanPhiAngleDerivative(<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>partialsOfRotationMatrix<sp/>=<sp/>Eigen::Matrix3d::Zero(<sp/>);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=<sp/>meanMotionDirectNutationCorrections.begin(<sp/>);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>meanMotionDirectNutationCorrections.end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_m<sp/>=<sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Psi_m<sp/>=<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>coreFactor<sp/>*<sp/>a_m<sp/>/</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>+<sp/>2<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/><sp/>)<sp/>/</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>2<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>+</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>)<sp/>/<sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Psi_m<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>2<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>+</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>)<sp/>/<sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>-</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>)*</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>+<sp/>2<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/><sp/>)<sp/>/</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentPhaseAngleCorrection;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>meanMotionTimeDependentPhaseNutationCorrections.size(<sp/>);<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>=<sp/>phaseAngleCorrectionFunctions[<sp/>i<sp/>](<sp/>ephemerisTime<sp/>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::pair&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;::iterator<sp/>correctionIterator<sp/>=</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meanMotionTimeDependentPhaseNutationCorrections[<sp/>i<sp/>].begin(<sp/>);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator<sp/>!=<sp/>meanMotionTimeDependentPhaseNutationCorrections[<sp/>i<sp/>].end(<sp/>);<sp/>correctionIterator++<sp/>)</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_m<sp/>=<sp/>correctionIterator-&gt;first<sp/>*<sp/>meanMotion;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Psi_m<sp/>=<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>coreFactor<sp/>*<sp/>a_m<sp/>/</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>-<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/>+<sp/>freeCoreNutationRate<sp/>*</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.first<sp/>/<sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>+<sp/>2<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/><sp/>)<sp/>/</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.x(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>2<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>+</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>)<sp/>/<sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialsOfRotationMatrix<sp/>+=</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMeanPhiAngleDerivative<sp/>*</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Psi_m<sp/>*<sp/>std::sin(<sp/>correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>2<sp/>*<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>+</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correctionIterator-&gt;second.second<sp/>)<sp/>/<sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>-</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(correctionIterator-&gt;first<sp/>*<sp/>(<sp/>meanMotion<sp/>*<sp/>ephemerisTime<sp/>+<sp/>bodyMeanAnomalyAtEpoch<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPhaseAngleCorrection<sp/>)*</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coreFactor<sp/>*<sp/>a_m<sp/>*<sp/>(<sp/>correctionIterator-&gt;second.first<sp/>*<sp/>(<sp/>a_m<sp/>*<sp/>a_m<sp/>+<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sin(<sp/>angleIAtEpoch<sp/>)<sp/>+<sp/>2<sp/>*<sp/>freeCoreNutationRate<sp/>*<sp/>a_m<sp/>*<sp/>correctionIterator-&gt;second.second<sp/><sp/>)<sp/>/</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>freeCoreNutationRate<sp/>*<sp/>freeCoreNutationRate<sp/>-<sp/>a_m<sp/>*<sp/>a_m<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cos(<sp/>currentAngleCorrections.y(<sp/>)<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationFromMeanOrbitToIcrf.toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.x(<sp/>),<sp/>Eigen::Vector3d::UnitZ(<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::AngleAxisd(<sp/>currentAngleCorrections.y(<sp/>),<sp/>Eigen::Vector3d::UnitX(<sp/>)<sp/>)<sp/>).toRotationMatrix(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d(<sp/>)<sp/>&lt;&lt;<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-std::sin(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>-std::cos(<sp/>currentAngleCorrections.z(<sp/>)<sp/>),<sp/>0.0,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>).finished(<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarMotionRotation.toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partialsOfRotationMatrix;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>Eigen::Dynamic<sp/>&gt;<sp/><ref refid="classtudat_1_1observation__partials_1_1RotationMatrixPartial_1ac71e83a0bce8b3b19b687d050eabb1a9" kindref="member">RotationMatrixPartial::calculatePartialOfInertialPositionWrtParameter</ref>(</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>vectorInLocalFrame<sp/>)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>rotationMatrixPartials<sp/>=<sp/><ref refid="classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a758db711ec18f3efbaa759488e45daf1" kindref="member">calculatePartialOfRotationMatrixToBaseFrameWrParameter</ref>(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>Eigen::Dynamic<sp/>&gt;<sp/>rotatedVectorPartial<sp/>=<sp/>Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>Eigen::Dynamic<sp/>&gt;::Zero(</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>rotationMatrixPartials.size(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rotationMatrixPartials.size(<sp/>);<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotatedVectorPartial.block(<sp/>0,<sp/>i,<sp/>3,<sp/>1<sp/>)<sp/>=<sp/>rotationMatrixPartials[<sp/>i<sp/>]<sp/>*<sp/>vectorInLocalFrame;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotatedVectorPartial;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>Eigen::Dynamic<sp/>&gt;<sp/><ref refid="classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a3cda8d4ab37d7bab0a8d20a9dd67a298" kindref="member">RotationMatrixPartial::calculatePartialOfInertialVelocityWrtParameter</ref>(</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>vectorInLocalFrame<sp/>)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>rotationModel_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>when<sp/>caling<sp/>RotationMatrixPartial::calculatePartialOfInertialVelocityWrtParameter,<sp/>rotation<sp/>model<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>rotation<sp/>matrix<sp/>(derivative)<sp/>partials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>rotationMatrixPartials<sp/>=</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a758db711ec18f3efbaa759488e45daf1" kindref="member">calculatePartialOfRotationMatrixToBaseFrameWrParameter</ref>(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>rotationMatrixDerivativePartials<sp/>=</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1observation__partials_1_1RotationMatrixPartial_1a21af519e8a78ffd2978586549f3569c4" kindref="member">calculatePartialOfRotationMatrixDerivativeToBaseFrameWrParameter</ref>(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>current<sp/>rotation<sp/>matrix<sp/>and<sp/>derivative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>currentRotationToBaseFrame<sp/>=<sp/>rotationModel_-&gt;getRotationToBaseFrame(<sp/>time<sp/>).toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>currentRotationToTargetFrameDerivative<sp/>=<sp/>rotationModel_-&gt;getDerivativeOfRotationToTargetFrame(</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>Eigen::Dynamic<sp/>&gt;<sp/>rotatedVectorPartial<sp/>=<sp/>Eigen::Matrix&lt;<sp/>double,<sp/>3,<sp/>Eigen::Dynamic<sp/>&gt;::Zero(</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>rotationMatrixPartials.size(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>inertial<sp/>velocity<sp/>partial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rotationMatrixPartials.size(<sp/>);<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotatedVectorPartial.block(<sp/>0,<sp/>i,<sp/>3,<sp/>1<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-(<sp/>rotationMatrixPartials.at(<sp/>i<sp/>)<sp/>*<sp/>currentRotationToTargetFrameDerivative<sp/>*<sp/>currentRotationToBaseFrame<sp/>+</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentRotationToBaseFrame<sp/>*<sp/>rotationMatrixDerivativePartials.at(<sp/>i<sp/>).transpose(<sp/>)<sp/>*<sp/>currentRotationToBaseFrame<sp/>+</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentRotationToBaseFrame<sp/>*<sp/>currentRotationToTargetFrameDerivative<sp/>*<sp/>rotationMatrixPartials.at(<sp/>i<sp/>)<sp/>)<sp/>*<sp/>vectorInLocalFrame;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotatedVectorPartial;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal">std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/><ref refid="classtudat_1_1observation__partials_1_1SynchronousRotationMatrixPartialWrtTranslationalState_1a2684c352946321f8e0f672a1fafab9ed" kindref="member">SynchronousRotationMatrixPartialWrtTranslationalState::</ref></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><ref refid="classtudat_1_1observation__partials_1_1SynchronousRotationMatrixPartialWrtTranslationalState_1a2684c352946321f8e0f672a1fafab9ed" kindref="member">calculatePartialOfRotationMatrixToBaseFrameWrParameter</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>state/rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>currentRotationMatrix<sp/>=</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synchronousRotationaModel_-&gt;getRotationToBaseFrame(<sp/>time<sp/>).toRotationMatrix(<sp/>);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector6d<sp/>currentState<sp/>=</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synchronousRotationaModel_-&gt;getCurrentRelativeState(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>positionVector<sp/>=<sp/>currentState.segment(<sp/>0,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>velocityVector<sp/>=<sp/>currentState.segment(<sp/>3,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>positionNorm<sp/>=<sp/>positionVector.norm(<sp/>);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>r<sp/>and<sp/>w<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>rVector<sp/>=<sp/>-currentRotationMatrix.block(<sp/>0,<sp/>0,<sp/>3,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>wVector<sp/>=<sp/>currentRotationMatrix.block(<sp/>0,<sp/>2,<sp/>3,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>unnormalizedWVector<sp/>=<sp/>positionVector.cross(<sp/>velocityVector<sp/>);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unnormalizedWVectorNorm<sp/>=<sp/>unnormalizedWVector.norm(<sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>r<sp/>vector<sp/>partials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>rVectorDerivativeWrtPosition<sp/>=</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d::Identity(<sp/>)<sp/>/<sp/>positionNorm<sp/>-<sp/>positionVector<sp/>*<sp/>positionVector.transpose(<sp/>)<sp/>/<sp/>(</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positionNorm<sp/>*<sp/>positionNorm<sp/>*<sp/>positionNorm<sp/>);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>partials<sp/>for<sp/>unnormalized<sp/>w<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>unnormalizedWVectorDerivativeWrtPosition<sp/>=</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-linear_algebra::getCrossProductMatrix(<sp/>velocityVector<sp/>);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>unnormalizedWVectorDerivativeWrtVelocity<sp/>=</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear_algebra::getCrossProductMatrix(<sp/>positionVector<sp/>);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>wPartialScalingTerm<sp/>=</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Matrix3d::Identity(<sp/>)<sp/>/<sp/>unnormalizedWVectorNorm<sp/>-</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unnormalizedWVector<sp/>*<sp/>unnormalizedWVector.transpose(<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>unnormalizedWVectorNorm<sp/>*<sp/>unnormalizedWVectorNorm<sp/>*<sp/>unnormalizedWVectorNorm<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>w<sp/>vector<sp/>partials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>wVectorDerivativeWrtPosition<sp/>=</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wPartialScalingTerm<sp/>*<sp/>unnormalizedWVectorDerivativeWrtPosition;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>wVectorDerivativeWrtVelocity<sp/>=</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wPartialScalingTerm<sp/>*<sp/>unnormalizedWVectorDerivativeWrtVelocity;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>s<sp/>vector<sp/>partials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>sVectorDerivativeWrtPosition<sp/>=</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear_algebra::getCrossProductMatrix(<sp/>wVector<sp/>)<sp/>*<sp/>rVectorDerivativeWrtPosition<sp/>-</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear_algebra::getCrossProductMatrix(<sp/>rVector<sp/>)<sp/>*<sp/>wVectorDerivativeWrtPosition;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>sVectorDerivativeWrtVelocity<sp/>=</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-linear_algebra::getCrossProductMatrix(<sp/>rVector<sp/>)<sp/>*<sp/>wVectorDerivativeWrtVelocity;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>vector<sp/>of<sp/>partial<sp/>derivatives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Eigen::Matrix3d<sp/>&gt;<sp/>rotationMatrixPartials;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationMatrixPartials.resize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials[<sp/>i<sp/>].block(<sp/>0,<sp/>0,<sp/>3,<sp/>1<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-rVectorDerivativeWrtPosition.block(<sp/>0,<sp/>i,<sp/>3,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials[<sp/>i<sp/>].block(<sp/>0,<sp/>1,<sp/>3,<sp/>1<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-sVectorDerivativeWrtPosition.block(<sp/>0,<sp/>i,<sp/>3,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials[<sp/>i<sp/>].block(<sp/>0,<sp/>2,<sp/>3,<sp/>1<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wVectorDerivativeWrtPosition.block(<sp/>0,<sp/>i,<sp/>3,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials[<sp/>i<sp/>+<sp/>3<sp/>].block(<sp/>0,<sp/>0,<sp/>3,<sp/>1<sp/>).setZero(<sp/>);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials[<sp/>i<sp/>+<sp/>3<sp/>].block(<sp/>0,<sp/>1,<sp/>3,<sp/>1<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-sVectorDerivativeWrtVelocity.block(<sp/>0,<sp/>i,<sp/>3,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationMatrixPartials[<sp/>i<sp/>+<sp/>3<sp/>].block(<sp/>0,<sp/>2,<sp/>3,<sp/>1<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wVectorDerivativeWrtVelocity.block(<sp/>0,<sp/>i,<sp/>3,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotationMatrixPartials;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/orbit_determination/observation_partials/rotationMatrixPartial.cpp"/>
  </compounddef>
</doxygen>
