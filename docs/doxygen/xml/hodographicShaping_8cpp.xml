<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="hodographicShaping_8cpp" kind="file" language="C++">
    <compoundname>hodographicShaping.cpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes refid="timeType_8h" local="yes">tudat/basics/timeType.h</includes>
    <includes refid="coordinateConversions_8h" local="yes">tudat/math/basic/coordinateConversions.h</includes>
    <includes refid="hodographicShaping_8h" local="yes">tudat/astro/low_thrust/shape_based/hodographicShaping.h</includes>
    <incdepgraph>
      <node id="46">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="43">
        <label>tudat/config.hpp</label>
      </node>
      <node id="34">
        <label>tudat/io/streamFilters.h</label>
        <link refid="streamFilters_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>system_error</label>
      </node>
      <node id="31">
        <label>iomanip</label>
      </node>
      <node id="25">
        <label>functional</label>
      </node>
      <node id="14">
        <label>limits</label>
      </node>
      <node id="61">
        <label>tudat/math/integrators/bulirschStoerVariableStepsizeIntegrator.h</label>
        <link refid="bulirschStoerVariableStepsizeIntegrator_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>boost/iostreams/device/back_inserter.hpp</label>
      </node>
      <node id="23">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="16">
        <label>tudat/astro/low_thrust/shape_based/shapeBasedMethod.h</label>
        <link refid="shapeBasedMethod_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>tudat/math/integrators/rungeKutta4Integrator.h</label>
        <link refid="rungeKutta4Integrator_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>boost/iostreams/copy.hpp</label>
      </node>
      <node id="40">
        <label>stdlib.h</label>
      </node>
      <node id="57">
        <label>tudat/basics/tudatTypeTraits.h</label>
        <link refid="tudatTypeTraits_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="53">
        <label>stdexcept</label>
      </node>
      <node id="6">
        <label>Eigen/Core</label>
      </node>
      <node id="60">
        <label>tudat/math/integrators/createNumericalIntegrator.h</label>
        <link refid="createNumericalIntegrator_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>string</label>
      </node>
      <node id="29">
        <label>tudat/io/basicInputOutput.h</label>
        <link refid="basicInputOutput_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>map</label>
      </node>
      <node id="47">
        <label>boost/algorithm/string/trim.hpp</label>
      </node>
      <node id="37">
        <label>boost/iostreams/stream_buffer.hpp</label>
      </node>
      <node id="71">
        <label>tudat/math/integrators/rungeKuttaVariableStepSizeIntegrator.h</label>
        <link refid="rungeKuttaVariableStepSizeIntegrator_8h_source"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>tudat/math/quadrature/gaussianQuadrature.h</label>
        <link refid="gaussianQuadrature_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>boost/algorithm/string/trim_all.hpp</label>
      </node>
      <node id="54">
        <label>tudat/math/quadrature/trapezoidQuadrature.h</label>
        <link refid="trapezoidQuadrature_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>tudat/math/basic/basicMathematicsFunctions.h</label>
        <link refid="basicMathematicsFunctions_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/low_thrust/shape_based/hodographicShaping.cpp</label>
        <link refid="hodographicShaping_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>tudat/math/quadrature/createNumericalQuadrature.h</label>
        <link refid="createNumericalQuadrature_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>boost/random/mersenne_twister.hpp</label>
      </node>
      <node id="42">
        <label>tudat/resource/resource.h</label>
      </node>
      <node id="17">
        <label>Eigen/Dense</label>
      </node>
      <node id="49">
        <label>boost/iostreams/device/file.hpp</label>
      </node>
      <node id="55">
        <label>tudat/basics/identityElements.h</label>
        <link refid="identityElements_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>tudat/math/integrators/numericalIntegrator.h</label>
        <link refid="numericalIntegrator_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>tudat/math/quadrature/numericalQuadrature.h</label>
        <link refid="numericalQuadrature_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>tudat/astro/low_thrust/shape_based/baseFunctionsHodographicShaping.h</label>
        <link refid="baseFunctionsHodographicShaping_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>tudat/astro/low_thrust/shape_based/compositeFunctionHodographicShaping.h</label>
        <link refid="compositeFunctionHodographicShaping_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>boost/assign/std/vector.hpp</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="35">
        <label>boost/iostreams/filter/line.hpp</label>
      </node>
      <node id="39">
        <label>tudat/paths.hpp</label>
        <link refid="paths_8hpp_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="67">
        <label>tudat/math/integrators/euler.h</label>
        <link refid="euler_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>tudat/basics/utilityMacros.h</label>
        <link refid="utilityMacros_8h_source"/>
      </node>
      <node id="45">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>tudat/basics/timeType.h</label>
        <link refid="timeType_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tudat/basics/utilities.h</label>
        <link refid="basics_2utilities_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>tudat/basics/basicTypedefs.h</label>
        <link refid="basicTypedefs_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>tudat/math/basic/coordinateConversions.h</label>
        <link refid="coordinateConversions_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>tudat/math/basic/mathematicalConstants.h</label>
        <link refid="mathematicalConstants_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>deque</label>
      </node>
      <node id="44">
        <label>tudat/io/mapTextFileReader.h</label>
        <link refid="mapTextFileReader_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>tudat/astro/low_thrust/shape_based/hodographicShaping.h</label>
        <link refid="hodographicShaping_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>boost/bind.hpp</label>
      </node>
      <node id="68">
        <label>tudat/math/integrators/adamsBashforthMoultonIntegrator.h</label>
        <link refid="adamsBashforthMoultonIntegrator_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>boost/regex.hpp</label>
      </node>
      <node id="19">
        <label>tudat/astro/low_thrust/lowThrustLeg.h</label>
        <link refid="lowThrustLeg_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>tudat/io/matrixTextFileReader.h</label>
        <link refid="matrixTextFileReader_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>type_traits</label>
      </node>
      <node id="21">
        <label>boost/make_shared.hpp</label>
      </node>
      <node id="70">
        <label>tudat/math/integrators/rungeKuttaCoefficients.h</label>
        <link refid="rungeKuttaCoefficients_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>boost/multi_array.hpp</label>
      </node>
      <node id="51">
        <label>boost/iostreams/filtering_stream.hpp</label>
      </node>
      <node id="13">
        <label>complex</label>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="66">
        <label>tudat/math/integrators/reinitializableNumericalIntegrator.h</label>
        <link refid="reinitializableNumericalIntegrator_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetudat">tudat</innernamespace>
    <innernamespace refid="namespacetudat_1_1shape__based__methods">tudat::shape_based_methods</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2010-2019,<sp/>Delft<sp/>University<sp/>of<sp/>Technology</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>All<sp/>rigths<sp/>reserved</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Tudat.<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>exclusively</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Modified<sp/>BSD<sp/>license.<sp/>You<sp/>should<sp/>have<sp/>received</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a<sp/>copy<sp/>of<sp/>the<sp/>license<sp/>with<sp/>this<sp/>file.<sp/>If<sp/>not,<sp/>please<sp/>or<sp/>visit:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>http://tudat.tudelft.nl/LICENSE.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/basics/timeType.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/math/basic/coordinateConversions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/astro/low_thrust/shape_based/hodographicShaping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetudat" kindref="compound">tudat</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">shape_based_methods</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="classtudat_1_1shape__based__methods_1_1HodographicShaping_1a36698c9624ae805e6199cf281f1c8bc8" kindref="member">HodographicShaping::HodographicShaping</ref>(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector6d&amp;<sp/>initialState,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector6d&amp;<sp/>finalState,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeOfFlight,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>centralBodyGravitationalParameter,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfRevolutions,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::shared_ptr&lt;<sp/>shape_based_methods::BaseFunctionHodographicShaping<sp/>&gt;<sp/>&gt;&amp;<sp/>radialVelocityFunctionComponents,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::shared_ptr&lt;<sp/>shape_based_methods::BaseFunctionHodographicShaping<sp/>&gt;<sp/>&gt;&amp;<sp/>normalVelocityFunctionComponents,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::shared_ptr&lt;<sp/>shape_based_methods::BaseFunctionHodographicShaping<sp/>&gt;<sp/>&gt;&amp;<sp/>axialVelocityFunctionComponents,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/>freeCoefficientsRadialVelocityFunction,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/>freeCoefficientsNormalVelocityFunction,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/>freeCoefficientsAxialVelocityFunction<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeBasedMethod(<sp/>initialState,<sp/>finalState,<sp/>timeOfFlight<sp/>),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>centralBodyGravitationalParameter_(<sp/>centralBodyGravitationalParameter<sp/>),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>numberOfRevolutions_(<sp/>numberOfRevolutions<sp/>),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>freeCoefficientsRadialVelocityFunction_(<sp/>freeCoefficientsRadialVelocityFunction<sp/>),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>freeCoefficientsNormalVelocityFunction_(<sp/>freeCoefficientsNormalVelocityFunction<sp/>),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>freeCoefficientsAxialVelocityFunction_(<sp/>freeCoefficientsAxialVelocityFunction<sp/>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>composite<sp/>function<sp/>in<sp/>radial<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>radialVelocityCoefficients;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>radialVelocityCoefficients.resize(<sp/>3<sp/>+<sp/>freeCoefficientsRadialVelocityFunction_.size()<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>radialVelocityCoefficients.segment(<sp/>0,<sp/>3<sp/>)<sp/>=<sp/>Eigen::Vector3d::Zero();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>radialVelocityCoefficients.segment(<sp/>3,<sp/>freeCoefficientsRadialVelocityFunction_.size()<sp/>)<sp/>=<sp/>freeCoefficientsRadialVelocityFunction_;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>radialVelocityFunction_<sp/>=<sp/>std::make_shared&lt;<sp/>shape_based_methods::CompositeFunctionHodographicShaping<sp/>&gt;(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialVelocityFunctionComponents,<sp/>radialVelocityCoefficients<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>composite<sp/>function<sp/>in<sp/>normal<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>normalVelocityCoefficients;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>normalVelocityCoefficients.resize(<sp/>3<sp/>+<sp/>freeCoefficientsNormalVelocityFunction_.size()<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>normalVelocityCoefficients.segment(<sp/>0,<sp/>3<sp/>)<sp/>=<sp/>Eigen::Vector3d::Zero();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>normalVelocityCoefficients.segment(<sp/>3,<sp/>freeCoefficientsNormalVelocityFunction_.size()<sp/>)<sp/>=<sp/>freeCoefficientsNormalVelocityFunction_;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>normalVelocityFunction_<sp/>=<sp/>std::make_shared&lt;<sp/>shape_based_methods::CompositeFunctionHodographicShaping<sp/>&gt;(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalVelocityFunctionComponents,<sp/>normalVelocityCoefficients<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>composite<sp/>function<sp/>in<sp/>axial<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>axialVelocityCoefficients;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>axialVelocityCoefficients.resize(<sp/>3<sp/>+<sp/>freeCoefficientsAxialVelocityFunction_.size()<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>axialVelocityCoefficients.segment(<sp/>0,<sp/>3<sp/>)<sp/>=<sp/>Eigen::Vector3d::Zero();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>axialVelocityCoefficients.segment(<sp/>3,<sp/>freeCoefficientsAxialVelocityFunction_.size()<sp/>)<sp/>=<sp/>freeCoefficientsAxialVelocityFunction_;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>axialVelocityFunction_<sp/>=<sp/>std::make_shared&lt;<sp/>shape_based_methods::CompositeFunctionHodographicShaping<sp/>&gt;(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axialVelocityFunctionComponents,<sp/>axialVelocityCoefficients<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>initial<sp/>cylindrical<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector6d<sp/>initialCylindricalState<sp/>=<sp/>coordinate_conversions::convertCartesianToCylindricalState(<sp/>stateAtDeparture_<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>final<sp/>cylindrical<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector6d<sp/>finalCylindricalState<sp/>=<sp/>coordinate_conversions::convertCartesianToCylindricalState(<sp/>stateAtArrival_<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>number<sp/>of<sp/>free<sp/>coefficients<sp/>for<sp/>each<sp/>velocity<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>numberOfFreeCoefficientsRadialVelocityFunction_<sp/>=<sp/>radialVelocityFunction_-&gt;getNumberOfCompositeFunctionComponents()<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>numberOfFreeCoefficientsNormalVelocityFunction_<sp/>=<sp/>normalVelocityFunction_-&gt;getNumberOfCompositeFunctionComponents()<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>numberOfFreeCoefficientsAxialVelocityFunction<sp/>=<sp/>axialVelocityFunction_-&gt;getNumberOfCompositeFunctionComponents()<sp/>-<sp/>3;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numberOfFreeCoefficientsRadialVelocityFunction_<sp/>&lt;<sp/>0<sp/>||<sp/>numberOfFreeCoefficientsNormalVelocityFunction_<sp/>&lt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfFreeCoefficientsAxialVelocityFunction<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>base<sp/>functions<sp/>in<sp/>one<sp/>of<sp/>the<sp/>velocity<sp/>functions<sp/>is<sp/>smaller<sp/>than<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>number<sp/>of<sp/>corresponding<sp/>boundary<sp/>conditions.<sp/>The<sp/>boundary<sp/>conditions<sp/>cannot<sp/>be<sp/>set!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>numerical<sp/>quadrature<sp/>settings,<sp/>required<sp/>to<sp/>compute<sp/>the<sp/>current<sp/>polar<sp/>angle<sp/>and<sp/>final<sp/>deltaV.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quadratureSettings_<sp/>=<sp/>std::make_shared&lt;<sp/>numerical_quadrature::GaussianQuadratureSettings&lt;<sp/>double<sp/>&gt;<sp/>&gt;(<sp/>0.0,<sp/>64<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>boundary<sp/>conditions<sp/>in<sp/>the<sp/>radial<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialBoundaryConditions_.push_back(<sp/>initialCylindricalState[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialBoundaryConditions_.push_back(<sp/>finalCylindricalState[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialBoundaryConditions_.push_back(<sp/>initialCylindricalState[<sp/>3<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialBoundaryConditions_.push_back(<sp/>finalCylindricalState[<sp/>3<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>boundary<sp/>conditions<sp/>in<sp/>the<sp/>normal<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalBoundaryConditions_.push_back(<sp/>initialCylindricalState[<sp/>4<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalBoundaryConditions_.push_back(<sp/>finalCylindricalState[<sp/>4<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Final<sp/>value<sp/>polar<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalBoundaryConditions_.push_back(</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfRevolutions_<sp/>*<sp/>2.0<sp/>*<sp/>mathematical_constants::PI</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>basic_mathematics::computeModulo(<sp/>(<sp/>finalCylindricalState[<sp/>1<sp/>]<sp/>-<sp/>initialCylindricalState[<sp/>1<sp/>]<sp/>),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0<sp/>*<sp/>mathematical_constants::PI<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>boundary<sp/>conditions<sp/>in<sp/>the<sp/>axial<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axialBoundaryConditions_.push_back(<sp/>initialCylindricalState[<sp/>2<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axialBoundaryConditions_.push_back(<sp/>finalCylindricalState[<sp/>2<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axialBoundaryConditions_.push_back(<sp/>initialCylindricalState[<sp/>5<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axialBoundaryConditions_.push_back(<sp/>finalCylindricalState[<sp/>5<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>inverse<sp/>of<sp/>matrices<sp/>containing<sp/>boundary<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverseMatrixRadialBoundaryValues_<sp/>=<sp/>computeInverseMatrixRadialOrAxialBoundaries(<sp/>radialVelocityFunction_<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverseMatrixNormalBoundaryValues_<sp/>=<sp/>computeInverseMatrixNormalBoundaries(<sp/>normalVelocityFunction_<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverseAxialMatrixBoundaryValues_<sp/>=<sp/>computeInverseMatrixRadialOrAxialBoundaries(<sp/>axialVelocityFunction_<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Satisfy<sp/>boundary<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>satisfyRadialBoundaryConditions(<sp/>freeCoefficientsRadialVelocityFunction_<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>satisfyNormalBoundaryConditions(<sp/>freeCoefficientsNormalVelocityFunction_<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>satisfyAxialBoundaryConditions(<sp/>freeCoefficientsAxialVelocityFunction_<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">Eigen::Matrix3d<sp/>HodographicShaping::computeInverseMatrixRadialOrAxialBoundaries(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>CompositeFunctionHodographicShaping<sp/>&gt;<sp/>velocityFunction<sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>matrixBoundaryValues,<sp/>inverseMatrixBoundaryValues;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixBoundaryValues<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionIntegralCurrentTime(<sp/>0,<sp/>timeOfFlight_<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>velocityFunction-&gt;getComponentFunctionIntegralCurrentTime(<sp/>0,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionIntegralCurrentTime(<sp/>1,<sp/>timeOfFlight_<sp/>)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>velocityFunction-&gt;getComponentFunctionIntegralCurrentTime(<sp/>1,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionIntegralCurrentTime(<sp/>2,<sp/>timeOfFlight_<sp/>)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>velocityFunction-&gt;getComponentFunctionIntegralCurrentTime(<sp/>2,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>0,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>1,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>0,<sp/>timeOfFlight_<sp/>),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>1,<sp/>timeOfFlight_<sp/>),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>inverse<sp/>of<sp/>boundary-value<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseMatrixBoundaryValues<sp/>=<sp/>matrixBoundaryValues.inverse();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>inverse<sp/>of<sp/>boundary-value<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inverseMatrixBoundaryValues;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">Eigen::Matrix2d<sp/>HodographicShaping::computeInverseMatrixNormalBoundaries(</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>CompositeFunctionHodographicShaping<sp/>&gt;<sp/>velocityFunction<sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix2d<sp/>matrixBoundaryValues,<sp/>inverseMatrixBoundaryValues;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixBoundaryValues<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>0,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>1,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>0,<sp/>timeOfFlight_<sp/>),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityFunction-&gt;getComponentFunctionCurrentValue(<sp/>1,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>inverse<sp/>of<sp/>boundary-value<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseMatrixBoundaryValues<sp/>=<sp/>matrixBoundaryValues.inverse();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>inverse<sp/>of<sp/>boundary-value<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inverseMatrixBoundaryValues;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HodographicShaping::satisfyRadialBoundaryConditions(<sp/>Eigen::VectorXd<sp/>freeCoefficients<sp/>){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>containing<sp/>boundary<sp/>conditions<sp/>on<sp/>radial<sp/>distance<sp/>and<sp/>initial<sp/>and<sp/>final<sp/>radial<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>vectorBoundaryConditionsRadial;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsRadial[<sp/>0<sp/>]<sp/>=<sp/>radialBoundaryConditions_[<sp/>1<sp/>]<sp/>-<sp/>radialBoundaryConditions_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsRadial[<sp/>1<sp/>]<sp/>=<sp/>radialBoundaryConditions_[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsRadial[<sp/>2<sp/>]<sp/>=<sp/>radialBoundaryConditions_[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>boundary<sp/>values<sp/>of<sp/>free<sp/>components<sp/>of<sp/>velocity<sp/>function<sp/>from<sp/>corresponding<sp/>boundary<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numberOfFreeCoefficientsRadialVelocityFunction_<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsRadial[<sp/>0<sp/>]<sp/>-=</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeCoefficients(<sp/>i<sp/>)<sp/>*<sp/>(<sp/>radialVelocityFunction_-&gt;getComponentFunctionIntegralCurrentTime(<sp/>i<sp/>+<sp/>3,<sp/>timeOfFlight_<sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>radialVelocityFunction_-&gt;getComponentFunctionIntegralCurrentTime(<sp/>i<sp/>+<sp/>3,<sp/>0.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsRadial[<sp/>1<sp/>]<sp/>-=<sp/>freeCoefficients(<sp/>i<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i<sp/>+<sp/>3,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsRadial[<sp/>2<sp/>]<sp/>-=<sp/>freeCoefficients(<sp/>i<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i<sp/>+<sp/>3,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>fixed<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>fixedCoefficientsRadial<sp/>=<sp/>inverseMatrixRadialBoundaryValues_<sp/>*<sp/>vectorBoundaryConditionsRadial;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>vector<sp/>containing<sp/>all<sp/>radial<sp/>velocity<sp/>function<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>radialVelocityFunctionCoefficients<sp/>=</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd::Zero(<sp/>fixedCoefficientsRadial.size()<sp/>+<sp/>numberOfFreeCoefficientsRadialVelocityFunction_<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>radial<sp/>velocity<sp/>function<sp/>has<sp/>free<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numberOfFreeCoefficientsRadialVelocityFunction_<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialVelocityFunctionCoefficients<sp/>&lt;&lt;<sp/>fixedCoefficientsRadial;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialVelocityFunctionCoefficients<sp/>&lt;&lt;<sp/>fixedCoefficientsRadial,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeCoefficients.segment(<sp/>0,<sp/>numberOfFreeCoefficientsRadialVelocityFunction_);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>radial<sp/>velocity<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>radialVelocityFunction_-&gt;resetCompositeFunctionCoefficients(<sp/>radialVelocityFunctionCoefficients<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HodographicShaping::satisfyAxialBoundaryConditions(<sp/>Eigen::VectorXd<sp/>freeCoefficients<sp/>){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>containing<sp/>boundary<sp/>conditions<sp/>on<sp/>axial<sp/>distance<sp/>and<sp/>initial<sp/>and<sp/>final<sp/>axial<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>vectorBoundaryConditionsAxial;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsAxial[<sp/>0<sp/>]<sp/>=<sp/>axialBoundaryConditions_[<sp/>1<sp/>]<sp/>-<sp/>axialBoundaryConditions_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsAxial[<sp/>1<sp/>]<sp/>=<sp/>axialBoundaryConditions_[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsAxial[<sp/>2<sp/>]<sp/>=<sp/>axialBoundaryConditions_[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>boundary<sp/>values<sp/>of<sp/>free<sp/>components<sp/>of<sp/>velocity<sp/>function<sp/>from<sp/>corresponding<sp/>boundary<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numberOfFreeCoefficientsAxialVelocityFunction<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsAxial[<sp/>0<sp/>]<sp/>-=<sp/>freeCoefficients(<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>axialVelocityFunction_-&gt;getComponentFunctionIntegralCurrentTime(<sp/>i<sp/>+<sp/>3<sp/>,<sp/>timeOfFlight_<sp/>)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>axialVelocityFunction_-&gt;getComponentFunctionIntegralCurrentTime(<sp/>i<sp/>+<sp/>3,<sp/>0.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsAxial[<sp/>1<sp/>]<sp/>-=<sp/>freeCoefficients(<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>axialVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i<sp/>+<sp/>3,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsAxial[<sp/>2<sp/>]<sp/>-=<sp/>freeCoefficients(<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>axialVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i<sp/>+<sp/>3,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>fixed<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>fixedCoefficientsAxial<sp/>=<sp/>inverseAxialMatrixBoundaryValues_<sp/>*<sp/>vectorBoundaryConditionsAxial;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>vector<sp/>containing<sp/>all<sp/>axial<sp/>velocity<sp/>function<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>axialVelocityFunctionCoefficients<sp/>=</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd::Zero(<sp/>fixedCoefficientsAxial.size()<sp/>+<sp/>numberOfFreeCoefficientsAxialVelocityFunction<sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>axial<sp/>velocity<sp/>function<sp/>has<sp/>free<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numberOfFreeCoefficientsAxialVelocityFunction<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axialVelocityFunctionCoefficients<sp/>&lt;&lt;<sp/>fixedCoefficientsAxial;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axialVelocityFunctionCoefficients<sp/>&lt;&lt;<sp/>fixedCoefficientsAxial,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeCoefficients.segment(<sp/>0,<sp/>numberOfFreeCoefficientsAxialVelocityFunction);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>axial<sp/>velocity<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>axialVelocityFunction_-&gt;resetCompositeFunctionCoefficients(<sp/>axialVelocityFunctionCoefficients<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HodographicShaping::satisfyNormalBoundaryConditions(<sp/>Eigen::VectorXd<sp/>freeCoefficients<sp/>){</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>coefficient<sp/>of<sp/>the<sp/>third<sp/>component<sp/>of<sp/>the<sp/>composite<sp/>function,<sp/>from<sp/>the<sp/>required<sp/>value<sp/>of<sp/>the<sp/>final<sp/>polar<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C3<sp/>=<sp/>computeThirdFixedCoefficientAxialVelocityFromFinalPolarAngle(<sp/>freeCoefficients<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>containing<sp/>boundary<sp/>conditions<sp/>on<sp/>initial<sp/>and<sp/>final<sp/>normal<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>vectorBoundaryConditionsNormal;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal(<sp/>0<sp/>)<sp/>=<sp/>normalBoundaryConditions_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal(<sp/>1<sp/>)<sp/>=<sp/>normalBoundaryConditions_[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>boundary<sp/>values<sp/>of<sp/>velocity<sp/>function<sp/>component<sp/>used<sp/>to<sp/>solve<sp/>for<sp/>final<sp/>polar<sp/>angle<sp/>from<sp/>corresponding<sp/>boundary<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal[<sp/>0<sp/>]<sp/>-=<sp/>C3<sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal[<sp/>1<sp/>]<sp/>-=<sp/>C3<sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>boundary<sp/>values<sp/>of<sp/>free<sp/>velocity<sp/>function<sp/>components<sp/>from<sp/>corresponding<sp/>boundary<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numberOfFreeCoefficientsNormalVelocityFunction_<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal[<sp/>0<sp/>]<sp/>-=<sp/>freeCoefficients[<sp/>i<sp/>]</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i<sp/>+<sp/>3,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal[<sp/>1<sp/>]<sp/>-=<sp/>freeCoefficients[<sp/>i<sp/>]</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i<sp/>+<sp/>3,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>fixed<sp/>coefficients<sp/>by<sp/>satisfying<sp/>the<sp/>boundary<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>fixedCoefficientsNormal<sp/>=<sp/>inverseMatrixNormalBoundaryValues_<sp/>*<sp/>vectorBoundaryConditionsNormal;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>vector<sp/>containing<sp/>all<sp/>normal<sp/>velocity<sp/>function<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>normalVelocityFunctionCoefficients<sp/>=</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd::Zero(<sp/>fixedCoefficientsNormal.size()<sp/>+<sp/>1<sp/>+<sp/>numberOfFreeCoefficientsNormalVelocityFunction_<sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>normal<sp/>velocity<sp/>function<sp/>has<sp/>free<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numberOfFreeCoefficientsNormalVelocityFunction_<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalVelocityFunctionCoefficients<sp/>&lt;&lt;<sp/>fixedCoefficientsNormal,<sp/>C3;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalVelocityFunctionCoefficients<sp/>&lt;&lt;<sp/>fixedCoefficientsNormal,<sp/>C3,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeCoefficients.segment(<sp/>0,<sp/>numberOfFreeCoefficientsNormalVelocityFunction_);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>normal<sp/>velocity<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>normalVelocityFunction_-&gt;resetCompositeFunctionCoefficients(<sp/>normalVelocityFunctionCoefficients<sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>angular<sp/>velocity<sp/>due<sp/>to<sp/>the<sp/>third<sp/>component<sp/>of<sp/>the<sp/>composite<sp/>function<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::computeDerivativePolarAngleDueToThirdComponent(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>matrixK<sp/>)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angularVelocityDueToThirdComponent<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixK(<sp/>0<sp/>)<sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>0,<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>matrixK(<sp/>1<sp/>)<sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>1,<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>timeSinceDeparture<sp/>)<sp/>)<sp/>/</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeCurrentRadialDistance(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>angularVelocityDueToThirdComponent;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>angular<sp/>velocity<sp/>due<sp/>to<sp/>all<sp/>the<sp/>other<sp/>components<sp/>of<sp/>the<sp/>composite<sp/>function,<sp/>once<sp/>combined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::computeDerivativePolarAngleDueToOtherComponents(</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector2d&amp;<sp/>matrixL,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/>freeCoefficients<sp/>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angularVelocityDueToFreeCoefficients<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>numberOfFreeCoefficientsNormalVelocityFunction_<sp/>;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angularVelocityDueToFreeCoefficients<sp/>+=<sp/>freeCoefficients(<sp/>j<sp/>)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>j<sp/>+<sp/>3<sp/>,<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angularVelocityDueToOtherComponents<sp/>=<sp/>(<sp/>matrixL(<sp/>0<sp/>)<sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>0<sp/>,<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>matrixL(<sp/>1<sp/>)<sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>1<sp/>,<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>angularVelocityDueToFreeCoefficients<sp/>)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>computeCurrentRadialDistance(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>angularVelocityDueToOtherComponents;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::computeThirdFixedCoefficientAxialVelocityFromFinalPolarAngle(<sp/>Eigen::VectorXd<sp/>freeCoefficients<sp/>){</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>third<sp/>fixed<sp/>coefficient<sp/>of<sp/>the<sp/>normal<sp/>velocity<sp/>composite<sp/>function,<sp/>so<sp/>that<sp/>the<sp/>condition<sp/>on<sp/>the<sp/>final</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>polar<sp/>angle<sp/>is<sp/>fulfilled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>calculation<sp/>is<sp/>based<sp/>on<sp/>Equation<sp/>(16)<sp/>in<sp/>Gondelach<sp/>D.,<sp/>and<sp/>Noomen<sp/>R.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Hodographic-shaping<sp/>method<sp/>for<sp/>low-thrust<sp/>interplanetary<sp/>trajectory<sp/>design.&quot;<sp/>Journal<sp/>of<sp/>Spacecraft<sp/>and<sp/>Rockets<sp/>52.3<sp/>(2015):<sp/>728-738.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>containing<sp/>boundary<sp/>conditions<sp/>on<sp/>initial<sp/>and<sp/>final<sp/>normal<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>vectorBoundaryConditionsNormal;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal[<sp/>0<sp/>]<sp/>=<sp/>normalBoundaryConditions_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal[<sp/>1<sp/>]<sp/>=<sp/>normalBoundaryConditions_[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>boundary<sp/>values<sp/>of<sp/>free<sp/>velocity<sp/>function<sp/>components<sp/>from<sp/>corresponding<sp/>boundary<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numberOfFreeCoefficientsNormalVelocityFunction_;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal[<sp/>0<sp/>]<sp/>-=<sp/>freeCoefficients[<sp/>i<sp/>]</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i<sp/>+<sp/>3,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorBoundaryConditionsNormal[<sp/>1<sp/>]<sp/>-=<sp/>freeCoefficients[<sp/>i<sp/>]</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i<sp/>+<sp/>3,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>matrix<sp/>L,<sp/>as<sp/>proposed<sp/>in<sp/>...<sp/>(ADD<sp/>PROPER<sp/>REFERENCE<sp/>AND<sp/>EQUATION<sp/>NUMBER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>matrixL;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixL<sp/>=<sp/>inverseMatrixNormalBoundaryValues_<sp/>*<sp/>vectorBoundaryConditionsNormal;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>initialAndFinalValuesThirdComponentFunction(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>normalVelocityFunction_-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>timeOfFlight_<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>matrix<sp/>K,<sp/>as<sp/>proposed<sp/>in<sp/>...<sp/>(ADD<sp/>PROPER<sp/>REFERENCE<sp/>AND<sp/>EQUATION<sp/>NUMBER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>matrixK;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixK<sp/>=<sp/>inverseMatrixNormalBoundaryValues_<sp/>*<sp/>initialAndFinalValuesThirdComponentFunction;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>angular<sp/>velocity<sp/>due<sp/>to<sp/>the<sp/>third<sp/>component<sp/>of<sp/>the<sp/>composite<sp/>function<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>derivativePolarAngleDueToThirdComponent<sp/>=</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(<sp/>&amp;HodographicShaping::computeDerivativePolarAngleDueToThirdComponent,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1,<sp/>matrixK<sp/>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>angular<sp/>velocity<sp/>due<sp/>to<sp/>all<sp/>the<sp/>other<sp/>components<sp/>of<sp/>the<sp/>composite<sp/>function,<sp/>once<sp/>combined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>derivativePolarAngleDueToOtherComponents<sp/><sp/>=</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(<sp/>&amp;HodographicShaping::computeDerivativePolarAngleDueToOtherComponents,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1,<sp/>matrixL,<sp/>freeCoefficients<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>numerical<sp/>quadratures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>numerical_quadrature::NumericalQuadrature&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>integratorPolarAngleDueToThirdComponentTest<sp/>=</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerical_quadrature::createQuadrature(<sp/>derivativePolarAngleDueToThirdComponent,<sp/>quadratureSettings_,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>numerical_quadrature::NumericalQuadrature&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>integratorPolarAngleDueToOtherComponentsTest<sp/>=</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerical_quadrature::createQuadrature(<sp/>derivativePolarAngleDueToOtherComponents,<sp/>quadratureSettings_,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>normalBoundaryConditions_[<sp/>2<sp/>]<sp/>-<sp/>integratorPolarAngleDueToOtherComponentsTest-&gt;getQuadrature()<sp/>)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>integratorPolarAngleDueToThirdComponentTest-&gt;getQuadrature();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">Eigen::Vector3d<sp/>HodographicShaping::computeVelocityVectorInCylindricalCoordinates(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>velocityComponents;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>radial<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>velocityComponents[<sp/>0<sp/>]<sp/>=<sp/><sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionCurrentTime(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>normal<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>velocityComponents[<sp/>1<sp/>]<sp/>=<sp/>normalVelocityFunction_-&gt;evaluateCompositeFunctionCurrentTime(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>axial<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>velocityComponents[<sp/>2<sp/>]<sp/>=<sp/>axialVelocityFunction_-&gt;evaluateCompositeFunctionCurrentTime(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>velocityComponents;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::evaluateDerivativePolarAngleWrtTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>derivative<sp/>of<sp/>the<sp/>polar<sp/>angle<sp/>w.r.t.<sp/>time,<sp/>i.e.<sp/>angular<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normalVelocityFunction_-&gt;evaluateCompositeFunctionCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>0.0<sp/>)<sp/>+<sp/>radialBoundaryConditions_[0]<sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::computeCurrentRadialDistance(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>radial<sp/>distance<sp/>from<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>0.0<sp/>)<sp/>+<sp/>radialBoundaryConditions_[0];</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::computeCurrentPolarAngle(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>polar<sp/>angle,<sp/>ie<sp/>angular<sp/>velocity<sp/>function,<sp/>as<sp/>a<sp/>function<sp/>of<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>derivativeFunctionPolarAngle<sp/>=</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(<sp/>&amp;HodographicShaping::evaluateDerivativePolarAngleWrtTime,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1<sp/>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>numerical<sp/>quadrature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>numerical_quadrature::NumericalQuadrature&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>quadrature<sp/>=</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerical_quadrature::createQuadrature(<sp/>derivativeFunctionPolarAngle,<sp/>quadratureSettings_,<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentPolarAngle<sp/>=<sp/>quadrature-&gt;getQuadrature(<sp/>)<sp/>+<sp/>coordinate_conversions::convertCartesianToCylindricalState(<sp/>stateAtDeparture_<sp/>)[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentPolarAngle;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::computeCurrentAxialDistance(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>axial<sp/>distance<sp/>from<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>axialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>axialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>0.0<sp/>)<sp/>+<sp/>axialBoundaryConditions_[0];</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">Eigen::Vector6d<sp/>HodographicShaping::computeStateVectorInCylindricalCoordinates(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>velocityCylindricalCoordinates<sp/>=<sp/>computeVelocityVectorInCylindricalCoordinates(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector6d<sp/>cylindricalState<sp/>=<sp/>(<sp/>Eigen::Vector6d()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeCurrentRadialDistance(<sp/>timeSinceDeparture<sp/>),</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeCurrentPolarAngle(<sp/>timeSinceDeparture<sp/>),</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeCurrentAxialDistance(<sp/>timeSinceDeparture<sp/>),</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityCylindricalCoordinates[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityCylindricalCoordinates[<sp/>1<sp/>],</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityCylindricalCoordinates[<sp/>2<sp/>]<sp/>).finished();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cylindricalState;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">Eigen::Vector6d<sp/>HodographicShaping::computeCurrentStateVector(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>){</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coordinate_conversions::convertCylindricalToCartesianState(<sp/>computeStateVectorInCylindricalCoordinates(<sp/>timeSinceDeparture<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">Eigen::Vector3d<sp/>HodographicShaping::computeThrustAccelerationInCylindricalCoordinates(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>thrustAccelerationComponents;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>radial<sp/>distance<sp/>from<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance<sp/>=<sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>0.0<sp/>)<sp/>+<sp/>radialBoundaryConditions_[0];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>axial<sp/>distance<sp/>from<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>axialDistance<sp/>=<sp/>axialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>axialVelocityFunction_-&gt;evaluateCompositeFunctionIntegralCurrentTime(<sp/>0.0<sp/>)<sp/>+<sp/>axialBoundaryConditions_[0];</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>distance<sp/>from<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distanceFromCentralBody<sp/>=<sp/>sqrt(<sp/>pow(<sp/>radialDistance,<sp/>2.0<sp/>)<sp/>+<sp/>pow(<sp/>axialDistance,<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Computation<sp/>of<sp/>normal<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normalVelocity<sp/>=<sp/>normalVelocityFunction_-&gt;evaluateCompositeFunctionCurrentTime(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>angular<sp/>velocity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angularVelocity<sp/>=<sp/>normalVelocity<sp/>/<sp/>radialDistance;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>radial<sp/>thrust<sp/>acceleration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>thrustAccelerationComponents[<sp/>0<sp/>]<sp/>=<sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionDerivativeCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>angularVelocity<sp/>*<sp/>normalVelocity<sp/>+<sp/>centralBodyGravitationalParameter_<sp/>/<sp/>std::pow(<sp/>distanceFromCentralBody,<sp/>3.0<sp/>)<sp/>*<sp/>radialDistance;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>normal<sp/>thrust<sp/>acceleration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>thrustAccelerationComponents[<sp/>1<sp/>]<sp/>=<sp/>normalVelocityFunction_-&gt;evaluateCompositeFunctionDerivativeCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>angularVelocity<sp/>*<sp/>radialVelocityFunction_-&gt;evaluateCompositeFunctionCurrentTime(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>axial<sp/>thrust<sp/>acceleration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>thrustAccelerationComponents[<sp/>2<sp/>]<sp/>=<sp/>axialVelocityFunction_-&gt;evaluateCompositeFunctionDerivativeCurrentTime(<sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>centralBodyGravitationalParameter_<sp/>/<sp/>std::pow(<sp/>distanceFromCentralBody,<sp/>3.0<sp/>)<sp/>*<sp/>axialDistance;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>total<sp/>thrust<sp/>acceleration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thrustAccelerationComponents;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::computeCurrentThrustAccelerationMagnitude(</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>total<sp/>thrust<sp/>acceleration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>computeCurrentThrustAcceleration(<sp/>timeSinceDeparture<sp/>).norm();</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">Eigen::Vector3d<sp/>HodographicShaping::computeCurrentThrustAcceleration(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>out-of-range<sp/>errors<sp/>in<sp/>quadrature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>timeSinceDeparture<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeSinceDeparture<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>timeSinceDeparture<sp/>&gt;<sp/>timeOfFlight_<sp/>)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeSinceDeparture<sp/>=<sp/>timeOfFlight_;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>thrustAccelerationVectorCache_.count(<sp/>timeSinceDeparture<sp/>)<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>cylindricalAcceleration<sp/>=<sp/>computeThrustAccelerationInCylindricalCoordinates(<sp/>timeSinceDeparture<sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>cylindricalState<sp/>=<sp/>computeStateVectorInCylindricalCoordinates(<sp/>timeSinceDeparture<sp/>).segment(0,3);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>cartesianState<sp/>=<sp/>computeCurrentStateVector(<sp/>timeSinceDeparture<sp/>).segment(0,3);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>cartesianAcceleration;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cartesianAcceleration[<sp/>0<sp/>]<sp/>=<sp/>(<sp/>1.0<sp/>/<sp/>(<sp/>cartesianState[<sp/>0<sp/>]<sp/>+<sp/>(<sp/>std::pow(<sp/>cartesianState[<sp/>1<sp/>],<sp/>2<sp/>)<sp/>/<sp/>cartesianState[<sp/>0<sp/>]<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>cylindricalState[<sp/>0<sp/>]<sp/>*<sp/>cylindricalAcceleration[<sp/>0<sp/>]</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>cartesianState[<sp/>1<sp/>]<sp/>/<sp/>cartesianState[<sp/>0<sp/>]<sp/>)<sp/>*<sp/>std::pow(<sp/>cylindricalState[<sp/>0<sp/>],<sp/>1<sp/>)<sp/>*<sp/>cylindricalAcceleration[<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cartesianAcceleration[<sp/>1<sp/>]<sp/>=<sp/>(<sp/>std::pow(<sp/>cylindricalState[<sp/>0<sp/>],<sp/>1<sp/>)<sp/>*<sp/>cylindricalAcceleration[<sp/>1<sp/>]</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>cartesianState[<sp/>1<sp/>]<sp/>*<sp/>cartesianAcceleration[<sp/>0<sp/>]<sp/>)<sp/>/<sp/>cartesianState[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cartesianAcceleration[<sp/>2<sp/>]<sp/>=<sp/>cylindricalAcceleration[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrustAccelerationVectorCache_[<sp/>timeSinceDeparture<sp/>]<sp/>=<sp/>cartesianAcceleration;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thrustAccelerationVectorCache_[<sp/>timeSinceDeparture<sp/>];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">Eigen::Vector3d<sp/>HodographicShaping::computeCurrentThrustAcceleration(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentTime,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeOffset<sp/>)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>computeCurrentThrustAcceleration(<sp/>currentTime<sp/>-<sp/>timeOffset<sp/>);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">Eigen::Vector3d<sp/>HodographicShaping::computeCurrentThrustAccelerationDirection(</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeSinceDeparture<sp/>)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>computeCurrentThrustAcceleration(<sp/>timeSinceDeparture<sp/>).normalized();</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HodographicShaping::computeDeltaV(<sp/>)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>deltaV,<sp/>ie<sp/>thrust<sp/>acceleration<sp/>function,<sp/>as<sp/>a<sp/>function<sp/>of<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>derivativeFunctionDeltaVtest<sp/>=</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(<sp/>&amp;HodographicShaping::computeCurrentThrustAccelerationMagnitude,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::placeholders::_1<sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>numerical<sp/>quadrature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>numerical_quadrature::NumericalQuadrature&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>quadrature<sp/>=</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerical_quadrature::createQuadrature(<sp/>derivativeFunctionDeltaVtest,<sp/>quadratureSettings_,<sp/>timeOfFlight_<sp/>);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quadrature-&gt;getQuadrature(<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shape_based_methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tudat</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/low_thrust/shape_based/hodographicShaping.cpp"/>
  </compounddef>
</doxygen>
