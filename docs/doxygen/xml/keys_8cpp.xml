<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="keys_8cpp" kind="file" language="C++">
    <compoundname>keys.cpp</compoundname>
    <includes local="no">boost/regex.hpp</includes>
    <includes refid="interface_2json_2support_2utilities_8h" local="yes">tudat/interface/json/support/utilities.h</includes>
    <includes refid="keys_8h" local="yes">tudat/interface/json/support/keys.h</includes>
    <incdepgraph>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="3">
        <label>tudat/interface/json/support/utilities.h</label>
        <link refid="interface_2json_2support_2utilities_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Eigen/Core</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="12">
        <label>boost/algorithm/string/trim.hpp</label>
      </node>
      <node id="1">
        <label>/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/interface/json/support/keys.cpp</label>
        <link refid="keys_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="11">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="7">
        <label>cctype</label>
      </node>
      <node id="14">
        <label>tudat/interface/json/support/keys.h</label>
        <link refid="keys_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>boost/regex.hpp</label>
      </node>
      <node id="5">
        <label>set</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetudat">tudat</innernamespace>
    <innernamespace refid="namespacetudat_1_1json__interface">tudat::json_interface</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2010-2019,<sp/>Delft<sp/>University<sp/>of<sp/>Technology</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>All<sp/>rigths<sp/>reserved</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Tudat.<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>exclusively</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Modified<sp/>BSD<sp/>license.<sp/>You<sp/>should<sp/>have<sp/>received</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a<sp/>copy<sp/>of<sp/>the<sp/>license<sp/>with<sp/>this<sp/>file.<sp/>If<sp/>not,<sp/>please<sp/>or<sp/>visit:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>http://tudat.tudelft.nl/LICENSE.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/regex.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/interface/json/support/utilities.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/interface/json/support/keys.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetudat" kindref="compound">tudat</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">json_interface</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Special<sp/>keys<sp/>(used<sp/>internally<sp/>by<sp/>json_interface,<sp/>can&apos;t<sp/>be<sp/>used<sp/>in<sp/>JSON<sp/>files).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>SpecialKeys::root<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>SpecialKeys::dot<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>SpecialKeys::up<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>SpecialKeys::rootObject<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>SpecialKeys::keyPath<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#keypath&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>SpecialKeys::objectContaining<sp/>=</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>SpecialKeys::rootObject,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>SpecialKeys::keyPath</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>SpecialKeys::all<sp/>=</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>SpecialKeys::root,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>SpecialKeys::up,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>SpecialKeys::rootObject,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>SpecialKeys::keyPath</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Keys<sp/>recognised<sp/>by<sp/>json_interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::simulationType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;simulationType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::initialEpoch<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialEpoch&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::finalEpoch<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;finalEpoch&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::globalFrameOrigin<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;globalFrameOrigin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::globalFrameOrientation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;globalFrameOrientation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Spice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::spice<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;spice&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Spice::useStandardKernels<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useStandardKernels&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Spice::alternativeKernels<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;alternativeKernels&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Spice::kernels<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;kernels&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Spice::preloadEphemeris<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;preloadEphemeris&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Spice::interpolationOffsets<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;interpolationOffsets&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Spice::interpolationStep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;interpolationStep&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::bodies<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bodies&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::useDefaultSettings<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useDefaultSettings&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::initialState<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialState&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::initialStateOrigin<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialStateOrigin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::mass<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::rotationalState<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rotationalState&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::referenceArea<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceArea&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cartesian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::x<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::y<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::z<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::vx<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;vx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::vy<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;vy&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::vz<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;vz&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Keplerian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::centralBodyGravitationalParameter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBodyGravitationalParameter&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::centralBodyAverageRadius<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBodyAverageRadius&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::semiMajorAxis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;semiMajorAxis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::eccentricity<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;eccentricity&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::inclination<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inclination&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::argumentOfPeriapsis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;argumentOfPeriapsis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::longitudeOfAscendingNode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;longitudeOfAscendingNode&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::trueAnomaly<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;trueAnomaly&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::meanAnomaly<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;meanAnomaly&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::eccentricAnomaly<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;eccentricAnomaly&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::semiLatusRectum<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;semiLatusRectum&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::meanMotion<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;meanMotion&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::period<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;period&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::radius<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;radius&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::altitude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;altitude&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::periapsisDistance<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;periapsisDistance&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::apoapsisDistance<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;apoapsisDistance&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::periapsisAltitude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;periapsisAltitude&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::apoapsisAltitude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;apoapsisAltitude&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Spherical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::epoch<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;epoch&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::latitude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;latitude&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::longitude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;longitude&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::speed<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;speed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::flightPathAngle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;flightPathAngle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::State::headingAngle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;headingAngle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::aerodynamics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::aerodynamics<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;aerodynamics&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::coefficientsType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;coefficientsType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::referenceLength<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceLength&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::referenceArea<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceArea&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::lateralReferenceLength<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lateralReferenceLength&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::momentReferencePoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;momentReferencePoint&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::independentVariableNames<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;independentVariableNames&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::areCoefficientsInAerodynamicFrame<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;areCoefficientsInAerodynamicFrame&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::areCoefficientsInNegativeAxisDirection<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;areCoefficientsInNegativeAxisDirection&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::controlSurface<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;controlSurface&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::dragCoefficient<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dragCoefficient&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::forceCoefficients<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;forceCoefficients&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::momentCoefficients<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;momentCoefficients&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tabulated&lt;<sp/>N<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::independentVariableValues<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;independentVariableValues&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tabulated&lt;<sp/>1<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Aerodynamics::interpolator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;interpolator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::Atmosphere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::atmosphere<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;atmosphere&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::densityScaleHeight<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;densityScaleHeight&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::constantTemperature<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;constantTemperature&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::densityAtZeroAltitude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;densityAtZeroAltitude&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::specificGasConstant<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;specificGasConstant&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::ratioOfSpecificHeats<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ratioOfSpecificHeats&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::independentVariablesNames<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;independentVariablesNames&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::dependentVariablesNames<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dependentVariablesNames&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::boundaryHandling<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;boundaryHandling&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Atmosphere::spaceWeatherFile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;spaceWeatherFile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::Ephemeris</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::ephemeris<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ephemeris&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::frameOrigin<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;frameOrigin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::frameOrientation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;frameOrientation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>std::string<sp/>Keys::Body::Ephemeris::makeMultiArc<sp/>=<sp/>&quot;makeMultiArc&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::correctForStellarAberration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;correctForStellarAberration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::correctForLightTimeAberration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;correctForLightTimeAberration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::convergeLighTimeAberration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;convergeLighTimeAberration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::initialTime<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::finalTime<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;finalTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::timeStep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;timeStep&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::interpolator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;interpolator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::useLongDoubleStates<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useLongDoubleStates&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::bodyIdentifier<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bodyIdentifier&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::useCircularCoplanarApproximation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useCircularCoplanarApproximation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::constantState<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;constantState&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>std::string<sp/>Keys::Body::Ephemeris::customStateFunction<sp/>=<sp/>&quot;customStateFunction&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::initialStateInKeplerianElements<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialStateInKeplerianElements&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::epochOfInitialState<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;epochOfInitialState&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::centralBodyGravitationalParameter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBodyGravitationalParameter&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::rootFinderAbsoluteTolerance<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rootFinderAbsoluteTolerance&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::rootFinderMaximumNumberOfIterations<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rootFinderMaximumNumberOfIterations&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::Ephemeris::bodyStateHistory<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bodyStateHistory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::GravityField</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::gravityField<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gravityField&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::gravitationalParameter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gravitationalParameter&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::referenceRadius<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceRadius&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::cosineCoefficients<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cosineCoefficients&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::sineCoefficients<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sineCoefficients&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::associatedReferenceFrame<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;associatedReferenceFrame&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::model<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::maximumDegree<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumDegree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::maximumOrder<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumOrder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::gravitationalParameterIndex<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gravitationalParameterIndex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityField::referenceRadiusIndex<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceRadiusIndex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::RadiationPressure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::radiationPressure<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;radiationPressure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RadiationPressure::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RadiationPressure::sourceBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sourceBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RadiationPressure::occultingBodies<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;occultingBodies&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RadiationPressure::referenceArea<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceArea&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RadiationPressure::radiationPressureCoefficient<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;radiationPressureCoefficient&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::RotationModel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::rotationModel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rotationModel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RotationModel::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RotationModel::originalFrame<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;originalFrame&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RotationModel::targetFrame<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;targetFrame&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RotationModel::initialOrientation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialOrientation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RotationModel::initialTime<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RotationModel::rotationRate<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rotationRate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RotationModel::precessionNutationTheory<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;precessionNutationTheory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::RotationModel::centralBodyName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBodyName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::ShapeModel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::shapeModel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;shapeModel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::ShapeModel::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::ShapeModel::radius<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;radius&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::ShapeModel::equatorialRadius<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;equatorialRadius&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::ShapeModel::flattening<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;flattening&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Body::GravityFieldVariation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::gravityFieldVariation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gravityFieldVariation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::bodyDeformationType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bodyDeformationType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::deformingBodies<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;deformingBodies&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::loveNumbers<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;loveNumbers&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::referenceRadius<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceRadius&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::modelInterpolation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;modelInterpolation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::cosineCoefficientCorrections<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cosineCoefficientCorrections&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::sineCoefficientCorrections<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sineCoefficientCorrections&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::minimumDegree<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumDegree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::minimumOrder<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumOrder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GravityFieldVariation::interpolator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;interpolator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Body::GroundStation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::groundStation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;groundStation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GroundStation::stationPosition<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stationPosition&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GroundStation::positionElementType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;positionElementType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Body::GroundStation::stationName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stationName&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::dependentVariableType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dependentVariableType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::body<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::componentIndex<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;componentIndex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::componentIndices<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;componentIndices&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::useAccelerationNorm<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useAccelerationNorm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::relativeToBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;relativeToBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::accelerationType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;accelerationType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>std::string<sp/>Keys::Variable::bodyUndergoingAcceleration<sp/>=<sp/>&quot;bodyUndergoingAcceleration&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::bodyExertingAcceleration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bodyExertingAcceleration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::torqueType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;torqueType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>std::string<sp/>Keys::Variable::bodyUndergoingTorque<sp/>=<sp/>&quot;bodyUndergoingTorque&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::bodyExertingTorque<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bodyExertingTorque&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::baseFrame<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;baseFrame&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::targetFrame<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;targetFrame&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::angle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;angle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::deformationType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;deformationType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::identifier<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;identifier&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::derivativeWrtBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;derivativeWrtBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Variable::thirdBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;thirdBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::parametersToEstimate<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;parametersToEstimate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::parameterType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;parameterType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::associatedBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;associatedBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::secondaryIdentifier<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;secondaryIdentifier&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::initialStateValue<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialStateValue&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::centralBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::frameOrientation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;frameOrientation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::arcStartTimes<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;arcStartTimes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::coefficientIndices<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;coefficientIndices&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::maximumDegree<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumDegree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::minimumDegree<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumDegree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::maximumOrder<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumOrder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::minimumOrder<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumOrder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::deformingBodies<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;deformingBodies&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::componentsToEstimate<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;componentsToEstimate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::observableType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;observableType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::linkEnds<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;linkEnds&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::referenceLinkEnd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceLinkEnd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::degree<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;degree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::orders<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;orders&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Parameter::useComplexValue<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useComplexValue&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::estimationSettings<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;estimation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::inverseAprioriCovariance<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inverseAprioriCovariance&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::reintegrateEquationsOnFirstIteration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reintegrateOnFirstIteration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::reintegrateVariationalEquations<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reintegrateVariationalEquations&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::saveInformationMatrix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;savePartials&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::printOutput<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;printOutput&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::saveResidualsAndParametersFromEachIteration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;saveEstimationHistory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::saveStateHistoryForEachIteration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;saveStateHistory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::maximumNumberOfIterations<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumIteration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::minimumResidualChange<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumResidualChange&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::minimumResidual<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumResidual&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::numberOfIterationsWithoutImprovement<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;numberOfUnimprovedIterations&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Estimation::dataWeights<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dataWeights&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Observation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::observations<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;observations&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::observableType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;observableType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::lightTimeCorrectionSettingsList<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lightTimeCorrections&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::biasSettings<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bias&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::transmitterProperTimeRateSettings<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;transmitterProperTimeRate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::receiverProperTimeRateSettings<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;receiverProperTimeRate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::constantIntegrationTime<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;constantIntegrationTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::oneWayRangeObsevationSettings<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;oneWayRangeObsevation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::retransmissionTimes<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;retransmissionTimes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::uplinkOneWayDopplerSettings<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uplinkOneWayDoppler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::downlinkOneWayDopplerSettings<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;downlinkOneWayDoppler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::properTimeRateType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;properTimeRateType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::centralBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::lightTimeCorrectionType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lightTimeCorrectionType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::perturbingBodies<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;perturbingBodies&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::observationSimulationTimesType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;observationSimulationTimesType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::observationSimulationTimesList<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;observationSimulationTimesList&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::observableViabilityType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;viabilityType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::associatedLinkEnd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;associatedLinkEnd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::doubleParameter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;doubleParameter&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Observation::stringParameter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stringParameter&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ObservationBias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::ObservationBias::biasType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;biasType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::ObservationBias::multipleBiasesList<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;multipleBiasesList&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::ObservationBias::constantBias<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;constantBias&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::ObservationBias::arcWiseBiasList<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;arcWiseBiasList&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::ObservationBias::arcStartTimes<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;arcStartTimes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::ObservationBias::referenceLinkEnd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;referenceLinkEnd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Propagator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::propagators<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;propagators&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::integratedStateType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;integratedStateType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::initialStates<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialStates&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::bodiesToPropagate<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bodiesToPropagate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Translational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::centralBodies<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBodies&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::accelerations<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;accelerations&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::maximumDegree<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumDegree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::maximumOrder<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumOrder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::maximumDegreeOfBodyExertingAcceleration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumDegreeOfBodyExertingAcceleration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::maximumOrderOfBodyExertingAcceleration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumOrderOfBodyExertingAcceleration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::maximumDegreeOfBodyUndergoingAcceleration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumDegreeOfBodyUndergoingAcceleration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::maximumOrderOfBodyUndergoingAcceleration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumOrderOfBodyUndergoingAcceleration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::maximumDegreeOfCentralBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumDegreeOfCentralBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::maximumOrderOfCentralBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumOrderOfCentralBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::calculateSchwarzschildCorrection<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;calculateSchwarzschildCorrection&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::calculateLenseThirringCorrection<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;calculateLenseThirringCorrection&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::calculateDeSitterCorrection<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;calculateDeSitterCorrection&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::primaryBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;primaryBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::centralBodyAngularMomentum<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBodyAngularMomentum&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::constantAcceleration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;constantAcceleration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::sineAcceleration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sineAcceleration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::cosineAcceleration<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cosineAcceleration&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/>Acceleration::Thrust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/>Acceleration::Thrust::Direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::direction<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;direction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Direction::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Direction::relativeBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;relativeBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Direction::colinearWithVelocity<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;colinearWithVelocity&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Direction::towardsRelativeBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;towardsRelativeBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/>Acceleration::Thrust::Direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::magnitude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;magnitude&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Magnitude::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Magnitude::originID<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;originID&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Magnitude::constantMagnitude<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;constantMagnitude&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Magnitude::specificImpulse<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;specificImpulse&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Magnitude::bodyFixedDirection<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bodyFixedDirection&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::Magnitude::useAllEngines<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useAllEngines&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::dataInterpolation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dataInterpolation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::specificImpulse<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;specificImpulse&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::frame<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;frame&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Acceleration::Thrust::centralBody<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centralBody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Mass<sp/>rate<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::massRateModels<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;massRateModels&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::MassRateModel::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::MassRateModel::useAllThrustModels<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useAllThrustModels&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::MassRateModel::associatedThrustSource<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;associatedThrustSource&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Torque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::torques<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;torques&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Propagator::Torque::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Termination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::termination<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;termination&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Termination::anyOf<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;anyOf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Termination::allOf<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;allOf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Termination::variable<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Termination::lowerLimit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lowerLimit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Termination::upperLimit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;upperLimit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Integrator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::integrator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;integrator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::initialTime<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::stepSize<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stepSize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::initialStepSize<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialStepSize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::saveFrequency<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;saveFrequency&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::assessTerminationOnMinorSteps<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;assessTerminationOnMinorSteps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::rungeKuttaCoefficientSet<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rungeKuttaCoefficientSet&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::minimumStepSize<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumStepSize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::maximumStepSize<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumStepSize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::relativeErrorTolerance<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;relativeErrorTolerance&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::absoluteErrorTolerance<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;absoluteErrorTolerance&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::areTolerancesDefinedAsScalar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;areTolerancesDefinedAsScalar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::safetyFactorForNextStepSize<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;safetyFactorForNextStepSize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::maximumFactorIncreaseForNextStepSize<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumFactorIncreaseForNextStepSize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::minimumFactorDecreaseForNextStepSize<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumFactorDecreaseForNextStepSize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::bandwidth<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bandwidth&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::extrapolationSequence<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;extrapolationSequence&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::maximumNumberOfSteps<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumNumberOfSteps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::maximumOrder<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;maximumOrder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Integrator::minimumOrder<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;minimumOrder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Interpolation::DataMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::DataMap::map<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::DataMap::file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::DataMap::independentVariableValues<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;independentVariableValues&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::DataMap::dependentVariableValues<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dependentVariableValues&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::DataMap::dependentVariableFirstDerivativeValues<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dependentVariableFirstDerivativeValues&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Interpolation::Interpolator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::Interpolator::type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::Interpolator::lookupScheme<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lookupScheme&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::Interpolator::useLongDoubleTimeStep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;useLongDoubleTimeStep&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::Interpolator::order<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;order&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::Interpolator::boundaryHandling<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;boundaryHandling&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::Interpolator::lagrangeBoundaryHandling<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lagrangeBoundaryHandling&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Interpolation::DataInterpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::DataInterpolation::data<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::DataInterpolation::interpolator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;interpolator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/>Interpolation::ModelInterpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::ModelInterpolation::initialTime<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::ModelInterpolation::finalTime<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;finalTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::ModelInterpolation::timeStep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;timeStep&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Interpolation::ModelInterpolation::interpolator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;interpolator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::xport<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;export&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Export::file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Export::variables<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;variables&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Export::header<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;header&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Export::epochsInFirstColumn<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;epochsInFirstColumn&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Export::onlyInitialStep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;onlyInitialStep&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Export::onlyFinalStep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;onlyFinalStep&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Export::numericalPrecision<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;numericalPrecision&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Export::printVariableIndicesToTerminal<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;printVariableIndicesToTerminal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::options<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;options&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Options::notifyOnPropagationStart<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;notifyOnPropagationStart&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Options::notifyOnPropagationTermination<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;notifyOnPropagationTermination&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Options::printInterval<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;printInterval&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Options::defaultValueUsedForMissingKey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;defaultValueUsedForMissingKey&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Options::unusedKey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unusedKey&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Options::fullSettingsFile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;fullSettingsFile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Keys::Options::tagOutputFilesIfPropagationFails<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tagOutputFilesIfPropagationFails&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KEYPATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexFromKey(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key<sp/>)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::cmatch<sp/>groups;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::regex_match(<sp/>key.c_str(<sp/>),<sp/>groups,<sp/>boost::regex(<sp/>R</highlight><highlight class="stringliteral">&quot;(\@(\d+))&quot;<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>groups[<sp/>1<sp/>].matched<sp/>)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::stoi(<sp/>groups[<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>...<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><ref refid="classtudat_1_1json__interface_1_1KeyPath_1a4e22cc4ea5fad763aa4daf0f1736fd69" kindref="member">KeyPath::KeyPath</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>keyPathStringRepresentation<sp/>)<sp/>:<sp/>std::vector&lt;<sp/>std::string<sp/>&gt;(<sp/>)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>keys<sp/>=<sp/>split(<sp/>keyPathStringRepresentation,<sp/>SpecialKeys::dot<sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key<sp/>:<sp/>keys<sp/>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::cmatch<sp/>groups;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::regex_match(<sp/>key.c_str(<sp/>),<sp/>groups,<sp/>boost::regex(<sp/>R</highlight><highlight class="stringliteral">&quot;((.+?)\[(\d+?)\])&quot;<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>groups[<sp/>1<sp/>].matched<sp/>&amp;&amp;<sp/>groups[<sp/>2<sp/>].matched<sp/>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>arrayKey(<sp/>groups[<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>arrayIndex(<sp/>groups[<sp/>2<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_back(<sp/>arrayKey<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_back(<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>arrayIndex<sp/>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_back(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>stringRepresentation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyPath&amp;<sp/>keyPath<sp/>)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>somethingAdded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyPath.size(<sp/>);<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key<sp/>=<sp/>keyPath.at(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key<sp/>!=<sp/>SpecialKeys::root<sp/>)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intKey<sp/>=<sp/>indexFromKey(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>intKey<sp/>&gt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRepresentation<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>intKey<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>somethingAdded<sp/>)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRepresentation<sp/>&lt;&lt;<sp/>SpecialKeys::dot;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRepresentation<sp/>&lt;&lt;<sp/>key;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>somethingAdded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringRepresentation;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">KeyPath<sp/>KeyPath::canonical(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyPath&amp;<sp/>basePath<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="567"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compound<sp/>key<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>KeyPath<sp/>compoundKeyPath;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>absolute<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>this-&gt;isAbsolute(<sp/>)<sp/>&amp;&amp;<sp/>basePath.isAbsolute(<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compoundKeyPath<sp/>=<sp/>basePath<sp/>/<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compoundKeyPath<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>KeyPath<sp/>canonicalKeyPath<sp/>=<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::string<sp/>key<sp/>:<sp/>compoundKeyPath<sp/>)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key<sp/>==<sp/>SpecialKeys::up<sp/>)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>canonicalKeyPath.size(<sp/>)<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canonicalKeyPath.pop_back(<sp/>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canonicalKeyPath.push_back(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>canonicalKeyPath;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>json_interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tudat</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/interface/json/support/keys.cpp"/>
  </compounddef>
</doxygen>
