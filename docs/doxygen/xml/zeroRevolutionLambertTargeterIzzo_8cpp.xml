<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="zeroRevolutionLambertTargeterIzzo_8cpp" kind="file" language="C++">
    <compoundname>zeroRevolutionLambertTargeterIzzo.cpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">boost/math/special_functions.hpp</includes>
    <includes local="no">boost/exception/all.hpp</includes>
    <includes local="no">Eigen/Dense</includes>
    <includes refid="mathematicalConstants_8h" local="yes">tudat/math/basic/mathematicalConstants.h</includes>
    <includes refid="zeroRevolutionLambertTargeterIzzo_8h" local="yes">tudat/astro/mission_segments/zeroRevolutionLambertTargeterIzzo.h</includes>
    <includes refid="convergenceException_8h" local="yes">tudat/math/basic/convergenceException.h</includes>
    <incdepgraph>
      <node id="3">
        <label>boost/math/special_functions.hpp</label>
      </node>
      <node id="8">
        <label>limits</label>
      </node>
      <node id="9">
        <label>tudat/astro/mission_segments/zeroRevolutionLambertTargeterIzzo.h</label>
        <link refid="zeroRevolutionLambertTargeterIzzo_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>boost/exception/all.hpp</label>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="10">
        <label>Eigen/Core</label>
      </node>
      <node id="5">
        <label>Eigen/Dense</label>
      </node>
      <node id="11">
        <label>tudat/astro/mission_segments/lambertTargeter.h</label>
        <link refid="lambertTargeter_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tudat/math/basic/convergenceException.h</label>
        <link refid="convergenceException_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/mission_segments/zeroRevolutionLambertTargeterIzzo.cpp</label>
        <link refid="zeroRevolutionLambertTargeterIzzo_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>tudat/math/basic/mathematicalConstants.h</label>
        <link refid="mathematicalConstants_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>complex</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetudat">tudat</innernamespace>
    <innernamespace refid="namespacetudat_1_1mission__segments">tudat::mission_segments</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2010-2019,<sp/>Delft<sp/>University<sp/>of<sp/>Technology</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>All<sp/>rigths<sp/>reserved</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Tudat.<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>exclusively</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Modified<sp/>BSD<sp/>license.<sp/>You<sp/>should<sp/>have<sp/>received</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a<sp/>copy<sp/>of<sp/>the<sp/>license<sp/>with<sp/>this<sp/>file.<sp/>If<sp/>not,<sp/>please<sp/>or<sp/>visit:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>http://tudat.tudelft.nl/LICENSE.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>References</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>lambertTargeterIzzo.h/.cpp<sp/>source<sp/>files,<sp/>tudat<sp/>revision<sp/>455/466.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>PyKEP<sp/>kepler<sp/>toolbox,<sp/>Dario<sp/>Izzo,<sp/>ESA<sp/>Advanced<sp/>Concepts<sp/>Team.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>a<sp/>new<sp/>implementation<sp/>of<sp/>the<sp/>lambertTargeterIzzo<sp/>class,<sp/>for<sp/>better<sp/>adaptability<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>extension<sp/>towards<sp/>subclasses<sp/>and<sp/>future<sp/>improvements/additions.<sp/>Therefore,<sp/>it<sp/>replaces<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>lambertTargeterIzzo<sp/>class<sp/>while<sp/>still<sp/>providing<sp/>the<sp/>same<sp/>functionality.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/math/special_functions.hpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>For<sp/>asinh<sp/>and<sp/>acosh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/exception/all.hpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>For<sp/>exceptions<sp/>in<sp/>sanity<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>cross<sp/>product<sp/>issues<sp/>(can<sp/>someone<sp/>explain<sp/>why,<sp/>exactly?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/math/basic/mathematicalConstants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/astro/mission_segments/zeroRevolutionLambertTargeterIzzo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/math/basic/convergenceException.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetudat" kindref="compound">tudat</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mission_segments</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1aa4e2a96db3a43d9c7557c9246aeaadfb" kindref="member">ZeroRevolutionLambertTargeterIzzo::getRadialVelocityAtDeparture</ref>(<sp/>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>lambertTargeterIzzo<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>execute<sp/>has<sp/>not<sp/>been<sp/>called<sp/>yet,<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1aa9dd030ab3e408d72f44c4f9ea2fe03a" kindref="member">solved</ref><sp/>)<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1cb96dd1627e781c996d38b9303a57df" kindref="member">execute</ref>(<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>radial<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>radialUnitVectorAtDeparture<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.normalized(<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>radial<sp/>velocity<sp/>at<sp/>departure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a461475bd753a2ba590f1a403a8695794" kindref="member">cartesianVelocityAtDeparture</ref>.dot(<sp/>radialUnitVectorAtDeparture<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1e2096c63935fbaf3496aebebb742419" kindref="member">ZeroRevolutionLambertTargeterIzzo::getTransverseVelocityAtDeparture</ref>(<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>lambertTargeterIzzo<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>execute<sp/>has<sp/>not<sp/>been<sp/>called<sp/>yet,<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1aa9dd030ab3e408d72f44c4f9ea2fe03a" kindref="member">solved</ref><sp/>)<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1cb96dd1627e781c996d38b9303a57df" kindref="member">execute</ref>(<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>angular<sp/>momemtum<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>angularMomentumVector<sp/>=</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.cross(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a461475bd753a2ba590f1a403a8695794" kindref="member">cartesianVelocityAtDeparture</ref><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>normalized<sp/>angular<sp/>momentum<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>angularMomentumUnitVector<sp/>=<sp/>angularMomentumVector.normalized(<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>radial<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>radialUnitVectorAtDeparture<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.normalized(<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>tangential<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>tangentialUnitVectorAtDeparture<sp/>=</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angularMomentumUnitVector.cross(<sp/>radialUnitVectorAtDeparture<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>tangential<sp/>velocity<sp/>at<sp/>departure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a461475bd753a2ba590f1a403a8695794" kindref="member">cartesianVelocityAtDeparture</ref>.dot(<sp/>tangentialUnitVectorAtDeparture<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1aee339aa28f3f7d0f9bc0c02e8155c9ec" kindref="member">ZeroRevolutionLambertTargeterIzzo::getRadialVelocityAtArrival</ref>(<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>lambertTargeterIzzo<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>execute<sp/>has<sp/>not<sp/>been<sp/>called<sp/>yet,<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1aa9dd030ab3e408d72f44c4f9ea2fe03a" kindref="member">solved</ref><sp/>)<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1cb96dd1627e781c996d38b9303a57df" kindref="member">execute</ref>(<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>radial<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>radialUnitVectorAtArrival<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref>.normalized(<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>radial<sp/>velocity<sp/>at<sp/>arrival.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a7260e16ff3a70f4971945d66ef08e682" kindref="member">cartesianVelocityAtArrival</ref>.dot(<sp/>radialUnitVectorAtArrival<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ab22c41bde66c025f1f5a3c7fbab46354" kindref="member">ZeroRevolutionLambertTargeterIzzo::getTransverseVelocityAtArrival</ref>(<sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>lambertTargeterIzzo<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>execute<sp/>has<sp/>not<sp/>been<sp/>called<sp/>yet,<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1aa9dd030ab3e408d72f44c4f9ea2fe03a" kindref="member">solved</ref><sp/>)<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1cb96dd1627e781c996d38b9303a57df" kindref="member">execute</ref>(<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>angular<sp/>momemtum<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>angularMomentumVector<sp/>=</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref>.cross(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a7260e16ff3a70f4971945d66ef08e682" kindref="member">cartesianVelocityAtArrival</ref><sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>normalized<sp/>angular<sp/>momentum<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>angularMomentumUnitVector<sp/>=<sp/>angularMomentumVector.normalized(<sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>radial<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>radialUnitVectorAtArrival<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref>.normalized(<sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>tangential<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>tangentialUnitVectorAtArrival</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>angularMomentumUnitVector.cross(<sp/>radialUnitVectorAtArrival<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>tangential<sp/>velocity<sp/>at<sp/>departure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a7260e16ff3a70f4971945d66ef08e682" kindref="member">cartesianVelocityAtArrival</ref>.dot(<sp/>tangentialUnitVectorAtArrival<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1979b80bd49c1656d738378f31195700" kindref="member">ZeroRevolutionLambertTargeterIzzo::getSemiMajorAxis</ref>(<sp/>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>lambertTargeterIzzo<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>execute<sp/>has<sp/>not<sp/>been<sp/>called<sp/>yet,<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1aa9dd030ab3e408d72f44c4f9ea2fe03a" kindref="member">solved</ref><sp/>)<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1cb96dd1627e781c996d38b9303a57df" kindref="member">execute</ref>(<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>specific<sp/>orbital<sp/>energy:<sp/>eps<sp/>=<sp/>v^2/<sp/>-<sp/>mu/r.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>specificOrbitalEnergy<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a461475bd753a2ba590f1a403a8695794" kindref="member">cartesianVelocityAtDeparture</ref>.squaredNorm(<sp/>)<sp/>/<sp/>2.0</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab22c920bfc0f13cdfee122fa2bb93ea2" kindref="member">gravitationalParameter</ref><sp/>/<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.norm(<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>semi-major<sp/>axis:<sp/>a<sp/>=<sp/>-mu<sp/>/<sp/>2*eps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab22c920bfc0f13cdfee122fa2bb93ea2" kindref="member">gravitationalParameter</ref><sp/>/<sp/>(<sp/>2.0<sp/>*<sp/>specificOrbitalEnergy<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>What<sp/>about<sp/>get<sp/>retrograde<sp/>flag,<sp/>tolerance<sp/>and<sp/>max<sp/>number<sp/>of<sp/>iterations?<sp/>Might<sp/>be<sp/>useful<sp/>to<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1cb96dd1627e781c996d38b9303a57df" kindref="member">ZeroRevolutionLambertTargeterIzzo::execute</ref>(<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a16e6bfdeadb36d16cf55f08b5ed25727" kindref="member">sanityCheckTimeOfFlight</ref>(<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a896eb162d193d0112ee40bd367b47d09" kindref="member">sanityCheckGravitationalParameter</ref>(<sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transform<sp/>dimensional<sp/>parameters<sp/>to<sp/>dimensionless<sp/>parameters<sp/>if<sp/>not<sp/>done<sp/>already<sp/>(e.g.<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multirevolution<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a0151916d269a7449fbabe7693707cb70" kindref="member">transformed</ref><sp/>)<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a0b9fc55e3bf9ddb1ffbc51c7202f1cda" kindref="member">transformDimensions</ref>(<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>root<sp/>(single<sp/>rev)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xResult<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a98925d977adff13d26b20caf4a1faa49" kindref="member">ZeroRevolutionLambertTargeterIzzo::computeRootTimeOfFlight</ref>(<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reconstruct<sp/>Vs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a198b12eafe08a9a66900ee81fc215d20" kindref="member">computeVelocities</ref>(<sp/>xResult<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1aa9dd030ab3e408d72f44c4f9ea2fe03a" kindref="member">solved</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a16e6bfdeadb36d16cf55f08b5ed25727" kindref="member">ZeroRevolutionLambertTargeterIzzo::sanityCheckTimeOfFlight</ref>(<sp/>)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>time<sp/>of<sp/>flight<sp/>is<sp/>negative,<sp/>throw<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a74f0ac221b22693ba7fe0b7398007e9b" kindref="member">timeOfFlight</ref><sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Time-of-flight<sp/>specified<sp/>in<sp/>Lambert<sp/>problem<sp/>must<sp/>be<sp/>strictly<sp/>positive.<sp/>Specified<sp/>time-of-flight<sp/>in<sp/>days.&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a74f0ac221b22693ba7fe0b7398007e9b" kindref="member">timeOfFlight</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Else,<sp/>do<sp/>nothing<sp/>and<sp/>continue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a896eb162d193d0112ee40bd367b47d09" kindref="member">ZeroRevolutionLambertTargeterIzzo::sanityCheckGravitationalParameter</ref>(<sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>gravitational<sp/>parameter<sp/>is<sp/>negative,<sp/>throw<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab22c920bfc0f13cdfee122fa2bb93ea2" kindref="member">gravitationalParameter</ref><sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Gravitational<sp/>parameter<sp/>specified<sp/>in<sp/>Lambert<sp/>problem<sp/>must<sp/>be<sp/>strictly<sp/>positive.<sp/>Specified<sp/>gravitational<sp/>parameter:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab22c920bfc0f13cdfee122fa2bb93ea2" kindref="member">gravitationalParameter</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Else,<sp/>do<sp/>nothing<sp/>and<sp/>continue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a0b9fc55e3bf9ddb1ffbc51c7202f1cda" kindref="member">ZeroRevolutionLambertTargeterIzzo::transformDimensions</ref>(<sp/>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>using<sp/>theory<sp/>from<sp/>PyKEP<sp/>toolbox<sp/>and<sp/>LambertTargeterIzzo<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>normalizing<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distanceNormalizingValue<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.norm(<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a80c3e081aeae5eea4d18bf4ef4164f2d" kindref="member">velocityNormalizingValue</ref><sp/>=<sp/>std::sqrt(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab22c920bfc0f13cdfee122fa2bb93ea2" kindref="member">gravitationalParameter</ref><sp/>/</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distanceNormalizingValue<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeNormalizingValue<sp/>=<sp/>distanceNormalizingValue<sp/>/<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a80c3e081aeae5eea4d18bf4ef4164f2d" kindref="member">velocityNormalizingValue</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>transfer<sp/>geometry<sp/>parameters<sp/>in<sp/>adimensional<sp/>units.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>of<sp/>Flight.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ab55d302f257841e2f4caf7e52f8955c4" kindref="member">normalizedTimeOfFlight</ref><sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a74f0ac221b22693ba7fe0b7398007e9b" kindref="member">timeOfFlight</ref><sp/>/<sp/>timeNormalizingValue;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cosine<sp/>of<sp/>transfer<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosineOfTransferAngle<sp/>=</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.dot(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref><sp/>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(distanceNormalizingValue<sp/>*<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref>.norm(<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalized<sp/>Cartesian<sp/>position<sp/>at<sp/>arrival.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a4133b5fc450c7c15ca666d0983fa923d" kindref="member">normalizedRadiusAtArrival</ref><sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref>.norm(<sp/>)<sp/>/<sp/>distanceNormalizingValue;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Chord.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a7f243a99425c70154c051269459046c9" kindref="member">normalizedChord</ref><sp/>=<sp/>std::sqrt(<sp/>1.0<sp/>+<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a4133b5fc450c7c15ca666d0983fa923d" kindref="member">normalizedRadiusAtArrival</ref></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a4133b5fc450c7c15ca666d0983fa923d" kindref="member">normalizedRadiusAtArrival</ref></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>2.0<sp/>*<sp/>cosineOfTransferAngle<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Semi-perimeter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref><sp/>=<sp/>(<sp/>1.0<sp/>+<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a4133b5fc450c7c15ca666d0983fa923d" kindref="member">normalizedRadiusAtArrival</ref><sp/>+<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a7f243a99425c70154c051269459046c9" kindref="member">normalizedChord</ref><sp/>)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>a<sp/>prograde<sp/>motion,<sp/>determine<sp/>whether<sp/>the<sp/>transfer<sp/>corresponds<sp/>to<sp/>the<sp/>long-<sp/>or<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>short-way<sp/>solution:<sp/>longway<sp/>if<sp/>x1*y2<sp/>-<sp/>x2*y1<sp/>&lt;<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.x(<sp/>)<sp/>*<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref>.y(<sp/>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.y(<sp/>)<sp/>*<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref>.x(<sp/>)<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>retrograde<sp/>is<sp/>true,<sp/>switch<sp/>longway<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a1dd22e2d2ed5159ad02566429544946d" kindref="member">isRetrograde</ref><sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>=<sp/>!<ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Semi-major<sp/>axis<sp/>of<sp/>the<sp/>minimum<sp/>energy<sp/>ellipse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1addb8147855117bb086dd07f28b766f93" kindref="member">normalizedMinimumEnergySemiMajorAxis</ref><sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref><sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transfer<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ad122718ab907efaf27eb18f4f15baabc" kindref="member">transferAngle</ref><sp/>=<sp/>std::acos(<sp/>cosineOfTransferAngle<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ad122718ab907efaf27eb18f4f15baabc" kindref="member">transferAngle</ref><sp/>=<sp/>2.0<sp/>*<sp/>mathematical_constants::PI<sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ad122718ab907efaf27eb18f4f15baabc" kindref="member">transferAngle</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lambda<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ab173c76a2cc122df13c2a43201508211" kindref="member">lambdaParameter</ref><sp/>=<sp/>std::sqrt(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a4133b5fc450c7c15ca666d0983fa923d" kindref="member">normalizedRadiusAtArrival</ref><sp/>)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>std::cos(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ad122718ab907efaf27eb18f4f15baabc" kindref="member">transferAngle</ref><sp/>/<sp/>2.0<sp/>)<sp/>/<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>transformed<sp/>flag<sp/>to<sp/>true,<sp/>as<sp/>the<sp/>dimension<sp/>transformation<sp/>has<sp/>been<sp/>performed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a0151916d269a7449fbabe7693707cb70" kindref="member">transformed</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a580304bcf54f4024c3ccf191ca5d2633" kindref="member">ZeroRevolutionLambertTargeterIzzo::computeTimeOfFlight</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xParameter<sp/>)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>using<sp/>theory<sp/>from<sp/>PyKEP<sp/>toolbox<sp/>and<sp/>LambertTargeterIzzo<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>semi-major<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>semiMajorAxis<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1addb8147855117bb086dd07f28b766f93" kindref="member">normalizedMinimumEnergySemiMajorAxis</ref></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>1.0<sp/>-<sp/>xParameter<sp/>*<sp/>xParameter<sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>x<sp/>&lt;<sp/>1,<sp/>the<sp/>solution<sp/>is<sp/>an<sp/>ellipse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>xParameter<sp/>&lt;<sp/>1.0<sp/>)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alpha<sp/>parameter<sp/>in<sp/>Lagrange&apos;s<sp/>equation<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alphaParameter<sp/>=<sp/>2.0<sp/>*<sp/>std::acos(<sp/>xParameter<sp/>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beta<sp/>parameter<sp/>in<sp/>Lagrange&apos;s<sp/>equation<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>betaParameter;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>long<sp/>transfer<sp/>arc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>betaParameter<sp/>=<sp/>-2.0<sp/>*<sp/>std::asin(</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref><sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a7f243a99425c70154c051269459046c9" kindref="member">normalizedChord</ref><sp/>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>2.0<sp/>*<sp/>semiMajorAxis<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>short<sp/>transfer<sp/>arc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>betaParameter<sp/>=<sp/>2.0<sp/>*<sp/>std::asin(</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref><sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a7f243a99425c70154c051269459046c9" kindref="member">normalizedChord</ref><sp/>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>2.0<sp/>*<sp/>semiMajorAxis<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time-of-flight<sp/>according<sp/>to<sp/>Lagrange<sp/>including<sp/>multiple<sp/>revolutions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a74f0ac221b22693ba7fe0b7398007e9b" kindref="member">timeOfFlight</ref><sp/>=<sp/>semiMajorAxis<sp/>*<sp/>std::sqrt(<sp/>semiMajorAxis<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>alphaParameter<sp/>-<sp/>std::sin(<sp/>alphaParameter<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>betaParameter<sp/>-<sp/>std::sin(<sp/>betaParameter<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a74f0ac221b22693ba7fe0b7398007e9b" kindref="member">timeOfFlight</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>it<sp/>is<sp/>a<sp/>hyperbola.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alpha<sp/>parameter<sp/>in<sp/>Lagrange&apos;s<sp/>equation<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alphaParameter<sp/>=<sp/>2.0<sp/>*<sp/>boost::math::acosh(<sp/>xParameter<sp/>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beta<sp/>parameter<sp/>in<sp/>Lagrange&apos;s<sp/>equation<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>betaParameter;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>long<sp/>transfer<sp/>arc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>betaParameter<sp/>=<sp/>-2.0<sp/>*<sp/>boost::math::asinh<sp/>(<sp/>std::sqrt(<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a7f243a99425c70154c051269459046c9" kindref="member">normalizedChord</ref><sp/>)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>-2.0<sp/>*<sp/>semiMajorAxis<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>short<sp/>transfer<sp/>arc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>betaParameter<sp/>=<sp/>2.0<sp/>*<sp/>boost::math::asinh<sp/>(<sp/>std::sqrt(<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a7f243a99425c70154c051269459046c9" kindref="member">normalizedChord</ref><sp/>)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>-2.0<sp/>*<sp/>semiMajorAxis<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time-of-flight<sp/>according<sp/>to<sp/>Lagrange.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeOfFlightLagrange<sp/>=<sp/>-semiMajorAxis<sp/>*<sp/>std::sqrt(<sp/>-semiMajorAxis<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>std::sinh(<sp/>alphaParameter<sp/>)<sp/>-<sp/>alphaParameter<sp/>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>std::sinh(<sp/>betaParameter<sp/>)<sp/>-<sp/>betaParameter<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timeOfFlightLagrange;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a98925d977adff13d26b20caf4a1faa49" kindref="member">ZeroRevolutionLambertTargeterIzzo::computeRootTimeOfFlight</ref>(<sp/>)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>using<sp/>theory<sp/>from<sp/>PyKEP<sp/>toolbox<sp/>and<sp/>LambertTargeterIzzo<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>root<sp/>(secant<sp/>method,<sp/>currently<sp/>hard<sp/>coded)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optimize<sp/>log(t_spec).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logarithmOfTheSpecifiedTimeOfFlight<sp/>=<sp/>std::log(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ab55d302f257841e2f4caf7e52f8955c4" kindref="member">normalizedTimeOfFlight</ref><sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>initial<sp/>guesses<sp/>for<sp/>abcissae<sp/>(x)<sp/>and<sp/>ordinates<sp/>(y).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>std::log(<sp/>0.5<sp/>),<sp/>x2<sp/>=<sp/>std::log(<sp/>1.5<sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>std::log(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a580304bcf54f4024c3ccf191ca5d2633" kindref="member">computeTimeOfFlight</ref>(<sp/>-0.5<sp/>)<sp/>)<sp/>-<sp/>logarithmOfTheSpecifiedTimeOfFlight;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/>std::log(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a580304bcf54f4024c3ccf191ca5d2633" kindref="member">computeTimeOfFlight</ref>(<sp/>0.5<sp/>)<sp/>)<sp/>-<sp/>logarithmOfTheSpecifiedTimeOfFlight;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>and<sp/>initialize<sp/>root-finding<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rootFindingError<sp/>=<sp/>1.0,<sp/>xNew<sp/>=<sp/>0.0,<sp/>yNew<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Root-finding<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>rootFindingError<sp/>&gt;<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a9fb8bc5f5b04c493d0b29f5ad4bd3565" kindref="member">convergenceTolerance</ref><sp/>)<sp/>&amp;&amp;<sp/>(y1<sp/>!=<sp/>y2)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(<sp/>iterator<sp/>&lt;<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1afbdf81b1a06e92fe4fe0198dd3ca6877" kindref="member">maximumNumberOfIterations</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator++;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>new<sp/>x-value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xNew<sp/>=<sp/>(<sp/>x1<sp/>*<sp/>y2<sp/>-<sp/>y1<sp/>*<sp/>x2<sp/>)<sp/>/<sp/>(<sp/>y2<sp/>-<sp/>y1<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>corresponding<sp/>y-value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yNew<sp/>=<sp/>std::log(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a580304bcf54f4024c3ccf191ca5d2633" kindref="member">computeTimeOfFlight</ref>(<sp/>std::exp(<sp/>xNew<sp/>)<sp/>-<sp/>1.0<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>logarithmOfTheSpecifiedTimeOfFlight;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>abcissae<sp/>and<sp/>ordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xNew;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>yNew;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>root-finding<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootFindingError<sp/>=<sp/>std::fabs(<sp/>x1<sp/>-<sp/>xNew<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>root-finder<sp/>has<sp/>converged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>==<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1afbdf81b1a06e92fe4fe0198dd3ca6877" kindref="member">maximumNumberOfIterations</ref><sp/>)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Multi-Revolution<sp/>Lambert<sp/>targeter<sp/>failed<sp/>to<sp/>converge<sp/>to<sp/>a<sp/>solution.<sp/>Reached<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>iterations:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1afbdf81b1a06e92fe4fe0198dd3ca6877" kindref="member">maximumNumberOfIterations</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recovering<sp/>x<sp/>parameter<sp/>and<sp/>returning<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xParameter<sp/>=<sp/>std::exp(<sp/>xNew<sp/>)<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xParameter;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a198b12eafe08a9a66900ee81fc215d20" kindref="member">ZeroRevolutionLambertTargeterIzzo::computeVelocities</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xParameter<sp/>)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>using<sp/>theory<sp/>from<sp/>PyKEP<sp/>toolbox<sp/>and<sp/>LambertTargeterIzzo<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>it<sp/>is<sp/>possible<sp/>to<sp/>retrieve<sp/>a<sp/>sensible<sp/>value<sp/>from<sp/>the<sp/>x-parameter<sp/>computed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>semi-major<sp/>axis<sp/>of<sp/>the<sp/>conic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>semiMajorAxis<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1addb8147855117bb086dd07f28b766f93" kindref="member">normalizedMinimumEnergySemiMajorAxis</ref></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>1.0<sp/>-<sp/>xParameter<sp/>*<sp/>xParameter<sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>etaParameter,<sp/>etaParameterSquared,<sp/>psiParameter;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>x<sp/>&lt;<sp/>1,<sp/>the<sp/>solution<sp/>is<sp/>an<sp/>ellipse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>xParameter<sp/>&lt;<sp/>1.0<sp/>)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alpha<sp/>parameter<sp/>in<sp/>Lagrange&apos;s<sp/>equation<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alphaParameter<sp/>=<sp/>2.0<sp/>*<sp/>std::acos(<sp/>xParameter<sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beta<sp/>parameter<sp/>in<sp/>Lagrange&apos;s<sp/>equation<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>betaParameter<sp/>=<sp/>2.0<sp/>*<sp/>std::asin(<sp/>std::sqrt(<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a7f243a99425c70154c051269459046c9" kindref="member">normalizedChord</ref><sp/>)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>2.0<sp/>*<sp/>semiMajorAxis<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>betaParameter<sp/>=<sp/>-betaParameter;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Psi<sp/>parameter<sp/>in<sp/>Izzo&apos;s<sp/>approach<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psiParameter<sp/>=<sp/>(<sp/>alphaParameter<sp/>-<sp/>betaParameter<sp/>)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eta<sp/>parameter<sp/>in<sp/>Izzo&apos;s<sp/>approach<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etaParameterSquared<sp/>=<sp/>2.0<sp/>*<sp/>semiMajorAxis<sp/>*<sp/>std::sin(<sp/>psiParameter<sp/>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>std::sin(<sp/>psiParameter<sp/>)<sp/>/<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etaParameter<sp/>=<sp/>std::sqrt(<sp/>etaParameterSquared<sp/>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>it<sp/>is<sp/>a<sp/>hyperbola.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alpha<sp/>parameter<sp/>in<sp/>Lagrange&apos;s<sp/>equation<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alphaParameter<sp/>=<sp/>2.0<sp/>*<sp/>boost::math::acosh(<sp/>xParameter<sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beta<sp/>parameter<sp/>in<sp/>Lagrange&apos;s<sp/>equation<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>betaParameter<sp/>=<sp/>2.0<sp/>*<sp/>boost::math::asinh<sp/>(</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref><sp/>-<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a7f243a99425c70154c051269459046c9" kindref="member">normalizedChord</ref><sp/>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>-2.0<sp/>*<sp/>semiMajorAxis<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>betaParameter<sp/>=<sp/>-betaParameter;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Psi<sp/>parameter<sp/>in<sp/>Izzo&apos;s<sp/>approach<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psiParameter<sp/>=<sp/>(alphaParameter<sp/>-<sp/>betaParameter<sp/>)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eta<sp/>parameter<sp/>in<sp/>Izzo&apos;s<sp/>approach<sp/>(no<sp/>explanation<sp/>available).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etaParameterSquared<sp/>=<sp/>-2.0<sp/>*<sp/>semiMajorAxis<sp/>*<sp/>std::sinh(<sp/>psiParameter<sp/>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>std::sinh(<sp/>psiParameter<sp/>)<sp/>/<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a5cde7bf679ff8e2099c5350dbbb103aa" kindref="member">normalizedSemiPerimeter</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etaParameter<sp/>=<sp/>std::sqrt(<sp/>etaParameterSquared<sp/>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>semi-latus<sp/>rectum,<sp/>p.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>semiLatusRectum<sp/>=<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a4133b5fc450c7c15ca666d0983fa923d" kindref="member">normalizedRadiusAtArrival</ref></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1addb8147855117bb086dd07f28b766f93" kindref="member">normalizedMinimumEnergySemiMajorAxis</ref></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>etaParameterSquared<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>std::sin(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ad122718ab907efaf27eb18f4f15baabc" kindref="member">transferAngle</ref><sp/>/<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>std::sin(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ad122718ab907efaf27eb18f4f15baabc" kindref="member">transferAngle</ref><sp/>/<sp/>2.0<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Velocity<sp/>components<sp/>at<sp/>departure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialVelocityAtDeparture<sp/>=</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>1.0<sp/>/<sp/>(<sp/>etaParameter<sp/>*<sp/>std::sqrt(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1addb8147855117bb086dd07f28b766f93" kindref="member">normalizedMinimumEnergySemiMajorAxis</ref><sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>2.0<sp/>*<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ab173c76a2cc122df13c2a43201508211" kindref="member">lambdaParameter</ref><sp/>*<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1addb8147855117bb086dd07f28b766f93" kindref="member">normalizedMinimumEnergySemiMajorAxis</ref></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ab173c76a2cc122df13c2a43201508211" kindref="member">lambdaParameter</ref><sp/>+<sp/>xParameter<sp/>*<sp/>etaParameter<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>transverseVelocityAtDeparture<sp/>=<sp/>std::sqrt(<sp/>semiLatusRectum<sp/>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Velocity<sp/>components<sp/>at<sp/>arrival.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>transverseVelocityAtArrival<sp/>=<sp/>transverseVelocityAtDeparture</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a4133b5fc450c7c15ca666d0983fa923d" kindref="member">normalizedRadiusAtArrival</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialVelocityAtArrival<sp/>=<sp/>(<sp/>transverseVelocityAtDeparture</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>transverseVelocityAtArrival<sp/>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>std::tan(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1ad122718ab907efaf27eb18f4f15baabc" kindref="member">transferAngle</ref><sp/>/<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>radialVelocityAtDeparture;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determining<sp/>inertial<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>radial<sp/>unit<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>radialUnitVectorAtDeparture<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a67d3a9e1b514c0ca2dad3f235c46941b" kindref="member">cartesianPositionAtDeparture</ref>.normalized(<sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>radialUnitVectorAtArrival<sp/>=<sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1ab710c1fabfd56361c457449c99efd5fa" kindref="member">cartesianPositionAtArrival</ref>.normalized(<sp/>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>plane<sp/>of<sp/>motion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>angularMomentumVector;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a8049243b12a78c7308869558583d6558" kindref="member">isLongway</ref><sp/>)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angularMomentumVector<sp/>=<sp/>radialUnitVectorAtArrival.cross(<sp/>radialUnitVectorAtDeparture<sp/>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angularMomentumVector<sp/>=<sp/>radialUnitVectorAtDeparture.cross(<sp/>radialUnitVectorAtArrival<sp/>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>normalized<sp/>angular<sp/>momentum<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>angularMomentumUnitVector<sp/>=<sp/>angularMomentumVector.normalized(<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>transverse<sp/>unit<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>transverseUnitVectorAtDeparture<sp/>=</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialUnitVectorAtDeparture.cross(<sp/>angularMomentumUnitVector<sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>transverseUnitVectorAtArrival<sp/>=</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialUnitVectorAtArrival.cross(<sp/>angularMomentumUnitVector<sp/>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reconstruct<sp/>non-dimensional<sp/>velocity<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a461475bd753a2ba590f1a403a8695794" kindref="member">cartesianVelocityAtDeparture</ref><sp/>&lt;&lt;<sp/>radialVelocityAtDeparture<sp/>*<sp/>radialUnitVectorAtDeparture</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>transverseVelocityAtDeparture<sp/>*<sp/>transverseUnitVectorAtDeparture;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a7260e16ff3a70f4971945d66ef08e682" kindref="member">cartesianVelocityAtArrival</ref><sp/>&lt;&lt;<sp/>radialVelocityAtArrival<sp/>*<sp/>radialUnitVectorAtArrival</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>transverseVelocityAtArrival<sp/>*<sp/>transverseUnitVectorAtArrival;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>to<sp/>dimensions<sp/>of<sp/>initial<sp/>problem<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a461475bd753a2ba590f1a403a8695794" kindref="member">cartesianVelocityAtDeparture</ref><sp/>*=<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a80c3e081aeae5eea4d18bf4ef4164f2d" kindref="member">velocityNormalizingValue</ref>;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtudat_1_1mission__segments_1_1LambertTargeter_1a7260e16ff3a70f4971945d66ef08e682" kindref="member">cartesianVelocityAtArrival</ref><sp/>*=<sp/><ref refid="classtudat_1_1mission__segments_1_1ZeroRevolutionLambertTargeterIzzo_1a80c3e081aeae5eea4d18bf4ef4164f2d" kindref="member">velocityNormalizingValue</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mission_segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tudat</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/mission_segments/zeroRevolutionLambertTargeterIzzo.cpp"/>
  </compounddef>
</doxygen>
