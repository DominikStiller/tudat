<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="sphericalShaping_8cpp" kind="file" language="C++">
    <compoundname>sphericalShaping.cpp</compoundname>
    <includes refid="celestialBodyConstants_8h" local="yes">tudat/astro/basic_astro/celestialBodyConstants.h</includes>
    <includes refid="timeType_8h" local="yes">tudat/basics/timeType.h</includes>
    <includes refid="coordinateConversions_8h" local="yes">tudat/math/basic/coordinateConversions.h</includes>
    <includes refid="sphericalShaping_8h" local="yes">tudat/astro/low_thrust/shape_based/sphericalShaping.h</includes>
    <incdepgraph>
      <node id="77">
        <label>tudat/math/interpolators/oneDimensionalInterpolator.h</label>
        <link refid="oneDimensionalInterpolator_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="45">
        <label>tudat/config.hpp</label>
      </node>
      <node id="36">
        <label>tudat/io/streamFilters.h</label>
        <link refid="streamFilters_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>tudat/math/interpolators/piecewiseConstantInterpolator.h</label>
        <link refid="piecewiseConstantInterpolator_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>system_error</label>
      </node>
      <node id="33">
        <label>iomanip</label>
      </node>
      <node id="27">
        <label>functional</label>
      </node>
      <node id="87">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="15">
        <label>limits</label>
      </node>
      <node id="75">
        <label>tudat/math/interpolators/linearInterpolator.h</label>
        <link refid="linearInterpolator_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>tudat/math/root_finders/rootFinder.h</label>
        <link refid="rootFinder_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/low_thrust/shape_based/sphericalShaping.cpp</label>
        <link refid="sphericalShaping_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>boost/iostreams/device/back_inserter.hpp</label>
      </node>
      <node id="25">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="18">
        <label>tudat/astro/low_thrust/shape_based/shapeBasedMethod.h</label>
        <link refid="shapeBasedMethod_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>boost/iostreams/copy.hpp</label>
      </node>
      <node id="42">
        <label>stdlib.h</label>
      </node>
      <node id="59">
        <label>tudat/basics/tudatTypeTraits.h</label>
        <link refid="tudatTypeTraits_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>tudat/math/interpolators/multiDimensionalInterpolator.h</label>
        <link refid="multiDimensionalInterpolator_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="71">
        <label>tudat/math/root_finders/newtonRaphson.h</label>
        <link refid="newtonRaphson_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>stdexcept</label>
      </node>
      <node id="7">
        <label>Eigen/Core</label>
      </node>
      <node id="34">
        <label>string</label>
      </node>
      <node id="31">
        <label>tudat/io/basicInputOutput.h</label>
        <link refid="basicInputOutput_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="49">
        <label>boost/algorithm/string/trim.hpp</label>
      </node>
      <node id="39">
        <label>boost/iostreams/stream_buffer.hpp</label>
      </node>
      <node id="2">
        <label>tudat/astro/basic_astro/celestialBodyConstants.h</label>
        <link refid="celestialBodyConstants_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tudat/math/quadrature/gaussianQuadrature.h</label>
        <link refid="gaussianQuadrature_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>boost/algorithm/string/trim_all.hpp</label>
      </node>
      <node id="56">
        <label>tudat/math/quadrature/trapezoidQuadrature.h</label>
        <link refid="trapezoidQuadrature_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>fstream</label>
      </node>
      <node id="64">
        <label>tudat/math/basic/function.h</label>
        <link refid="function_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>tudat/math/basic/basicMathematicsFunctions.h</label>
        <link refid="basicMathematicsFunctions_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>tudat/math/interpolators/hermiteCubicSplineInterpolator.h</label>
        <link refid="hermiteCubicSplineInterpolator_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>tudat/astro/low_thrust/shape_based/baseFunctionsSphericalShaping.h</label>
        <link refid="baseFunctionsSphericalShaping_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>tudat/math/root_finders/createRootFinder.h</label>
        <link refid="createRootFinder_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>tudat/math/interpolators/multiLinearInterpolator.h</label>
        <link refid="multiLinearInterpolator_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>tudat/math/quadrature/createNumericalQuadrature.h</label>
        <link refid="createNumericalQuadrature_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>boost/random/mersenne_twister.hpp</label>
      </node>
      <node id="44">
        <label>tudat/resource/resource.h</label>
      </node>
      <node id="19">
        <label>Eigen/Dense</label>
      </node>
      <node id="51">
        <label>boost/iostreams/device/file.hpp</label>
      </node>
      <node id="57">
        <label>tudat/basics/identityElements.h</label>
        <link refid="identityElements_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>tudat/astro/basic_astro/physicalConstants.h</label>
        <link refid="physicalConstants_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>tudat/math/root_finders/terminationConditions.h</label>
        <link refid="terminationConditions_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>tudat/math/interpolators/createInterpolator.h</label>
        <link refid="createInterpolator_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>tudat/math/root_finders/halleyRootFinder.h</label>
        <link refid="halleyRootFinder_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>tudat/math/quadrature/numericalQuadrature.h</label>
        <link refid="numericalQuadrature_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>tudat/math/interpolators/interpolator.h</label>
        <link refid="interpolator_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>tudat/math/basic/nearestNeighbourSearch.h</label>
        <link refid="nearestNeighbourSearch_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="37">
        <label>boost/iostreams/filter/line.hpp</label>
      </node>
      <node id="41">
        <label>tudat/paths.hpp</label>
        <link refid="paths_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="68">
        <label>tudat/math/root_finders/bisection.h</label>
        <link refid="bisection_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>tudat/basics/utilityMacros.h</label>
        <link refid="utilityMacros_8h_source"/>
      </node>
      <node id="62">
        <label>tudat/math/basic/basicFunction.h</label>
        <link refid="basicFunction_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>sstream</label>
      </node>
      <node id="72">
        <label>tudat/math/basic/convergenceException.h</label>
        <link refid="convergenceException_8h_source"/>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tudat/basics/timeType.h</label>
        <link refid="timeType_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>tudat/basics/utilities.h</label>
        <link refid="basics_2utilities_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tudat/basics/basicTypedefs.h</label>
        <link refid="basicTypedefs_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>tudat/astro/low_thrust/shape_based/compositeFunctionSphericalShaping.h</label>
        <link refid="compositeFunctionSphericalShaping_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>tudat/math/basic/coordinateConversions.h</label>
        <link refid="coordinateConversions_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>tudat/math/basic/mathematicalConstants.h</label>
        <link refid="mathematicalConstants_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>tudat/io/mapTextFileReader.h</label>
        <link refid="mapTextFileReader_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>boost/bind.hpp</label>
      </node>
      <node id="40">
        <label>boost/regex.hpp</label>
      </node>
      <node id="76">
        <label>boost/array.hpp</label>
      </node>
      <node id="20">
        <label>tudat/astro/low_thrust/lowThrustLeg.h</label>
        <link refid="lowThrustLeg_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>tudat/io/matrixTextFileReader.h</label>
        <link refid="matrixTextFileReader_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>tudat/math/interpolators/cubicSplineInterpolator.h</label>
        <link refid="cubicSplineInterpolator_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>tudat/math/root_finders/secantRootFinder.h</label>
        <link refid="secantRootFinder_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>type_traits</label>
      </node>
      <node id="23">
        <label>boost/make_shared.hpp</label>
      </node>
      <node id="29">
        <label>boost/multi_array.hpp</label>
      </node>
      <node id="53">
        <label>boost/iostreams/filtering_stream.hpp</label>
      </node>
      <node id="14">
        <label>complex</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="83">
        <label>tudat/math/interpolators/lagrangeInterpolator.h</label>
        <link refid="lagrangeInterpolator_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>tudat/astro/low_thrust/shape_based/sphericalShaping.h</label>
        <link refid="sphericalShaping_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>memory</label>
      </node>
      <node id="78">
        <label>tudat/math/interpolators/lookupScheme.h</label>
        <link refid="lookupScheme_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetudat">tudat</innernamespace>
    <innernamespace refid="namespacetudat_1_1shape__based__methods">tudat::shape_based_methods</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2010-2019,<sp/>Delft<sp/>University<sp/>of<sp/>Technology</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>All<sp/>rigths<sp/>reserved</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Tudat.<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>exclusively</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Modified<sp/>BSD<sp/>license.<sp/>You<sp/>should<sp/>have<sp/>received</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a<sp/>copy<sp/>of<sp/>the<sp/>license<sp/>with<sp/>this<sp/>file.<sp/>If<sp/>not,<sp/>please<sp/>or<sp/>visit:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>http://tudat.tudelft.nl/LICENSE.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/astro/basic_astro/celestialBodyConstants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/basics/timeType.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/math/basic/coordinateConversions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tudat/astro/low_thrust/shape_based/sphericalShaping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetudat" kindref="compound">tudat</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">shape_based_methods</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="classtudat_1_1shape__based__methods_1_1SphericalShaping_1a7efc7bfc205ff65a245746dee33fb99a" kindref="member">SphericalShaping::SphericalShaping</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector6d&amp;<sp/>initialState,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector6d&amp;<sp/>finalState,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>requiredTimeOfFlight,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>centralBodyGravitationalParameter,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfRevolutions,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initialValueFreeCoefficient,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;<sp/>root_finders::RootFinderSettings<sp/>&gt;<sp/>rootFinderSettings,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lowerBoundFreeCoefficient,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upperBoundFreeCoefficient<sp/>):</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeBasedMethod(<sp/>initialState,<sp/>finalState,<sp/>requiredTimeOfFlight<sp/>),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>centralBodyGravitationalParameter_(<sp/>centralBodyGravitationalParameter<sp/>),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>numberOfRevolutions_(<sp/>numberOfRevolutions<sp/>),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>initialValueFreeCoefficient_(<sp/>initialValueFreeCoefficient<sp/>),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>rootFinderSettings_(<sp/>rootFinderSettings<sp/>),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>lowerBoundFreeCoefficient_(<sp/>lowerBoundFreeCoefficient<sp/>),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>upperBoundFreeCoefficient_(<sp/>upperBoundFreeCoefficient<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>the<sp/>initial<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>stateAtDeparture_.segment(<sp/>0,<sp/>3<sp/>)<sp/>=<sp/>initialState.segment(<sp/>0,<sp/>3<sp/>)<sp/>/<sp/>physical_constants::ASTRONOMICAL_UNIT;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>stateAtDeparture_.segment(<sp/>3,<sp/>3<sp/>)<sp/>=<sp/>initialState.segment(<sp/>3,<sp/>3<sp/>)<sp/>*<sp/>physical_constants::JULIAN_YEAR<sp/>/<sp/>physical_constants::ASTRONOMICAL_UNIT;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>the<sp/>final<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>stateAtArrival_.segment(<sp/>0,<sp/>3<sp/>)<sp/>=<sp/>finalState.segment(<sp/>0,<sp/>3<sp/>)<sp/>/<sp/>physical_constants::ASTRONOMICAL_UNIT;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>stateAtArrival_.segment(<sp/>3,<sp/>3<sp/>)<sp/>=<sp/>finalState.segment(<sp/>3,<sp/>3<sp/>)<sp/>*<sp/>physical_constants::JULIAN_YEAR<sp/>/<sp/>physical_constants::ASTRONOMICAL_UNIT;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>the<sp/>gravitational<sp/>parameter<sp/>of<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>centralBodyGravitationalParameter_<sp/>=<sp/>centralBodyGravitationalParameter<sp/>*<sp/>std::pow(<sp/>physical_constants::JULIAN_YEAR,<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>std::pow(<sp/>physical_constants::ASTRONOMICAL_UNIT,<sp/>3.0<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>initial<sp/>state<sp/>in<sp/>spherical<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>initialStateSphericalCoordinates_<sp/>=<sp/>coordinate_conversions::convertCartesianToSphericalState(<sp/>stateAtDeparture_<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>final<sp/>state<sp/>in<sp/>spherical<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>finalStateSphericalCoordinates_<sp/>=<sp/>coordinate_conversions::convertCartesianToSphericalState(<sp/>stateAtArrival_<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>initialStateSphericalCoordinates_(<sp/>1<sp/>)<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialStateSphericalCoordinates_(<sp/>1<sp/>)<sp/>+=<sp/>2.0<sp/>*<sp/>mathematical_constants::PI;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>finalStateSphericalCoordinates_(<sp/>1<sp/>)<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalStateSphericalCoordinates_(<sp/>1<sp/>)<sp/>+=<sp/>2.0<sp/>*<sp/>mathematical_constants::PI;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>initial<sp/>value<sp/>of<sp/>the<sp/>azimuth<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>initialAzimuthAngle_<sp/>=<sp/>initialStateSphericalCoordinates_[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>final<sp/>value<sp/>of<sp/>the<sp/>azimuth<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>finalStateSphericalCoordinates_(<sp/>1<sp/>)<sp/>-<sp/>initialStateSphericalCoordinates_(<sp/>1<sp/>)<sp/>)<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalAzimuthAngle_<sp/>=<sp/>finalStateSphericalCoordinates_(<sp/>1<sp/>)<sp/>+<sp/>2.0<sp/>*<sp/>mathematical_constants::PI<sp/>*<sp/>(<sp/>numberOfRevolutions_<sp/>+<sp/>1.0<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalAzimuthAngle_<sp/>=<sp/>finalStateSphericalCoordinates_(<sp/>1<sp/>)<sp/>+<sp/>2.0<sp/>*<sp/>mathematical_constants::PI<sp/>*<sp/>(<sp/>numberOfRevolutions_<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>initial<sp/>and<sp/>final<sp/>values<sp/>of<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>azimuth<sp/>angle<sp/>w.r.t.<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initialDerivativeAzimuthAngle<sp/>=<sp/>initialStateSphericalCoordinates_[<sp/>4<sp/>]</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>initialStateSphericalCoordinates_[<sp/>0<sp/>]<sp/>*<sp/>std::cos(<sp/>initialStateSphericalCoordinates_[<sp/>2<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>finalDerivativeAzimuthAngle<sp/>=<sp/>finalStateSphericalCoordinates_[<sp/>4<sp/>]</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>finalStateSphericalCoordinates_[<sp/>0<sp/>]<sp/>*<sp/>std::cos(<sp/>finalStateSphericalCoordinates_[<sp/>2<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>initial<sp/>state<sp/>parametrized<sp/>by<sp/>azimuth<sp/>angle<sp/>theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>initialStateParametrizedByAzimuthAngle_<sp/>=<sp/>(<sp/>Eigen::Vector6d()<sp/>&lt;&lt;<sp/>initialStateSphericalCoordinates_[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialStateSphericalCoordinates_[<sp/>1<sp/>],</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialStateSphericalCoordinates_[<sp/>2<sp/>],</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialStateSphericalCoordinates_[<sp/>3<sp/>]<sp/>/<sp/>initialDerivativeAzimuthAngle,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialStateSphericalCoordinates_[<sp/>4<sp/>]<sp/>/<sp/>initialDerivativeAzimuthAngle,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialStateSphericalCoordinates_[<sp/>5<sp/>]<sp/>/<sp/>initialDerivativeAzimuthAngle<sp/>).finished();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>final<sp/>state<sp/>parametrized<sp/>by<sp/>azimuth<sp/>angle<sp/>theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>finalStateParametrizedByAzimuthAngle_<sp/>=<sp/>(<sp/>Eigen::Vector6d()<sp/>&lt;&lt;<sp/>finalStateSphericalCoordinates_[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalStateSphericalCoordinates_[<sp/>1<sp/>],</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalStateSphericalCoordinates_[<sp/>2<sp/>],</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalStateSphericalCoordinates_[<sp/>3<sp/>]<sp/>/<sp/>finalDerivativeAzimuthAngle,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalStateSphericalCoordinates_[<sp/>4<sp/>]<sp/>/<sp/>finalDerivativeAzimuthAngle,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalStateSphericalCoordinates_[<sp/>5<sp/>]<sp/>/<sp/>finalDerivativeAzimuthAngle<sp/>).finished();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>coefficients<sp/>for<sp/>radial<sp/>distance<sp/>and<sp/>elevation<sp/>angle<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>coefficientsRadialDistanceFunction_.resize(<sp/>7<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>7<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficientsRadialDistanceFunction_[<sp/>i<sp/>]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>coefficientsElevationAngleFunction_.resize(<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficientsElevationAngleFunction_[<sp/>i<sp/>]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>coefficients<sp/>for<sp/>radial<sp/>distance<sp/>and<sp/>elevation<sp/>angle<sp/>composite<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>radialDistanceCompositeFunction_<sp/>=<sp/>std::make_shared&lt;<sp/>CompositeRadialFunctionSphericalShaping<sp/>&gt;(<sp/>coefficientsRadialDistanceFunction_<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>elevationAngleCompositeFunction_<sp/>=<sp/>std::make_shared&lt;<sp/>CompositeElevationFunctionSphericalShaping<sp/>&gt;(<sp/>coefficientsElevationAngleFunction_<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>settings<sp/>for<sp/>numerical<sp/>quadrature,<sp/>to<sp/>be<sp/>used<sp/>to<sp/>compute<sp/>time<sp/>of<sp/>flight<sp/>and<sp/>final<sp/>deltaV.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>quadratureSettings_<sp/>=<sp/>std::make_shared&lt;<sp/>numerical_quadrature::GaussianQuadratureSettings<sp/>&lt;<sp/>double<sp/>&gt;<sp/>&gt;(<sp/>initialAzimuthAngle_,<sp/>16<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>on<sp/>the<sp/>free<sp/>coefficient<sp/>value<sp/>until<sp/>the<sp/>time<sp/>of<sp/>flight<sp/>matches<sp/>its<sp/>required<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>iterateToMatchRequiredTimeOfFlight(<sp/>rootFinderSettings_,<sp/>lowerBoundFreeCoefficient_,<sp/>upperBoundFreeCoefficient_,<sp/>initialValueFreeCoefficient_<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>initial<sp/>step<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initialStepSize<sp/>=<sp/>86400.0;</highlight><highlight class="comment">//integratorSettings-&gt;initialTimeStep_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Warning,<sp/>initialStepSize<sp/>set<sp/>to<sp/>arbitrary<sp/>value&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>of<sp/>azimuth<sp/>angles<sp/>at<sp/>which<sp/>the<sp/>time<sp/>should<sp/>be<sp/>computed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>azimuthAnglesToComputeAssociatedEpochs<sp/>=</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd::LinSpaced(<sp/>std::ceil(<sp/>computeNormalizedTimeOfFlight()<sp/>*<sp/>physical_constants::JULIAN_YEAR<sp/>/<sp/>initialStepSize<sp/>),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialAzimuthAngle_,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>dataToInterpolate;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>azimuthAnglesToComputeAssociatedEpochs.size()<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataToInterpolate[<sp/>computeCurrentTimeFromAzimuthAngle(<sp/>azimuthAnglesToComputeAssociatedEpochs[<sp/>i<sp/>]<sp/>)<sp/>*<sp/>physical_constants::JULIAN_YEAR<sp/>]</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>azimuthAnglesToComputeAssociatedEpochs[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>interpolator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>interpolators::InterpolatorSettings<sp/>&gt;<sp/>interpolatorSettings<sp/>=</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;<sp/>interpolators::LagrangeInterpolatorSettings<sp/>&gt;(<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>interpolator_<sp/>=<sp/>interpolators::createOneDimensionalInterpolator(<sp/>dataToInterpolate,<sp/>interpolatorSettings<sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::convertTimeToIndependentVariable(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>interpolator_-&gt;interpolate(<sp/>time<sp/>);<sp/>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::convertIndependentVariableToTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>independentVariable<sp/>)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>time<sp/>function<sp/>w.r.t<sp/>the<sp/>azimuth<sp/>angle<sp/>theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>derivativeTimeFunction<sp/>=<sp/>[<sp/>=<sp/>]<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalarFunctionTimeEquation<sp/>=<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>trajectory<sp/>is<sp/>feasible,<sp/>ie<sp/>curved<sp/>toward<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scalarFunctionTimeEquation<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;Error,<sp/>trajectory<sp/>not<sp/>curved<sp/>toward<sp/>the<sp/>central<sp/>body,<sp/>and<sp/>thus<sp/>not<sp/>feasible.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>),<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>centralBodyGravitationalParameter_<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>numerical<sp/>quadrature<sp/>from<sp/>quadrature<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>numerical_quadrature::NumericalQuadrature&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>quadrature<sp/>=</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerical_quadrature::createQuadrature(<sp/>derivativeTimeFunction,<sp/>quadratureSettings_,<sp/>independentVariable<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>quadrature-&gt;getQuadrature(<sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">Eigen::MatrixXd<sp/>SphericalShaping::computeInverseMatrixBoundaryConditions(<sp/>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>matrixBoundaryConditions<sp/>=<sp/>Eigen::MatrixXd::Zero(<sp/>10,<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>6<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>0,<sp/>i<sp/>)<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionCurrentValue(<sp/>index,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>1,<sp/>i<sp/>)<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionCurrentValue(<sp/>index,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>2,<sp/>i<sp/>)<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionFirstDerivative(<sp/>index,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>3,<sp/>i<sp/>)<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionFirstDerivative(<sp/>index,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>4,<sp/>i<sp/>)<sp/>=<sp/>-<sp/>std::pow(<sp/>initialStateSphericalCoordinates_[<sp/>0<sp/>],<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionSecondDerivative(<sp/>index,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>5,<sp/>i<sp/>)<sp/>=<sp/>-<sp/>std::pow(<sp/>finalStateSphericalCoordinates_[<sp/>0<sp/>],<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionSecondDerivative(<sp/>index,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>value<sp/>of<sp/>variable<sp/>alpha<sp/>at<sp/>initial<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initialValueAlpha<sp/>=<sp/>computeInitialAlphaValue();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>value<sp/>of<sp/>variable<sp/>alpha<sp/>at<sp/>final<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>finalValueAlpha<sp/>=<sp/>computeFinalAlphaValue();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>4,<sp/>i<sp/>+<sp/>6<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialValueAlpha<sp/>*<sp/>elevationAngleCompositeFunction_-&gt;getComponentFunctionSecondDerivative(<sp/>i,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>5,<sp/>i<sp/>+<sp/>6<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalValueAlpha<sp/>*<sp/>elevationAngleCompositeFunction_-&gt;getComponentFunctionSecondDerivative(<sp/>i,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>6,<sp/>i<sp/>+<sp/>6<sp/>)<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>7,<sp/>i<sp/>+<sp/>6<sp/>)<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;getComponentFunctionCurrentValue(<sp/>i,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>8,<sp/>i<sp/>+<sp/>6<sp/>)<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;getComponentFunctionFirstDerivative(<sp/>i,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixBoundaryConditions(<sp/>9,<sp/>i<sp/>+<sp/>6<sp/>)<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;getComponentFunctionFirstDerivative(<sp/>i,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>and<sp/>return<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>boundary<sp/>conditions<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrixBoundaryConditions.inverse();</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeInitialAlphaValue(<sp/>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<sp/>(<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>3<sp/>]<sp/>*<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>5<sp/>]<sp/>/<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>std::pow(<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>5<sp/>]<sp/>/<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>],<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>2<sp/>]<sp/>),<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeFinalAlphaValue(<sp/>)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<sp/>(<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>3<sp/>]<sp/>*<sp/><sp/>finalStateParametrizedByAzimuthAngle_[<sp/>5<sp/>]<sp/>/<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>std::pow(<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>5<sp/>]<sp/>/<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>],<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>2<sp/>]<sp/>),<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeInitialValueBoundariesConstant(<sp/>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance<sp/>=<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elevationAngle<sp/>=<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeRadialDistance<sp/>=<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeElevationAngle<sp/>=<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>5<sp/>]<sp/>/<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeOfTimeWrtAzimuthAngle<sp/>=<sp/>(<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>]<sp/>*<sp/>std::cos(<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>2<sp/>]<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>initialStateSphericalCoordinates_[<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<sp/>centralBodyGravitationalParameter_<sp/>*<sp/>std::pow(<sp/>derivativeOfTimeWrtAzimuthAngle,<sp/>2.0<sp/>)<sp/>/<sp/>std::pow(<sp/>radialDistance,<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>2.0<sp/>*<sp/>std::pow(<sp/>derivativeRadialDistance,<sp/>2.0<sp/>)<sp/>/<sp/>radialDistance</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>radialDistance<sp/>*<sp/>(<sp/>std::pow(<sp/>derivativeElevationAngle,<sp/>2.0<sp/>)<sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>elevationAngle<sp/>),<sp/>2.0<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>derivativeRadialDistance<sp/>*<sp/>derivativeElevationAngle<sp/>*<sp/>(<sp/>std::sin(<sp/>elevationAngle<sp/>)<sp/>*<sp/>std::cos(<sp/>elevationAngle<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>std::pow(<sp/>derivativeElevationAngle,<sp/>2.0<sp/>)<sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>elevationAngle<sp/>),<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeFinalValueBoundariesConstant(<sp/>)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance<sp/>=<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elevationAngle<sp/>=<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeRadialDistance<sp/>=<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeElevationAngle<sp/>=<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>5<sp/>]<sp/>/<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeOfTimeWrtAzimuthAngle<sp/>=<sp/>(<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>]<sp/>*<sp/>std::cos(<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>2<sp/>]<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>finalStateSphericalCoordinates_[<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<sp/>centralBodyGravitationalParameter_<sp/>*<sp/>std::pow(<sp/>derivativeOfTimeWrtAzimuthAngle,<sp/>2.0<sp/>)<sp/>/<sp/>std::pow(<sp/>radialDistance,<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>2.0<sp/>*<sp/>std::pow(<sp/>derivativeRadialDistance,<sp/>2.0<sp/>)<sp/>/<sp/>radialDistance</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>radialDistance<sp/>*<sp/>(<sp/>std::pow(<sp/>derivativeElevationAngle,<sp/>2.0<sp/>)<sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>elevationAngle<sp/>),<sp/>2.0<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>derivativeRadialDistance<sp/>*<sp/>derivativeElevationAngle<sp/>*<sp/>(<sp/>std::sin(<sp/>elevationAngle<sp/>)<sp/>*<sp/>std::cos(<sp/>elevationAngle<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>std::pow(<sp/>derivativeElevationAngle,<sp/>2.0<sp/>)<sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>elevationAngle<sp/>),<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SphericalShaping::satisfyBoundaryConditions(<sp/>)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>vectorBoundaryValues;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues.resize(<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>0<sp/>]<sp/>=<sp/>1.0<sp/>/<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>1<sp/>]<sp/>=<sp/>1.0<sp/>/<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>2<sp/>]<sp/>=<sp/>-<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>3<sp/>]<sp/>/<sp/>std::pow(<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>],<sp/>2.0<sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>3<sp/>]<sp/>=<sp/>-<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>3<sp/>]<sp/>/<sp/>std::pow(<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>],<sp/>2.0<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>4<sp/>]<sp/>=<sp/>computeInitialValueBoundariesConstant()</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>2.0<sp/>*<sp/>std::pow(<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>3<sp/>],<sp/>2.0<sp/>)<sp/>/<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>5<sp/>]<sp/>=<sp/>computeFinalValueBoundariesConstant()</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>2.0<sp/>*<sp/>std::pow(<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>3<sp/>],<sp/>2.0<sp/>)<sp/>/<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>6<sp/>]<sp/>=<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>7<sp/>]<sp/>=<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>8<sp/>]<sp/>=<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>5<sp/>]<sp/>/<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorBoundaryValues[<sp/>9<sp/>]<sp/>=<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>5<sp/>]<sp/>/<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>vectorSecondComponentContribution;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution.resize(<sp/>10.0<sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>0<sp/>]<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>1<sp/>]<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionCurrentValue(<sp/>2,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>2<sp/>]<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionFirstDerivative(<sp/>2,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>3<sp/>]<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionFirstDerivative(<sp/>2,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>4<sp/>]<sp/>=<sp/>-<sp/>std::pow(<sp/>initialStateParametrizedByAzimuthAngle_[<sp/>0<sp/>],<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionSecondDerivative(<sp/>2,<sp/>initialAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>5<sp/>]<sp/>=<sp/>-<sp/>std::pow(<sp/>finalStateParametrizedByAzimuthAngle_[<sp/>0<sp/>],<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>radialDistanceCompositeFunction_-&gt;getComponentFunctionSecondDerivative(<sp/>2,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>6<sp/>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>7<sp/>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>8<sp/>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution[<sp/>9<sp/>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorSecondComponentContribution<sp/>*=<sp/>initialValueFreeCoefficient_;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>inverseMatrixBoundaryConditions_<sp/>=<sp/>computeInverseMatrixBoundaryConditions();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>compositeFunctionCoefficients<sp/>=<sp/>inverseMatrixBoundaryConditions_<sp/>*<sp/>(<sp/>vectorBoundaryValues<sp/>-<sp/>vectorSecondComponentContribution<sp/>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>6<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficientsRadialDistanceFunction_(<sp/>i<sp/>)<sp/>=<sp/>compositeFunctionCoefficients(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficientsRadialDistanceFunction_(<sp/>i<sp/>+<sp/>1<sp/>)<sp/>=<sp/>compositeFunctionCoefficients(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>coefficientsRadialDistanceFunction_(<sp/>2<sp/>)<sp/>=<sp/>initialValueFreeCoefficient_;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficientsElevationAngleFunction_(<sp/>i<sp/>)<sp/>=<sp/>compositeFunctionCoefficients(<sp/>i<sp/>+<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>radialDistanceCompositeFunction_-&gt;resetCompositeFunctionCoefficients(<sp/>coefficientsRadialDistanceFunction_<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>elevationAngleCompositeFunction_-&gt;resetCompositeFunctionCoefficients(<sp/>coefficientsElevationAngleFunction_<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeScalarFunctionTimeEquation(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialFunctionValue<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeRadialFunction<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondDerivativeRadialFunction<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionSecondDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elevationFunctionValue<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeElevationFunction<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondDerivativeElevationFunction<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunctionSecondDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<sp/>secondDerivativeRadialFunction<sp/>+<sp/>2.0<sp/>*<sp/>std::pow(<sp/>firstDerivativeRadialFunction,<sp/>2.0<sp/>)<sp/>/<sp/>radialFunctionValue</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>firstDerivativeRadialFunction<sp/>*<sp/>firstDerivativeElevationFunction</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>secondDerivativeElevationFunction<sp/>-<sp/>std::sin(<sp/>elevationFunctionValue<sp/>)<sp/>*<sp/>std::cos(<sp/>elevationFunctionValue<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>std::pow(<sp/>firstDerivativeElevationFunction,<sp/>2.0<sp/>)<sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>elevationFunctionValue<sp/>),<sp/>2.0<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>radialFunctionValue<sp/>*<sp/>(<sp/>std::pow(<sp/>firstDerivativeElevationFunction,<sp/>2.0<sp/>)<sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>elevationFunctionValue<sp/>),<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeDerivativeScalarFunctionTimeEquation(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialFunctionValue<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeRadialFunction<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondDerivativeRadialFunction<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionSecondDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thirdDerivativeRadialFunction<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionThirdDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elevationFunctionValue<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeElevationFunction<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondDerivativeElevationFunction<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunctionSecondDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thirdDerivativeElevationFunction<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunctionThirdDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>constants<sp/>F1,<sp/>F2,<sp/>F3<sp/>and<sp/>F4<sp/>as<sp/>proposed<sp/>in...<sp/>(ADD<sp/>REFERENCE).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F1<sp/>=<sp/>std::pow(<sp/>firstDerivativeElevationFunction,<sp/>2.0<sp/>)<sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>elevationFunctionValue<sp/>),<sp/>2.0<sp/>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F2<sp/>=<sp/>secondDerivativeElevationFunction<sp/>-<sp/>std::sin(<sp/>2.0<sp/>*<sp/>elevationFunctionValue<sp/>)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F3<sp/>=<sp/>std::cos(<sp/>2.0<sp/>*<sp/>elevationFunctionValue<sp/>)<sp/>+<sp/>2.0<sp/>*<sp/>std::pow(<sp/>firstDerivativeElevationFunction,<sp/>2.0<sp/>)<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F4<sp/>=<sp/>2.0<sp/>*<sp/>secondDerivativeElevationFunction<sp/>-<sp/>std::sin(<sp/>2.0<sp/>*<sp/>elevationFunctionValue<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>F1<sp/>*<sp/>firstDerivativeRadialFunction<sp/>-<sp/>thirdDerivativeRadialFunction</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>2.0<sp/>*<sp/>std::pow(<sp/>firstDerivativeRadialFunction,<sp/>3.0<sp/>)<sp/>/<sp/>std::pow(<sp/>radialFunctionValue,<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>4.0<sp/>*<sp/>firstDerivativeRadialFunction<sp/>*<sp/>secondDerivativeRadialFunction<sp/>/<sp/>radialFunctionValue</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>F4<sp/>*<sp/>firstDerivativeElevationFunction<sp/>*<sp/>radialFunctionValue</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>2.0<sp/>*<sp/>firstDerivativeElevationFunction<sp/>*<sp/>firstDerivativeRadialFunction</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>thirdDerivativeElevationFunction<sp/>-<sp/>firstDerivativeElevationFunction<sp/>*<sp/>std::cos(<sp/>2.0<sp/>*<sp/>elevationFunctionValue<sp/>)<sp/>)<sp/>/<sp/>F3</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>F2<sp/>*<sp/>firstDerivativeElevationFunction<sp/>*<sp/>secondDerivativeRadialFunction<sp/>/<sp/>F1</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>F2<sp/>*<sp/>firstDerivativeRadialFunction<sp/>*<sp/>secondDerivativeElevationFunction<sp/>/<sp/>F1</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>4.0<sp/>*<sp/>F4<sp/>*<sp/>F2<sp/>*<sp/>std::pow(<sp/>firstDerivativeElevationFunction,<sp/>2.0<sp/>)<sp/>*<sp/>firstDerivativeRadialFunction<sp/>/<sp/>std::pow(<sp/>F3,<sp/>2.0<sp/>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeNormalizedTimeOfFlight()</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>time<sp/>function<sp/>w.r.t<sp/>the<sp/>azimuth<sp/>angle<sp/>theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>derivativeTimeFunction<sp/>=<sp/>[<sp/>=<sp/>]<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>){</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalarFunctionTimeEquation<sp/>=<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>trajectory<sp/>is<sp/>feasible,<sp/>ie<sp/>curved<sp/>toward<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scalarFunctionTimeEquation<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;Error,<sp/>trajectory<sp/>not<sp/>curved<sp/>toward<sp/>the<sp/>central<sp/>body,<sp/>and<sp/>thus<sp/>not<sp/>feasible.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>),<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>centralBodyGravitationalParameter_<sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>numerical<sp/>quadrature<sp/>from<sp/>quadrature<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>numerical_quadrature::NumericalQuadrature&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>quadrature<sp/>=</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerical_quadrature::createQuadrature(<sp/>derivativeTimeFunction,<sp/>quadratureSettings_,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quadrature-&gt;getQuadrature(<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeCurrentTimeFromAzimuthAngle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>time<sp/>function<sp/>w.r.t<sp/>the<sp/>azimuth<sp/>angle<sp/>theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>derivativeTimeFunction<sp/>=<sp/>[<sp/>=<sp/>]<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>){</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalarFunctionTimeEquation<sp/>=<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>trajectory<sp/>is<sp/>feasible,<sp/>ie<sp/>curved<sp/>toward<sp/>the<sp/>central<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scalarFunctionTimeEquation<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;Error,<sp/>trajectory<sp/>not<sp/>curved<sp/>toward<sp/>the<sp/>central<sp/>body,<sp/>and<sp/>thus<sp/>not<sp/>feasible.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>),<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>centralBodyGravitationalParameter_<sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>numerical<sp/>quadrature<sp/>from<sp/>quadrature<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>numerical_quadrature::NumericalQuadrature&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>quadrature<sp/>=</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerical_quadrature::createQuadrature(<sp/>derivativeTimeFunction,<sp/>quadratureSettings_,<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quadrature-&gt;getQuadrature(<sp/>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SphericalShaping::iterateToMatchRequiredTimeOfFlight(<sp/>std::shared_ptr&lt;<sp/>root_finders::RootFinderSettings<sp/>&gt;<sp/>rootFinderSettings,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lowerBound,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upperBound,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initialGuess<sp/>)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>structure<sp/>updating<sp/>the<sp/>time<sp/>of<sp/>flight<sp/>from<sp/>the<sp/>free<sp/>coefficient<sp/>value,<sp/>while<sp/>still<sp/>satisfying<sp/>the<sp/>boundary<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>void<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>resetFreeCoefficientFunction<sp/>=<sp/>std::bind(<sp/>&amp;SphericalShaping::resetValueFreeCoefficient,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>void(<sp/>)<sp/>&gt;<sp/>satisfyBoundaryConditionsFunction<sp/>=<sp/>std::bind(<sp/>&amp;SphericalShaping::satisfyBoundaryConditions,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double<sp/>(<sp/>)<sp/>&gt;<sp/><sp/>computeTOFfunction<sp/>=<sp/>std::bind(<sp/>&amp;SphericalShaping::computeNormalizedTimeOfFlight,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double<sp/>(<sp/>)<sp/>&gt;<sp/>getRequiredTOFfunction<sp/>=<sp/>std::bind(<sp/>&amp;SphericalShaping::getNormalizedRequiredTimeOfFlight,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>basic_mathematics::Function&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>timeOfFlightFunction<sp/>=</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;<sp/>SphericalShaping::TimeOfFlightFunction<sp/>&gt;(<sp/>resetFreeCoefficientFunction,<sp/>satisfyBoundaryConditionsFunction,<sp/>computeTOFfunction,<sp/>getRequiredTOFfunction<sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>root<sp/>finder<sp/>from<sp/>root<sp/>finder<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>root_finders::RootFinder&lt;<sp/>double<sp/>&gt;<sp/>&gt;<sp/>rootFinder<sp/>=<sp/>root_finders::createRootFinder(<sp/>rootFinderSettings,<sp/>lowerBound,<sp/>upperBound,<sp/>initialGuess<sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>to<sp/>find<sp/>the<sp/>free<sp/>coefficient<sp/>value<sp/>that<sp/>matches<sp/>the<sp/>required<sp/>time<sp/>of<sp/>flight.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>updatedFreeCoefficient<sp/>=<sp/>rootFinder-&gt;execute(<sp/>timeOfFlightFunction,<sp/>initialGuess<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>resetValueFreeCoefficient(<sp/>updatedFreeCoefficient<sp/>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeFirstDerivativeAzimuthAngleWrtTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>scalar<sp/>function<sp/>time<sp/>equation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalarFunctionTimeEquation<sp/>=<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>current<sp/>radial<sp/>distance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>and<sp/>return<sp/>the<sp/>first<sp/>derivative<sp/>of<sp/>the<sp/>azimuth<sp/>angle<sp/>w.r.t.<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<sp/>centralBodyGravitationalParameter_<sp/>/<sp/>(<sp/>scalarFunctionTimeEquation<sp/>*<sp/>std::pow(<sp/>radialDistance,<sp/>2.0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeSecondDerivativeAzimuthAngleWrtTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>first<sp/>derivative<sp/>azimuth<sp/>angle<sp/>w.r.t.<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeAzimuthAngle<sp/>=<sp/>computeFirstDerivativeAzimuthAngleWrtTime(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>scalar<sp/>function<sp/>of<sp/>the<sp/>time<sp/>equation,<sp/>and<sp/>its<sp/>derivative<sp/>w.r.t.<sp/>azimuth<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalarFunctionTimeEquation<sp/>=<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeScalarFunctionTimeEquation<sp/>=<sp/>computeDerivativeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>radial<sp/>distance,<sp/>and<sp/>its<sp/>derivative<sp/>w.r.t.<sp/>azimuth<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeRadialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<sp/>std::pow(<sp/>firstDerivativeAzimuthAngle,<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>derivativeScalarFunctionTimeEquation<sp/>/<sp/>(<sp/>2.0<sp/>*<sp/>scalarFunctionTimeEquation<sp/>)<sp/>+<sp/>firstDerivativeRadialDistance<sp/>/<sp/>radialDistance<sp/>);</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">Eigen::Vector6d<sp/>SphericalShaping::computeStateVectorInSphericalCoordinates(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector6d<sp/>currentSphericalState;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>currentSphericalState.segment(<sp/>0,<sp/>3<sp/>)<sp/>=<sp/>(<sp/>Eigen::Vector3d()<sp/>&lt;&lt;<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>),</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentAzimuthAngle,<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>)<sp/>).finished();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>first<sp/>derivative<sp/>of<sp/>the<sp/>azimuth<sp/>angle<sp/>w.r.t.<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeAzimuthAngle<sp/>=<sp/>computeFirstDerivativeAzimuthAngleWrtTime(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>and<sp/>return<sp/>current<sp/>velocity<sp/>vector<sp/>in<sp/>spherical<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>currentSphericalState.segment(<sp/>3,<sp/>3<sp/>)<sp/>=<sp/>derivativeAzimuthAngle<sp/>*<sp/>computeVelocityVectorParametrizedByAzimuthAngle(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentSphericalState;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal">Eigen::Vector6d<sp/>SphericalShaping::computeCurrentStateVector(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector6d<sp/>normalizedStateVector<sp/>=<sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinate_conversions::convertSphericalToCartesianState(<sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeStateVectorInSphericalCoordinates(<sp/>currentAzimuthAngle<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector6d<sp/>dimensionalStateVector;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensionalStateVector.segment(<sp/>0,<sp/>3<sp/>)<sp/>=<sp/>normalizedStateVector.segment(<sp/>0,<sp/>3<sp/>)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>physical_constants::ASTRONOMICAL_UNIT;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>dimensionalStateVector.segment(<sp/>3,<sp/>3<sp/>)<sp/>=<sp/>normalizedStateVector.segment(<sp/>3,<sp/>3<sp/>)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>physical_constants::ASTRONOMICAL_UNIT<sp/>/<sp/>physical_constants::JULIAN_YEAR;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dimensionalStateVector;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">Eigen::Vector3d<sp/>SphericalShaping::computeVelocityVectorParametrizedByAzimuthAngle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>current<sp/>radial<sp/>distance<sp/>and<sp/>elevation<sp/>angle,<sp/>as<sp/>well<sp/>as<sp/>their<sp/>derivatives<sp/>w.r.t.<sp/>azimuth<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeRadialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elevationAngle<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>derivativeElevationAngle<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>and<sp/>return<sp/>velocity<sp/>vector<sp/>parametrized<sp/>by<sp/>azimuth<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>Eigen::Vector3d()<sp/>&lt;&lt;<sp/>derivativeRadialDistance,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialDistance<sp/>*<sp/>std::cos(<sp/>elevationAngle<sp/>),</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialDistance<sp/>*<sp/>derivativeElevationAngle<sp/>).finished();</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal">Eigen::Vector3d<sp/>SphericalShaping::computeThrustAccelerationVectorParametrizedByAzimuthAngle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>spherical<sp/>coordinates<sp/>and<sp/>their<sp/>derivatives<sp/>w.r.t.<sp/>to<sp/>the<sp/>azimuth<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeRadialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondDerivativeRadialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunctionSecondDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elevationAngle<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeElevationAngle<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunctionFirstDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondDerivativeElevationAngle<sp/>=<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunctionSecondDerivative(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>and<sp/>return<sp/>acceleration<sp/>vector<sp/>parametrized<sp/>by<sp/>the<sp/>azimuth<sp/>angle<sp/>theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>accelerationParametrizedByAzimuthAngle;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>accelerationParametrizedByAzimuthAngle[<sp/>0<sp/>]<sp/>=<sp/>secondDerivativeRadialDistance</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>radialDistance<sp/>*<sp/>(<sp/>std::pow(<sp/>firstDerivativeElevationAngle,<sp/>2.0<sp/>)<sp/>+<sp/>std::pow(<sp/>std::cos(<sp/>elevationAngle<sp/>),<sp/>2.0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>accelerationParametrizedByAzimuthAngle[<sp/>1<sp/>]<sp/>=<sp/>2.0<sp/>*<sp/>firstDerivativeRadialDistance<sp/>*<sp/>std::cos(<sp/>elevationAngle<sp/>)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>2.0<sp/>*<sp/>radialDistance<sp/>*<sp/>firstDerivativeElevationAngle<sp/>*<sp/>std::sin(<sp/>elevationAngle<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>accelerationParametrizedByAzimuthAngle[<sp/>2<sp/>]<sp/>=<sp/>2.0<sp/>*<sp/>firstDerivativeRadialDistance<sp/>*<sp/>firstDerivativeElevationAngle</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>radialDistance<sp/>*<sp/>(<sp/>secondDerivativeElevationAngle<sp/>+<sp/>std::sin(<sp/>elevationAngle<sp/>)<sp/>*<sp/>std::cos(<sp/>elevationAngle<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accelerationParametrizedByAzimuthAngle;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">Eigen::Vector3d<sp/>SphericalShaping::computeThrustAccelerationVectorInSphericalCoordinates(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>current<sp/>radial<sp/>distance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance<sp/>=<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>first<sp/>and<sp/>second<sp/>derivatives<sp/>of<sp/>the<sp/>azimuth<sp/>angle<sp/>w.r.t.<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstDerivativeAzimuthAngleWrtTime<sp/>=<sp/>computeFirstDerivativeAzimuthAngleWrtTime(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondDerivativeAzimuthAngleWrtTime<sp/>=<sp/>computeSecondDerivativeAzimuthAngleWrtTime(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>velocity<sp/>vector<sp/>parametrized<sp/>by<sp/>azimuth<sp/>angle<sp/>theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>velocityParametrizedByAzimuthAngle<sp/>=<sp/>computeVelocityVectorParametrizedByAzimuthAngle(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>acceleration<sp/>vector<sp/>parametrized<sp/>by<sp/>azimuth<sp/>angle<sp/>theta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>accelerationParametrizedByAzimuthAngle<sp/>=<sp/>computeThrustAccelerationVectorParametrizedByAzimuthAngle(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>and<sp/>return<sp/>the<sp/>current<sp/>thrust<sp/>acceleration<sp/>vector<sp/>in<sp/>spherical<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pow(<sp/>firstDerivativeAzimuthAngleWrtTime,<sp/>2.0<sp/>)<sp/>*<sp/>accelerationParametrizedByAzimuthAngle</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>secondDerivativeAzimuthAngleWrtTime<sp/>*<sp/>velocityParametrizedByAzimuthAngle</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>centralBodyGravitationalParameter_<sp/>/<sp/>std::pow(<sp/>radialDistance,<sp/>3.0<sp/>)<sp/>*<sp/>(<sp/>Eigen::Vector3d()<sp/>&lt;&lt;<sp/>radialDistance,<sp/>0.0,<sp/>0.0<sp/>).finished();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">Eigen::Vector3d<sp/>SphericalShaping::computeCurrentThrustAcceleration(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>thrustAccelerationVectorCache_.count(<sp/>currentAzimuthAngle<sp/>)<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector6d<sp/>sphericalStateToBeConverted;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sphericalStateToBeConverted.segment(<sp/>0,<sp/>3<sp/>)<sp/>=</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>Eigen::Vector3d()<sp/>&lt;&lt;<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>),</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentAzimuthAngle,<sp/>elevationAngleCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>)<sp/>).finished();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sphericalStateToBeConverted.segment(<sp/>3,<sp/>3<sp/>)<sp/>=<sp/>computeThrustAccelerationVectorInSphericalCoordinates(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>normalizedThrustAccelerationVector<sp/>=</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinate_conversions::convertSphericalToCartesianState(<sp/>sphericalStateToBeConverted<sp/>).segment(<sp/>3,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrustAccelerationVectorCache_[<sp/>currentAzimuthAngle<sp/>]<sp/>=<sp/>normalizedThrustAccelerationVector<sp/>*<sp/>physical_constants::ASTRONOMICAL_UNIT</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>std::pow(<sp/>physical_constants::JULIAN_YEAR,<sp/>2.0<sp/>);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thrustAccelerationVectorCache_.at(<sp/>currentAzimuthAngle<sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>SphericalShaping::computeCurrentThrustAccelerationMagnitude(</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="634"><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>computeCurrentThrustAcceleration(<sp/>currentAzimuthAngle<sp/>).norm(<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal">Eigen::Vector3d<sp/>SphericalShaping::computeCurrentThrustAccelerationDirection(</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>computeCurrentThrustAcceleration(<sp/>currentAzimuthAngle<sp/>).normalized(<sp/>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SphericalShaping::computeDeltaV(<sp/>)</highlight></codeline>
<codeline lineno="647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>deltaV,<sp/>ie<sp/>thrust<sp/>acceleration<sp/>function,<sp/>as<sp/>a<sp/>function<sp/>of<sp/>the<sp/>azimuth<sp/>angle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;<sp/>double(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>&gt;<sp/>derivativeFunctionDeltaV<sp/>=<sp/>[<sp/>=<sp/>]<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thrustAcceleration<sp/>=<sp/>computeThrustAccelerationVectorInSphericalCoordinates(<sp/>currentAzimuthAngle<sp/>).norm()</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>std::sqrt(<sp/>computeScalarFunctionTimeEquation(<sp/>currentAzimuthAngle<sp/>)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>std::pow(<sp/>radialDistanceCompositeFunction_-&gt;evaluateCompositeFunction(<sp/>currentAzimuthAngle<sp/>),<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>centralBodyGravitationalParameter_<sp/>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thrustAcceleration;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>numerical<sp/>quadrature<sp/>from<sp/>quadratrure<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>numerical_quadrature::NumericalQuadrature&lt;<sp/>double,<sp/>double<sp/>&gt;<sp/>&gt;<sp/>quadrature<sp/>=</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerical_quadrature::createQuadrature(<sp/>derivativeFunctionDeltaV,<sp/>quadratureSettings_,<sp/>finalAzimuthAngle_<sp/>);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>dimensional<sp/>deltaV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quadrature-&gt;getQuadrature(<sp/>)<sp/>*<sp/>physical_constants::ASTRONOMICAL_UNIT<sp/>/<sp/>physical_constants::JULIAN_YEAR;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shape_based_methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tudat</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jonashener/tudatpy_dev/tudat-bundle/tudat/src/astro/low_thrust/shape_based/sphericalShaping.cpp"/>
  </compounddef>
</doxygen>
