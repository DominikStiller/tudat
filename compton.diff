diff --git a/cmake_modules/TudatFindBoost.cmake b/cmake_modules/TudatFindBoost.cmake
index 1ff6bc723..6afd936f6 100644
--- a/cmake_modules/TudatFindBoost.cmake
+++ b/cmake_modules/TudatFindBoost.cmake
@@ -44,7 +44,7 @@ foreach(_TUDAT_BOOST_COMPONENT ${_TUDAT_REQUIRED_BOOST_LIBS})
         if(Boost_USE_STATIC_LIBS)
             add_library(Boost::${_TUDAT_BOOST_COMPONENT} STATIC IMPORTED)
         else()
-            add_library(Boost::${_TUDAT_BOOST_COMPONENT} UNKNOWN IMPORTED)
+            add_library(Boost::${_TUDAT_BOOST_COMPONENT} UNKNOWN IMPORTED ../include/tudat/astro/orbit_determination/estimatable_parameters/comptonWavelength.h ../include/tudat/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.h ../src/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.cpp ../include/tudat/astro/relativity/ComptonModel.h ../src/astro/relativity/ComptonModel.cpp)
         endif()
         set_target_properties(Boost::${_TUDAT_BOOST_COMPONENT} PROPERTIES
                 INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}")
diff --git a/include/tudat/astro/basic_astro/accelerationModelTypes.h b/include/tudat/astro/basic_astro/accelerationModelTypes.h
index 8bfa89d65..eb31b636e 100644
--- a/include/tudat/astro/basic_astro/accelerationModelTypes.h
+++ b/include/tudat/astro/basic_astro/accelerationModelTypes.h
@@ -25,7 +25,7 @@
 #include "tudat/astro/propulsion/thrustAccelerationModel.h"
 #include "tudat/astro/propulsion/massRateFromThrust.h"
 #include "tudat/astro/relativity/relativisticAccelerationCorrection.h"
-#include "tudat/astro/relativity/comptonModel.h"
+#include "tudat/astro/relativity/ComptonModel.h"
 #include "tudat/astro/basic_astro/empiricalAcceleration.h"
 #include "tudat/astro/propulsion/massRateFromThrust.h"
 #include "tudat/astro/electromagnetism/solarSailAcceleration.h"
@@ -47,6 +47,7 @@ enum AvailableAcceleration
 {
     undefined_acceleration,
     point_mass_gravity,
+    central_gravity_compton, // Michael
     aerodynamic,
     cannon_ball_radiation_pressure,
     spherical_harmonic_gravity,
@@ -62,8 +63,7 @@ enum AvailableAcceleration
     panelled_radiation_pressure_acceleration,
     momentum_wheel_desaturation_acceleration,
     solar_sail_acceleration,
-    custom_acceleration,
-    central_gravity_compton
+    custom_acceleration
 };
 
 // Function to get a string representing a 'named identification' of an acceleration type
diff --git a/include/tudat/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.h b/include/tudat/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.h
index 75216315a..c37103816 100644
--- a/include/tudat/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.h
+++ b/include/tudat/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.h
@@ -30,15 +30,15 @@ Eigen::Matrix3d calculatePartialOfCentralGravityComptonWrtPositionOfAcceleratedB
         const Eigen::Vector3d& acceleratedBodyPosition,
         const Eigen::Vector3d& acceleratingBodyPosition,
         const double gravitationalParameter,
-        const double comptonWavelength );
+        const double ComptonWavelength = std );
 
 
-class ComptonWavelengthAccelerationPartial: public AccelerationPartial
+class comptonWavelengthAccelerationPartial: public AccelerationPartial
 {
 public:
 
     //! Constructor.
-    ComptonWavelengthAccelerationPartial(
+    comptonWavelengthAccelerationPartial(
             const std::shared_ptr< gravitation::CentralGravitationalAccelerationModel3d > gravitationalAcceleration,
             const std::string acceleratedBody,
             const std::string acceleratingBody  );
@@ -108,11 +108,7 @@ public:
 
     std::pair< std::function< void( Eigen::MatrixXd& ) >, int >
     getParameterPartialFunction(
-            std::shared_ptr< estimatable_parameters::EstimatableParameter< Eigen::VectorXd > > parameter )
-    {
-        std::function< void( Eigen::MatrixXd& ) > partialFunction;
-        return std::make_pair( partialFunction, 0 );
-    }
+            std::shared_ptr< estimatable_parameters::EstimatableParameter< Eigen::VectorXd > > parameter );
 
 
 
diff --git a/include/tudat/astro/orbit_determination/estimatable_parameters/comptonWavelength.h b/include/tudat/astro/orbit_determination/estimatable_parameters/comptonWavelength.h
index 29046f87f..37865dfaa 100644
--- a/include/tudat/astro/orbit_determination/estimatable_parameters/comptonWavelength.h
+++ b/include/tudat/astro/orbit_determination/estimatable_parameters/comptonWavelength.h
@@ -22,8 +22,10 @@ class ComptonWavelength: public EstimatableParameter< double >
 public:
 
     //! Constructor
-    ComptonWavelength( ):
-    EstimatableParameter< double >( compton_wavelength, "global_metric"  ){ }
+    ComptonWavelength(
+            const std::shared_ptr< gravitation::GravityFieldModel > gravityFieldModel, const std::string& associatedBody ):
+    EstimatableParameter< double >( compton_wavelength, associatedBody ),
+    gravityFieldModel_( gravityFieldModel ){ }
 
     //! Destructor
     ~ComptonWavelength( ) { }
@@ -61,6 +63,7 @@ public:
 protected:
 
 private:
+    std::shared_ptr< gravitation::GravityFieldModel > gravityFieldModel_;
 
 };
 
diff --git a/include/tudat/astro/relativity.h b/include/tudat/astro/relativity.h
index f5d68c3be..e793d67a5 100644
--- a/include/tudat/astro/relativity.h
+++ b/include/tudat/astro/relativity.h
@@ -15,6 +15,6 @@
 #include "relativity/relativisticAccelerationCorrection.h"
 #include "relativity/relativisticLightTimeCorrection.h"
 #include "relativity/relativisticTimeConversion.h"
-#include "relativity/comptonModel.h"
+#include "relativity/ComptonModel.h"
 
 #endif // TUDAT_RELATIVITY_H
diff --git a/include/tudat/astro/relativity/comptonModel.h b/include/tudat/astro/relativity/ComptonModel.h
similarity index 80%
rename from include/tudat/astro/relativity/comptonModel.h
rename to include/tudat/astro/relativity/ComptonModel.h
index 23fd52ae8..42cafd281 100644
--- a/include/tudat/astro/relativity/comptonModel.h
+++ b/include/tudat/astro/relativity/ComptonModel.h
@@ -2,8 +2,8 @@
 // Created by Michael Plumaris on 24/01/2022.
 //
 
-#ifndef TUDAT_COMPTONMODEL_H
-#define TUDAT_COMPTONMODEL_H
+#ifndef TUDATBUNDLE_COMPTONMODEL_H
+#define TUDATBUNDLE_COMPTONMODEL_H
 
 #include <boost/lambda/lambda.hpp>
 #include <memory>
@@ -27,7 +27,8 @@ namespace relativity
 Eigen::Vector3d computeComptonRelativisticAcceleration(
         const Eigen::Vector3d& vectorToAcceleratedBody,
         const double gravitationalParameter,
-        const double comptonWavelength = relativity::comptonWavelength );
+        const double ComptonWavelength = relativity::ComptonWavelength );
+
 /*
 Eigen::Vector3d computeGravitationalForce(
 const double universalGravitationalParameter,
@@ -52,14 +53,14 @@ public:
 
 
     ComptonRelativisticAcceleration(
-            const Vector3dReturningFunction sourcePositionFunction,
-            const Vector3dReturningFunction acceleratedBodyPositionFunction,
-            const std::function< double( ) > gravitationalParameterFunction
+            Vector3dReturningFunction sourcePositionFunction,
+            Vector3dReturningFunction acceleratedBodyPositionFunction,
+            const double gravitationalParameter
             //std::function< double( ) > comptonWavelengthFunction = [ ]( ){ return std::numeric_limits<double>::infinity(); }
             )
         : sourcePositionFunction_( sourcePositionFunction ),
           acceleratedBodyPositionFunction_( acceleratedBodyPositionFunction ),
-          gravitationalParameterFunction_( gravitationalParameterFunction )
+          gravitationalParameter_( gravitationalParameter )
           //comptonWavelengthFunction_ (comptonWavelength)
     {
         this->updateMembers();
@@ -69,13 +70,12 @@ public:
     void updateMembers(const double currentTime = TUDAT_NAN) {
         if (!(this->currentTime_ == currentTime)) {
             //this->updateBaseMembers();
-            currentGravitationalParameter_ = gravitationalParameterFunction_( );
             vectorToAcceleratedBody_ = ( acceleratedBodyPositionFunction_( )
                                        - sourcePositionFunction_( ) );
 
             this->currentAcceleration_ = computeComptonRelativisticAcceleration(
                     this->vectorToAcceleratedBody_,
-                    this->currentGravitationalParameter_
+                    this->gravitationalParameter_
                     //this->comptonWavelength_
                     );
         }
@@ -93,15 +93,14 @@ private:
 
     //double comptonWavelength_;
 
+    const double gravitationalParameter_;
+
     const Vector3dReturningFunction sourcePositionFunction_;
 
     const Vector3dReturningFunction acceleratedBodyPositionFunction_;
 
-    const std::function< double( ) > gravitationalParameterFunction_;
-
     Eigen::Vector3d vectorToAcceleratedBody_;
 
-    double currentGravitationalParameter_;
     //std::function< double( ) > comptonWavelengthFunction_;
 
 };
@@ -115,4 +114,4 @@ typedef std::shared_ptr< ComptonRelativisticAcceleration > ComptonRelativisticAc
 } // namespace tudat
 
 
-#endif //TUDAT_COMPTONMODEL_H
+#endif //TUDATBUNDLE_COMPTONMODEL_H
diff --git a/include/tudat/astro/relativity/metric.h b/include/tudat/astro/relativity/metric.h
index 6439e142d..ccaea4f02 100644
--- a/include/tudat/astro/relativity/metric.h
+++ b/include/tudat/astro/relativity/metric.h
@@ -104,7 +104,7 @@ extern std::shared_ptr< PPNParameterSet > ppnParameterSet;
 extern double equivalencePrincipleLpiViolationParameter;
 
 // Michael
-extern double comptonWavelength;
+extern double ComptonWavelength;
 
 }
 
diff --git a/include/tudat/simulation/estimation_setup/createAccelerationPartials.h b/include/tudat/simulation/estimation_setup/createAccelerationPartials.h
index c135a6dab..3e7ee1386 100644
--- a/include/tudat/simulation/estimation_setup/createAccelerationPartials.h
+++ b/include/tudat/simulation/estimation_setup/createAccelerationPartials.h
@@ -104,7 +104,7 @@ std::shared_ptr< acceleration_partials::AccelerationPartial > createAnalyticalAc
         break;
 
     // Michael
-    case central_gravity_compton:
+    case central_gravity_Compton:
 
         // Check if identifier is consistent with type.
         if( std::dynamic_pointer_cast< CentralGravitationalAccelerationModel3d >( accelerationModel ) == nullptr )
@@ -115,7 +115,7 @@ std::shared_ptr< acceleration_partials::AccelerationPartial > createAnalyticalAc
         else
         {
             // Create partial-calculating object.
-            accelerationPartial = std::make_shared< ComptonWavelengthAccelerationPartial >
+            accelerationPartial = std::make_shared< comptonWavelengthAccelerationPartial >
                     ( std::dynamic_pointer_cast< CentralGravitationalAccelerationModel3d >( accelerationModel ),
                       acceleratedBody.first, acceleratingBody.first );
         }
diff --git a/include/tudat/simulation/estimation_setup/createEstimatableParameters.h b/include/tudat/simulation/estimation_setup/createEstimatableParameters.h
index 3f5c0fb3a..4881fb08e 100644
--- a/include/tudat/simulation/estimation_setup/createEstimatableParameters.h
+++ b/include/tudat/simulation/estimation_setup/createEstimatableParameters.h
@@ -887,7 +887,18 @@ std::shared_ptr< estimatable_parameters::EstimatableParameter< double > > create
         // Michael
         case compton_wavelength:
         {
-            doubleParameterToEstimate = std::make_shared< ComptonWavelength >( );
+            if( currentBody->getGravityFieldModel( )== nullptr )
+            {
+                std::string errorMessage = "Error, body " +
+                                           currentBodyName + " has no gravity field, cannot estimate compton wavelength.";
+                throw std::runtime_error( errorMessage );
+            }
+            else
+            {
+                std::shared_ptr< GravityFieldModel > gravityFieldModel = currentBody->getGravityFieldModel( );
+                doubleParameterToEstimate = std::make_shared< ComptonWavelength >
+                        ( gravityFieldModel, currentBodyName );
+            }
             break;
         }
         case direct_dissipation_tidal_time_lag:
diff --git a/include/tudat/simulation/propagation_setup/accelerationSettings.h b/include/tudat/simulation/propagation_setup/accelerationSettings.h
index 16825d1de..28423b9b4 100644
--- a/include/tudat/simulation/propagation_setup/accelerationSettings.h
+++ b/include/tudat/simulation/propagation_setup/accelerationSettings.h
@@ -23,7 +23,7 @@
 #include "tudat/simulation/propagation_setup/createThrustModelGuidance.h"
 // #include "tudat/math/interpolators/createInterpolator.h"
 
-#include "tudat/astro/relativity/comptonModel.h"
+#include "tudat/astro/relativity/ComptonModel.h"
 
 
 namespace tudat
diff --git a/include/tudat/simulation/propagation_setup/createAccelerationModels.h b/include/tudat/simulation/propagation_setup/createAccelerationModels.h
index 7b53fe1eb..7f57f7713 100644
--- a/include/tudat/simulation/propagation_setup/createAccelerationModels.h
+++ b/include/tudat/simulation/propagation_setup/createAccelerationModels.h
@@ -28,7 +28,7 @@
 #include "tudat/astro/ephemerides/frameManager.h"
 #include "tudat/astro/gravitation/directTidalDissipationAcceleration.h"
 
-#include "tudat/astro/relativity/comptonModel.h"
+#include "tudat/astro/relativity/ComptonModel.h"
 
 
 namespace tudat
diff --git a/src/astro/basic_astro/accelerationModelTypes.cpp b/src/astro/basic_astro/accelerationModelTypes.cpp
index 69e675f9b..71fbb2e28 100644
--- a/src/astro/basic_astro/accelerationModelTypes.cpp
+++ b/src/astro/basic_astro/accelerationModelTypes.cpp
@@ -94,7 +94,6 @@ AvailableAcceleration getAccelerationModelType(
     using namespace tudat::aerodynamics;
     using namespace tudat::electromagnetism;
     using namespace tudat::gravitation;
-    using namespace tudat::relativity;
 
     // Nominal type is undefined
     AvailableAcceleration accelerationType = undefined_acceleration;
diff --git a/src/astro/orbit_determination/acceleration_partials/CMakeLists.txt b/src/astro/orbit_determination/acceleration_partials/CMakeLists.txt
index c700fe390..4c89ec5a9 100644
--- a/src/astro/orbit_determination/acceleration_partials/CMakeLists.txt
+++ b/src/astro/orbit_determination/acceleration_partials/CMakeLists.txt
@@ -22,7 +22,6 @@ set(acceleration_partials_SOURCES
   "directTidalDissipationAccelerationPartial.cpp"
   "panelledRadiationPressureAccelerationPartial.cpp"
   "thrustAccelerationPartial.cpp"
-  "comptonWavelengthAccelerationPartial.cpp"
 )
 
 # Set the header files.
@@ -42,7 +41,6 @@ set(acceleration_partials_HEADERS
   "directTidalDissipationAccelerationPartial.h"
   "panelledRadiationPressureAccelerationPartial.h"
   "thrustAccelerationPartial.h"
-  "comptonWavelengthAccelerationPartial.h"
 )
 
 TUDAT_ADD_LIBRARY("acceleration_partials"
diff --git a/src/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.cpp b/src/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.cpp
index be55b3518..fbade75b3 100644
--- a/src/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.cpp
+++ b/src/astro/orbit_determination/acceleration_partials/comptonWavelengthAccelerationPartial.cpp
@@ -25,12 +25,12 @@ Eigen::Matrix3d calculatePartialOfCentralGravityComptonWrtPositionOfAcceleratedB
     double relativePositionNorm = relativePosition.norm( );
     double invSquareOfPositionNorm = 1.0 / ( relativePositionNorm * relativePositionNorm );
     double invCubeOfPositionNorm = invSquareOfPositionNorm / relativePositionNorm;
-    Eigen::Matrix3d partialMatrix;// = -gravitationalParameter *
-//                                    ( Eigen::Matrix3d::Identity( ) * invCubeOfPositionNorm -
-//                                      ( 3.0 * invSquareOfPositionNorm * invCubeOfPositionNorm ) * relativePosition * relativePosition.transpose( ) ) +
-//                                      // additional part
-//                                      gravitationalParameter / (2.0 * lambda * lambda ) *
-//                                      ( Eigen::Matrix3d::Identity( ) / relativePositionNorm - relativePosition * invSquareOfPositionNorm ) ;
+    Eigen::Matrix3d partialMatrix = -gravitationalParameter *
+                                    ( Eigen::Matrix3d::Identity( ) * invCubeOfPositionNorm -
+                                      ( 3.0 * invSquareOfPositionNorm * invCubeOfPositionNorm ) * relativePosition * relativePosition.transpose( ) ) +
+                                      // additional part
+                                      gravitationalParameter / (2 * lambda * lambda ) *
+                                      ( Eigen::Matrix3d::Identity( ) / relativePositionNorm - relativePosition * invSquareOfPositionNorm ) ;
 
     return partialMatrix;
 }
@@ -51,11 +51,11 @@ Eigen::Vector3d computePartialOfCentralGravityComptonWrtComptonWavelength( const
 
 
 //! Constructor
-ComptonWavelengthAccelerationPartial::ComptonWavelengthAccelerationPartial(
+comptonWavelengthAccelerationPartial::comptonWavelengthAccelerationPartial(
         const std::shared_ptr< gravitation::CentralGravitationalAccelerationModel3d > gravitationalAcceleration,
         const std::string acceleratedBody,
         const std::string acceleratingBody ):
-        AccelerationPartial( acceleratedBody, acceleratingBody, basic_astrodynamics::central_gravity_compton )
+        AccelerationPartial( acceleratedBody, acceleratingBody, basic_astrodynamics::central_gravity_Compton )
 {
     accelerationUpdateFunction_ =
             std::bind( &basic_astrodynamics::AccelerationModel< Eigen::Vector3d>::updateMembers, gravitationalAcceleration, std::placeholders::_1 );
@@ -69,7 +69,7 @@ ComptonWavelengthAccelerationPartial::ComptonWavelengthAccelerationPartial(
 
 //! Function for setting up and retrieving a function returning a partial w.r.t. a double parameter.
 std::pair< std::function< void( Eigen::MatrixXd& ) >, int >
-ComptonWavelengthAccelerationPartial::getParameterPartialFunction(
+comptonWavelengthAccelerationPartial::getParameterPartialFunction(
         std::shared_ptr< estimatable_parameters::EstimatableParameter< double > > parameter )
 
 {
@@ -91,7 +91,7 @@ ComptonWavelengthAccelerationPartial::getParameterPartialFunction(
 
 //! Function to create a function returning the current partial w.r.t. a gravitational parameter.
 std::pair< std::function< void( Eigen::MatrixXd& ) >, int >
-ComptonWavelengthAccelerationPartial::getComptonWavelengthPartialFunction(
+comptonWavelengthAccelerationPartial::getComptonWavelengthPartialFunction(
         const estimatable_parameters::EstimatebleParameterIdentifier& parameterId )
 {
     std::function< void( Eigen::MatrixXd& ) > partialFunction;
@@ -103,7 +103,7 @@ ComptonWavelengthAccelerationPartial::getComptonWavelengthPartialFunction(
         // Check if parameter body is central body.
         if( parameterId.second.first == acceleratingBody_ )
         {
-            partialFunction = std::bind( &ComptonWavelengthAccelerationPartial::wrtComptonWavelengthOfCentralBody,
+            partialFunction = std::bind( &comptonWavelengthAccelerationPartial::wrtComptonWavelengthOfCentralBody,
                                          this, std::placeholders::_1 );
             numberOfColumns = 1;
 
@@ -119,7 +119,7 @@ ComptonWavelengthAccelerationPartial::getComptonWavelengthPartialFunction(
 }
 
 //! Function to calculate central gravity partial w.r.t. central body gravitational parameter
-void ComptonWavelengthAccelerationPartial::wrtComptonWavelengthOfCentralBody( Eigen::MatrixXd& comptonWavelengthPartial )
+void comptonWavelengthAccelerationPartial::wrtComptonWavelengthOfCentralBody( Eigen::MatrixXd& comptonWavelengthPartial )
 {
     comptonWavelengthPartial = computePartialOfCentralGravityComptonWrtComptonWavelength(
             currentAcceleratedBodyState_, currentCentralBodyState_, currentGravitationalParameter_);
diff --git a/src/astro/orbit_determination/estimatable_parameters/CMakeLists.txt b/src/astro/orbit_determination/estimatable_parameters/CMakeLists.txt
index 07c8f4a51..9049d91c8 100644
--- a/src/astro/orbit_determination/estimatable_parameters/CMakeLists.txt
+++ b/src/astro/orbit_determination/estimatable_parameters/CMakeLists.txt
@@ -41,7 +41,6 @@ set(estimatable_parameters_HEADERS
   "polarMotionAmplitude.h"
   "coreFactor.h"
   "freeCoreNutationRate.h"
-  "comptonWavelength.h"
 )
 
 
diff --git a/src/astro/relativity/CMakeLists.txt b/src/astro/relativity/CMakeLists.txt
index a224feff8..c522d637e 100644
--- a/src/astro/relativity/CMakeLists.txt
+++ b/src/astro/relativity/CMakeLists.txt
@@ -14,7 +14,6 @@ set(relativity_SOURCES
         "relativisticAccelerationCorrection.cpp"
         "relativisticTimeConversion.cpp"
         "metric.cpp"
-        "comptonModel.cpp"
         )
 
 # Set the header files.
@@ -23,7 +22,6 @@ set(relativity_HEADERS
         "relativisticAccelerationCorrection.h"
         "relativisticTimeConversion.h"
         "metric.h"
-        "comptonModel.h"
         )
 
 TUDAT_ADD_LIBRARY("relativity"
diff --git a/src/astro/relativity/comptonModel.cpp b/src/astro/relativity/ComptonModel.cpp
similarity index 84%
rename from src/astro/relativity/comptonModel.cpp
rename to src/astro/relativity/ComptonModel.cpp
index df84b9b1f..19d20a7d8 100644
--- a/src/astro/relativity/comptonModel.cpp
+++ b/src/astro/relativity/ComptonModel.cpp
@@ -2,11 +2,10 @@
 // Created by Michael Plumaris on 24/01/2022.
 //
 
-#include "tudat/astro/relativity/comptonModel.h"
+#include "tudat/astro/relativity/ComptonModel.h"
 #include "tudat/astro/relativity/metric.h"
 
 namespace tudat{
-namespace relativity{
 
 
 
@@ -14,11 +13,11 @@ namespace relativity{
 Eigen::Vector3d computeComptonRelativisticAcceleration(
         const Eigen::Vector3d& vectorToAcceleratedBody,
         const double gravitationalParameter,
-        const double comptonWavelength )
+        const double ComptonWavelength )
 {
     double distance = vectorToAcceleratedBody.norm( );
     return gravitationalParameter * vectorToAcceleratedBody
-    / (distance * 2.0 * comptonWavelength * comptonWavelength) ;
+    / (distance * 2 * ComptonWavelength * ComptonWavelength) ;
 }
 
 /*
@@ -38,4 +37,3 @@ Eigen::Vector3d computeGravitationalForce(
 */
 
 }
-}
diff --git a/src/astro/relativity/metric.cpp b/src/astro/relativity/metric.cpp
index 3e765ba97..7f13f252b 100644
--- a/src/astro/relativity/metric.cpp
+++ b/src/astro/relativity/metric.cpp
@@ -24,7 +24,7 @@ std::shared_ptr< PPNParameterSet > ppnParameterSet = std::make_shared< PPNParame
 double equivalencePrincipleLpiViolationParameter = 0.0;
 
 // Michael
-double comptonWavelength = std::numeric_limits<double>::infinity();
+double ComptonWavelength = std::numeric_limits<double>::infinity();
 
 }
 
diff --git a/src/simulation/propagation_setup/createAccelerationModels.cpp b/src/simulation/propagation_setup/createAccelerationModels.cpp
index e09c76aa2..1428d1bd0 100644
--- a/src/simulation/propagation_setup/createAccelerationModels.cpp
+++ b/src/simulation/propagation_setup/createAccelerationModels.cpp
@@ -294,7 +294,14 @@ createComptonAccelerationModel(
                 std::bind( &gravitation::GravityFieldModel::getGravitationalParameter,
                            bodyExertingAcceleration->getGravityFieldModel( ) );
 
+        //std::function< double( ) > comptonWavelengthFunction = std::bind( &PPNParameterSet::getParameterGamma, ppnParameterSet );
+
         // Create acceleration object.
+        std::function< void( Eigen::Vector3d& ) > bodyUndergoingAccelerationPositionFunction =
+                std::bind( &Body::getPositionByReference, bodyUndergoingAcceleration, std::placeholders::_1 );
+        std::function< void( Eigen::Vector3d& ) > bodyExertingAccelerationPositionFunction =
+                std::bind( &Body::getPositionByReference, bodyExertingAcceleration, std::placeholders::_1 );
+
         return std::make_shared< relativity::ComptonRelativisticAcceleration >(
                         std::bind( &Body::getPosition, bodyExertingAcceleration ),
                         std::bind( &Body::getPosition, bodyUndergoingAcceleration ),
