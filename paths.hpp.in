/*    Copyright (c) 2010-2018, Delft University of Technology
 *    All rigths reserved
 *
 *    This file is part of the Tudat. Redistribution and use in source and
 *    binary forms, with or without modification, are permitted exclusively
 *    under the terms of the Modified BSD license. You should have received
 *    a copy of the license with this file. If not, please or visit:
 *    http://tudat.tudelft.nl/LICENSE.
 */

#ifndef TUDAT_PATHS_HPP
#define TUDAT_PATHS_HPP

#include <stdlib.h>
#include <system_error>

#define HOME "HOME"
#define RESOURCES_FOLDER "/.tudat/"
#define TEST_DATA_FOLDER "@PROJECT_BINARY_DIR@/tests/data/"

#define EPHEMERIS_RELATIVE_TO_RESOURCES "/ephemeris_data/"
#define EARTH_ORIENTATION_RELATIVE_TO_RESOURCES "/earth_orientation/"
#define QUADRATURE_RELATIVE_TO_RESOURCES "/quadrature/"
#define SPICE_KERNELS_RELATIVE_TO_RESOURCES "/spice_kernels/"
#define ATMOSPHERE_TABLES_RELATIVE_TO_RESOURCES "/atmosphere_tables/"
#define GRAVITY_MODELS_RELATIVE_TO_RESOURCES "/gravity_models/"
#define SPACE_WEATHER_RELATIVE_TO_RESOURCES "/space_weather/"

#include <string.h>
#include <sys/stat.h>
#include <iostream>

namespace tudat {
    namespace paths {

        static inline std::string get_resource_path() {
            // TODO: Improve robustness of resource path. Downloading of resources if they are not found should be
            //  added. Users should be able to purge (delete) the resources after arduous use of the software, starting
            //  with no resources.
            return std::string(getenv(HOME)) + RESOURCES_FOLDER;

//            // Only works on osx and linux.
//            char *env_home = getenv(HOME);
//            if (env_home != NULL) {
//                // Create hidden project home folder path.
//                char const *resource_path = strcat(env_home, RESOURCES_FOLDER);
//
//                // Ensure its existence.
//                struct stat info;
//                int statRC = stat(resource_path, &info);
//                int exists;
//                if (statRC != 0) {
//                    if (errno == ENOENT) { return 0; } // something along the path does not exist
//                    if (errno == ENOTDIR) { return 0; } // something in path prefix is not a dir
//                    exists = -1;
//                } else { exists = (info.st_mode & S_IFDIR) ? 1 : 0; }
//                if (exists) {
//                    std::cout << "resource_path: " << std::string(resource_path) << std::endl;
//                    return std::string(resource_path);
//                } else {
//                    throw std::runtime_error("Resource folder ($HOME/.tudat) does not exist.");
//                }
//
//            } else {
//                throw std::runtime_error("$HOME variable does not exist.");
//            }
        }

        static inline std::string get_tudat_data_path() {
            return get_resource_path();
        }

        static inline std::string get_tudat_path() {
            return get_resource_path();
        }

        static inline std::string get_default_output_path() {
            return get_resource_path();
        }

        static inline std::string getTudatTestDataPath() {
            return TEST_DATA_FOLDER;
        }

        static inline std::string getEphemerisDataFilesPath() {
            return get_resource_path() + EPHEMERIS_RELATIVE_TO_RESOURCES;
        }

        static inline std::string getEarthOrientationDataFilesPath() {
            return get_resource_path() + EARTH_ORIENTATION_RELATIVE_TO_RESOURCES;
        }

        static inline std::string getQuadratureDataPath() {
            return get_resource_path() + QUADRATURE_RELATIVE_TO_RESOURCES;
        }

        static inline std::string getSpiceKernelPath() {
            return get_resource_path() + SPICE_KERNELS_RELATIVE_TO_RESOURCES;
        }

        static inline std::string getAtmosphereTablesPath() {
            return get_resource_path() + ATMOSPHERE_TABLES_RELATIVE_TO_RESOURCES;
        }

        static inline std::string getGravityModelsPath() {
            return get_resource_path() + GRAVITY_MODELS_RELATIVE_TO_RESOURCES;
        }

        static inline std::string getSpaceWeatherDataPath() {
            return get_resource_path() + SPACE_WEATHER_RELATIVE_TO_RESOURCES;
        }

    }
}
#endif //TUDAT_PATHS_HPP
