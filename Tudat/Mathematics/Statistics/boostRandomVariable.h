#ifndef BOOSTPROBABILITYDISTRIBUTIONS_H
#define BOOSTPROBABILITYDISTRIBUTIONS_H

#include <cmath>

#include <boost/math/distributions.hpp>

#include "Tudat/Mathematics/BasicMathematics/mathematicalConstants.h"
#include "Tudat/Mathematics/Statistics/continuousRandomVariable.h"


namespace tudat
{

namespace statistics
{

//! Interface for continuous random variable calculations using distributions implemented in boost
/*!
 *  Interface for continuous random variable calculations using distributions implemented in boost. Derives from the ContinuousRandomVariable
 *  class, uses boost implementation for evaluating distribution functions. Class may be aurtomatically generated by createBoostRandomVariable function.
 *  \tparam Template parameter defining boost distribution type, NOT to be confused with ContinuousBoostStatisticalDistributions enum. Input should
 *  be consistent with first required input parameter to boost::math::pdf/cdf/quantile< double > functions
 */
template< typename BoostDistributionType >
class BoostContinuousRandomVariable: public ContinuousRandomVariable< double >
{
public:

    //! Constructor, sets distribution type
    /*!
     *  Constructor, sets distribution type
     *  \param distribution Distribution type implemented in boost
     */
    BoostContinuousRandomVariable( const BoostDistributionType distribution ):distribution_( distribution ){ }

    //! Destructor
    ~BoostContinuousRandomVariable( ){ }

    //! Function to evaluate pdf of distribution
    /*!
     *  Function to evaluate probability distribution function at given independentVariable value by calling boost implementation
     *  \param independentVariable Value of independent variable
     *  \return Evaluated pdf
     */
    double evaluatePdf( const double independentVariable )
    {
        return boost::math::pdf< double >( distribution_, independentVariable );
    }

    //! Function to evaluate pcdfdf of distribution
    /*!
     *  Function to evaluate cumulative distribution function at given independentVariable value by calling boost implementation
     *  \param independentVariable Value of independent variable
     *  \return Evaluated cdf
     */
    double evaluateCdf( const double independentVariable )
    {
        return boost::math::cdf< double >( distribution_, independentVariable );
    }

    //! Function to evaluate pdf of distribution
    /*!
     *  Function to evaluate inverse cumulative distribution function at given independentVariable value by calling boost implementation
     *  \param independentVariable Value of independent variable
     *  \return Evaluated inverse cdf
     */
    double evaluateInverseCdf( const double independentVariable )
    {
        return boost::math::quantile< double >( distribution_, independentVariable );
    }
private:

    //! Boost dustribution type, must be possible first input argument for boost::math::pdf/cdf/quantile< double > functions
    BoostDistributionType distribution_;

};

//! Function to create a random variable class of BoostContinuousRandomVariable type
/*!
 *  Function to create a random variable class of BoostContinuousRandomVariable type, which links random variable interfaces of this architecture
 *  to implementations from boost.
 *  \param boostDistribution Type of distribution of which a random variable class is to be generated
 *  \param parameters Free parameters of requested distribution (for instance mean and standard deviation for Gaussian distribution, see
 *  implementation for order of parameter, if relevant)
 *  \return Random variable class of BoostContinuousRandomVariable type
 */
boost::shared_ptr< ContinuousRandomVariable< double > > createBoostRandomVariable(
        const ContinuousBoostStatisticalDistributions boostDistribution, const std::vector< double >& parameters );

}

}


#endif // BOOSTPROBABILITYDISTRIBUTIONS_H
