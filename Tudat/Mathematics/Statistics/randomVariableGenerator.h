#ifndef RANDOMVARIABLEGENERATION_H
#define RANDOMVARIABLEGENERATION_H

#include <ctime>

#include <boost/function.hpp>
#include <boost/random.hpp>
#include <boost/random/mersenne_twister.hpp>
#include <boost/make_shared.hpp>

#include "Tudat/Mathematics/Statistics/boostProbabilityDistributions.h"

namespace tudat
{

namespace statistics
{

//! Base class for random number generation
/*!
 *  Base class for random number generation, derived classes implement the distribution (or more specifically the inverse cumulative distribution
 *  function) from which numbers are randomly generated. The uniform random number generator that is mapped to the random number from gthe specific
 *  distribution is generated from the boost::random::mt19937 generator; its seed may be either pseudo-random (time( 0 )) or user-defined.
 *  \tparam DependentVariableType Type of variable generated by generator (typically double for continuous distribution and int for continuous
 *  distribution).
 */
template< typename DependentVariableType >
class RandomVariableGenerator
{
public:

    //! Constructor, sets the seed for the base random number generator.
    /*!
     *  Constructor, sets the seed for the base random number generator.
     *  \param seed Seed of random number generator (default is pseudo-random time(0))
     */
    RandomVariableGenerator( const double seed ):randomNumberGenerator_( seed ){ }

    //! Destructor
    virtual ~RandomVariableGenerator( ){ }

    //! Function to generate random number
    /*!
     *  This function generates a random number from the distribution defined by the derived class. It maps the random number generated by the
     *  randomNumberGenerator_ member to that of the specific distribution.
     *  \return Randomly generated number of derived class distribution.
     */
    virtual DependentVariableType getRandomVariableValue( ) = 0;

protected:

    //! Uniform (0,1) random number generator, to be mapped to specific distribution by derived classes.
    boost::random::mt19937 randomNumberGenerator_;
};


class ContinuousRandomVariableGenerator: public RandomVariableGenerator< double >
{
public:
    ContinuousRandomVariableGenerator(
            const boost::shared_ptr< InvertibleContinuousProbabilityDistribution< double > > randomVariable,
            const double seed ):
        RandomVariableGenerator< double >( seed ), randomVariable_( randomVariable ),
        randomUniformCdfGenerator_( randomNumberGenerator_ ){ }

    double getRandomVariableValue( )
    {
        return randomVariable_->evaluateInverseCdf( randomUniformCdfGenerator_( ) );
    }

private:
    boost::shared_ptr< InvertibleContinuousProbabilityDistribution< double > > randomVariable_;

    boost::random::uniform_01< boost::random::mt19937 > randomUniformCdfGenerator_;

};


boost::function< double( ) > createBoostContinuousRandomVariableGeneratorFunction(
        const ContinuousBoostStatisticalDistributions boostDistribution,
        const std::vector< double >& parameters,
        const double seed );

boost::shared_ptr< RandomVariableGenerator< double > > createBoostContinuousRandomVariableGenerator(
        const ContinuousBoostStatisticalDistributions boostDistribution,
        const std::vector< double >& parameters,
        const double seed  );
}

}

#endif // RANDOMVARIABLEGENERATION_H
