#ifndef TUDAT_SOFA_TIMECONVERSIONS_H
#define TUDAT_SOFA_TIMECONVERSIONS_H

#include <vector>

extern "C"
{
#include "sofa/src/sofa.h"
#include "sofa/src/sofam.h"
}

#include "Tudat/Astrodynamics/BasicAstrodynamics/physicalConstants.h"

namespace tudat
{

namespace sofa_interface
{

template< typename TimeType >
TimeType getTTMinusTai( );

double approximateConvertTTtoTDB( const double tt, const double earthMeanAnomaly );

//! Function to convert TAI to TT
/*!
 *  Function to convert TAI (International Atomic Time) to TT (Terrestrial Time) by adding bias as defined by Sofa.
 *  \param tai Time in TAI
 *  \return Time in TT
 */
template< typename TimeType >
TimeType convertTAItoTT( const TimeType tai )
{
    return tai + getTTMinusTai< TimeType >( );
}


//! Function to convert TT to TAI
/*!
 *  Function to convert TT (Terrestrial Time) to TAI (International Atomic Time) by subtracting bias as defined by Sofa.
 *  \param tt Time in TT
 *  \return Time in TAI
 */
template< typename TimeType >
TimeType convertTTtoTAI( const TimeType tt )
{
    return tt - getTTMinusTai< TimeType >( );
}

//! Function to calculate number of leap seconds from UTC input
/*!
 *  Function to calculate number of leap seconds from UTC (Universal Coordinated Time) input.
 *  \param utcInJulianDays Time in UTC; in julianDays since J2000.
 *  \return Number of leap seconds at requested time.
 */
double getDeltaAtFromUtc( const double utcInJulianDays );

//! Function to calculate number of leap seconds from TAI input
/*!
 *  Function to calculate number of leap seconds from UTC (International Atomic Time) input. Note: this function will not work properly near
 *  (i.e. within DeltaAt from) the introduction of a leap second. In case of incorrect conversion, an error message is produced.
 *  \param taiInJulianDays Time in TAI; in seconds since julianDaysEpochShift julianDay.
 *  \return Number of leap seconds at requested time.
 */
double getDeltaAtFromTai( const double taiInJulianDays );


//! Function to convert TAI to UTC
/*!
 *  Function to convert TAI (International Atomic Time) to UTC (Universal Coordinated Time) by subtracting bias (i.e. number of leap seconds
 *  since reference epoch) as determined by Sofa.
 *  \param taiSeconds Time in TAI; in seconds since J2000.
 *  \return Time in UTC
 */
template< typename TimeType >
TimeType convertTAItoUTC( const TimeType taiSeconds )
{
    // Retrieve number of leap seconds from Sofa
    double deltaAt = getDeltaAtFromUtc( static_cast< double >( taiSeconds ) / physical_constants::JULIAN_DAY );

    // Return converted time
    return taiSeconds - static_cast< TimeType >( deltaAt );
}

//! Function to convert UTC to TAI
/*!
 *  Function to convert UTC (Universal Coordinated Time) to TAI (International Atomic Time) by adding bias (i.e. number of leap seconds
 *  since reference epoch) as determined by Sofa.
 *  \param utcSeconds Time in UTC; in seconds since J2000
 *  \return Time in TAI
 */
template< typename TimeType >
TimeType convertUTCtoTAI( const TimeType utcSeconds )
{
    double deltaAt = getDeltaAtFromUtc( static_cast< double >( utcSeconds ) / physical_constants::JULIAN_DAY );
    return utcSeconds + static_cast< TimeType >( deltaAt );
}


//! Function to convert TT to UTC
/*!
 *  Function to convert TT (Terrestrial Time) to UTC (Universal Coordinated Time)  by determining bias (i.e. number of leap seconds
 *  since reference epoch and constant bias of TAI wrt TT) as determined by Sofa.
 *  \param tt Time in TT in seconds since J2000
 *  \return Time in UTC
 */
template< typename TimeType >
TimeType convertTTtoUTC( const TimeType tt )
{
    return convertTAItoUTC( convertTTtoTAI( tt ) );
}

template< typename TimeType >
TimeType convertUTCtoTT( const TimeType utc )
{
    return convertTAItoTT( convertUTCtoTAI( utc ) );
}

//! Function to calculate difference between TDB and TT
/*!
 *  Function to calculate difference between TDB (Dynamical Barycentric Time) and TT (Terrestrial Time), from Sofa function, which is based
 *  on decomposition of time ephemeris generated by Fairhead an Bretagnon (1990). Note that the time ephemeris should be generated
 *  by solution of differential equation for ephemerides that are used, if very high consistency is required.
 *  \param ephemerisTime TDB in seconds since J2000.
 *  \param universalTimeFractionOfDay UT1 in fraction of current day.
 *  \param stationLongitude Longitude of point on Earth where difference is to be calculated
 *  \param distanceFromSpinAxis Distance from Earth spin axis where difference is to be calculated
 *  \param distanceFromEquatorialPlane Distance from Earth equatorial plane where difference is to be calculated
 *  \return Difference between TDB and TT at requested position and TDB
 */
template< typename TimeType >
TimeType getTDBminusTT( const TimeType ephemerisTime, const double universalTimeFractionOfDay, const double stationLongitude,
                        const double distanceFromSpinAxis, const double distanceFromEquatorialPlane );

//! Function to calculate difference between TDB and TT
/*!
 *  Function to calculate difference between TDB (Dynamical Barycentric Time) and TT (Terrestrial Time), from Sofa function, which is based
 *  on decomposition of time ephemeris generated by Fairhead an Bretagnon (1990).
 *  it is assumed that UTC and UT1 coincide for the purposes of the time difference calculation (as needed for the topocentric term of the tim
 *  conversion). Also, the first input argument may be TDB or TT and the difference between the two is neglected in the internal calculations,
 *  making this function unsuitable for very high precision applications.
 *  \param ttOrTdbSinceJ2000 TDB or TT in seconds since J2000.
 *  \param stationLongitude Longitude of point on Earth where difference is to be calculated
 *  \param distanceFromSpinAxis Distance from Earth spin axis where difference is to be calculated
 *  \param distanceFromEquatorialPlane Distance from Earth equatorial plane where difference is to be calculated
 *  \return Difference between TDB and TT at requested position and TDB
 */
template< typename TimeType >
TimeType getTDBminusTT( const TimeType ttOrTdbSinceJ2000, const double stationLongitude, const double distanceFromSpinAxis,
                        const double distanceFromEquatorialPlane )
{
    // Calculate current TAI (approximately if input is in TDB)
    TimeType tai = convertTTtoTAI< TimeType >( ttOrTdbSinceJ2000 );

    // Calculate current UT1 (by assuming it equal to UTC)
    double ut1 = static_cast< double >( convertTAItoUTC< TimeType >( tai ) );
    double ut1FractionOfDay = ( ut1 / physical_constants::JULIAN_DAY ) -
            static_cast< double >( std::floor( ut1 / physical_constants::JULIAN_DAY ) );

    // Calculate and return difference (introducing addition approximation if input is in TT, by assuming TDB is equal to TT)
    return getTDBminusTT< TimeType >( ttOrTdbSinceJ2000, ut1FractionOfDay, stationLongitude, distanceFromSpinAxis, distanceFromEquatorialPlane );
}

//! Function to convert TDB to TT
/*!
 *  Function to convert TDB (Dynamical Barycentric Time) to TT (Terrestrial Time), from Sofa function, which is based
 *  on decomposition of time ephemeris generated by Fairhead an Bretagnon (1990). Note that the time ephemeris should be generated
 *  by solution of differential equation for ephemerides that are used, if very high consistency is required.
 *  \param ephemerisTime TDB in seconds since J2000.
 *  \param universalTimeFractionOfDay UT1 in fraction of current day.
 *  \param stationLongitude Longitude of point on Earth where difference is to be calculated
 *  \param distanceFromSpinAxis Distance from Earth spin axis where difference is to be calculated
 *  \param distanceFromEquatorialPlane Distance from Earth equatorial plane where difference is to be calculated
 *  \return Time in TT; seconds since J2000
 */
template< typename TimeType >
TimeType convertTDBtoTT( const TimeType ephemerisTime, const double universalTimeFractionOfDay, const double stationLongitude,
                         const double distanceFromSpinAxis, const double distanceFromEquatorialPlane )
{
    return ephemerisTime - getTDBminusTT< TimeType >( ephemerisTime, universalTimeFractionOfDay,
                                                      stationLongitude, distanceFromSpinAxis,
                                                      distanceFromEquatorialPlane );
}


} // namespace sofa_interfaces

} // namespace tudat

#endif // TUDAT_SOFA_TIMECONVERSIONS_H
